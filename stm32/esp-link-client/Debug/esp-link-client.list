
esp-link-client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800636c  0800636c  0001636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006410  08006410  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006418  08006418  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004bf8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c08  20004c08  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3fb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045a5  00000000  00000000  0003a43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0003e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001430  00000000  00000000  00040018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cb6  00000000  00000000  00041448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019606  00000000  00000000  000680fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0151  00000000  00000000  00081704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00161855  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a2c  00000000  00000000  001618a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006354 	.word	0x08006354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006354 	.word	0x08006354

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000080 	.word	0x20000080

0800050c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetTimerTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetTimerTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000280 	.word	0x20000280
 800053c:	200002d4 	.word	0x200002d4

08000540 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b08e      	sub	sp, #56	; 0x38
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  Mqtt_Init();
 8000546:	f005 fda5 	bl	8006094 <Mqtt_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_FREERTOS_Init+0x5c>)
 800054c:	f107 041c 	add.w	r4, r7, #28
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f002 faf4 	bl	8002b52 <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <MX_FREERTOS_Init+0x60>)
 800056e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ELClientRxTask, StartELClientRxTask, osPriorityNormal, 0, 512);
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_FREERTOS_Init+0x64>)
 8000572:	463c      	mov	r4, r7
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ELClientRxTaskHandle = osThreadCreate(osThread(ELClientRxTask), NULL);
 8000582:	463b      	mov	r3, r7
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fae3 	bl	8002b52 <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <MX_FREERTOS_Init+0x68>)
 8000590:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8000592:	bf00      	nop
 8000594:	3738      	adds	r7, #56	; 0x38
 8000596:	46bd      	mov	sp, r7
 8000598:	bdb0      	pop	{r4, r5, r7, pc}
 800059a:	bf00      	nop
 800059c:	08006388 	.word	0x08006388
 80005a0:	20004724 	.word	0x20004724
 80005a4:	080063a4 	.word	0x080063a4
 80005a8:	20004728 	.word	0x20004728

080005ac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
 
  Mqtt_Sync();
 80005b4:	f005 fda1 	bl	80060fa <Mqtt_Sync>
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <StartDefaultTask+0x44>)
 80005be:	f000 fd7f 	bl	80010c0 <HAL_GPIO_TogglePin>
  ELClientMqtt_setup();
 80005c2:	f005 fbd3 	bl	8005d6c <ELClientMqtt_setup>
  ELClientMqtt_subscribe("/esp-link/2", 1);
 80005c6:	2101      	movs	r1, #1
 80005c8:	480a      	ldr	r0, [pc, #40]	; (80005f4 <StartDefaultTask+0x48>)
 80005ca:	f005 fbff 	bl	8005dcc <ELClientMqtt_subscribe>
  osDelay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f002 fb0b 	bl	8002bea <osDelay>
  ELClientMqtt_subscribe("/esp-link/2", 1);
 80005d4:	2101      	movs	r1, #1
 80005d6:	4807      	ldr	r0, [pc, #28]	; (80005f4 <StartDefaultTask+0x48>)
 80005d8:	f005 fbf8 	bl	8005dcc <ELClientMqtt_subscribe>
  /* Infinite loop */
  for(;;)
  {
	  Mqtt_Publish("/esp-link/1", "hello", strlen("hello"));
 80005dc:	2205      	movs	r2, #5
 80005de:	4906      	ldr	r1, [pc, #24]	; (80005f8 <StartDefaultTask+0x4c>)
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <StartDefaultTask+0x50>)
 80005e2:	f005 fd77 	bl	80060d4 <Mqtt_Publish>
	  osDelay(3000);
 80005e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005ea:	f002 fafe 	bl	8002bea <osDelay>
  {
 80005ee:	e7f5      	b.n	80005dc <StartDefaultTask+0x30>
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	080063c0 	.word	0x080063c0
 80005f8:	080063cc 	.word	0x080063cc
 80005fc:	080063d4 	.word	0x080063d4

08000600 <StartELClientRxTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartELClientRxTask(void const * argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	osDelay(500);
 8000608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060c:	f002 faed 	bl	8002bea <osDelay>
	for (;;)
	{
		 ELClient_Process(0);
 8000610:	2000      	movs	r0, #0
 8000612:	f005 f9c5 	bl	80059a0 <ELClient_Process>
 8000616:	e7fb      	b.n	8000610 <StartELClientRxTask+0x10>

08000618 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	041a      	lsls	r2, r3, #16
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	619a      	str	r2, [r3, #24]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000644:	4907      	ldr	r1, [pc, #28]	; (8000664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4313      	orrs	r3, r2
 800064a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800064e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4013      	ands	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000656:	68fb      	ldr	r3, [r7, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	40023800 	.word	0x40023800

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800067e:	2080      	movs	r0, #128	; 0x80
 8000680:	f7ff ffda 	bl	8000638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff ffd7 	bl	8000638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800068a:	2002      	movs	r0, #2
 800068c:	f7ff ffd4 	bl	8000638 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000690:	2008      	movs	r0, #8
 8000692:	f7ff ffd1 	bl	8000638 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD1_GPIO_Port, LD1_Pin);
 8000696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <MX_GPIO_Init+0x60>)
 800069c:	f7ff ffbc 	bl	8000618 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006a6:	2301      	movs	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <MX_GPIO_Init+0x60>)
 80006bc:	f001 fd5f 	bl	800217e <LL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020c00 	.word	0x40020c00

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d0:	f000 fbd2 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d4:	f000 f80e 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f7ff ffc6 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006dc:	f000 fae0 	bl	8000ca0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80006e0:	f000 f9d4 	bl	8000a8c <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80006e4:	f000 fb3c 	bl	8000d60 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006e8:	f7ff ff2a 	bl	8000540 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80006ec:	f002 fa2a 	bl	8002b44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x24>
	...

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f005 fe1e 	bl	8006344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <SystemClock_Config+0xc8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a26      	ldr	r2, [pc, #152]	; (80007bc <SystemClock_Config+0xc8>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <SystemClock_Config+0xc8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <SystemClock_Config+0xcc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <SystemClock_Config+0xcc>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <SystemClock_Config+0xcc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000768:	2348      	movs	r3, #72	; 0x48
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fcbb 	bl	80010f4 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 f830 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	f107 030c 	add.w	r3, r7, #12
 80007a2:	2102      	movs	r1, #2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 ff1d 	bl	80015e4 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007b0:	f000 f81a 	bl	80007e8 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	; 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d6:	f000 fb71 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40001000 	.word	0x40001000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <HAL_MspInit+0x54>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_MspInit+0x54>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	210f      	movs	r1, #15
 8000836:	f06f 0001 	mvn.w	r0, #1
 800083a:	f000 fc17 	bl	800106c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	2036      	movs	r0, #54	; 0x36
 8000862:	f000 fc03 	bl	800106c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000866:	2036      	movs	r0, #54	; 0x36
 8000868:	f000 fc1c 	bl	80010a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <HAL_InitTick+0xa4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <HAL_InitTick+0xa4>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <HAL_InitTick+0xa4>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 0310 	and.w	r3, r3, #16
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000888:	f107 0210 	add.w	r2, r7, #16
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f88e 	bl	80019b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000898:	f001 f878 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 800089c:	4603      	mov	r3, r0
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <HAL_InitTick+0xa8>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_InitTick+0xac>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_InitTick+0xb0>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_InitTick+0xac>)
 80008b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_InitTick+0xac>)
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_InitTick+0xac>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_InitTick+0xac>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_InitTick+0xac>)
 80008d2:	f001 f8a1 	bl	8001a18 <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_InitTick+0xac>)
 80008de:	f001 f8f5 	bl	8001acc <HAL_TIM_Base_Start_IT>
 80008e2:	4603      	mov	r3, r0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	2000472c 	.word	0x2000472c
 80008fc:	40001000 	.word	0x40001000

08000900 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800090e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f06f 0220 	mvn.w	r2, #32
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uint8_t  data = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	71fb      	strb	r3, [r7, #7]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
  data = 0xFF & (USART2->DR);
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <USART2_IRQHandler+0x38>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	71fb      	strb	r3, [r7, #7]
  xQueueSendFromISR( xSerialQueueHandle, &data, &xHigherPriorityTaskWoken );
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <USART2_IRQHandler+0x3c>)
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	463a      	mov	r2, r7
 8000988:	1df9      	adds	r1, r7, #7
 800098a:	2300      	movs	r3, #0
 800098c:	f002 fbf4 	bl	8003178 <xQueueGenericSendFromISR>
  LL_USART_ClearFlag_RXNE(USART2);
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <USART2_IRQHandler+0x38>)
 8000992:	f7ff ffc7 	bl	8000924 <LL_USART_ClearFlag_RXNE>
  LL_USART_ClearFlag_ORE(USART2);
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <USART2_IRQHandler+0x38>)
 8000998:	f7ff ffb2 	bl	8000900 <LL_USART_ClearFlag_ORE>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40004400 	.word	0x40004400
 80009a8:	20004c04 	.word	0x20004c04

080009ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <TIM6_DAC_IRQHandler+0x10>)
 80009c2:	f001 f8f3 	bl	8001bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000472c 	.word	0x2000472c

080009d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	605a      	str	r2, [r3, #4]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a68:	4907      	ldr	r1, [pc, #28]	; (8000a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4013      	ands	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40023800 	.word	0x40023800

08000a8c <MX_TIM7_Init>:

/* USER CODE END 0 */

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8000aa0:	2020      	movs	r0, #32
 8000aa2:	f7ff ffdb 	bl	8000a5c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab2:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4808      	ldr	r0, [pc, #32]	; (8000adc <MX_TIM7_Init+0x50>)
 8000aba:	f001 fd47 	bl	800254c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <MX_TIM7_Init+0x50>)
 8000ac0:	f7ff ff98 	bl	80009f4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_TIM7_Init+0x50>)
 8000ac8:	f7ff ffa4 	bl	8000a14 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <MX_TIM7_Init+0x50>)
 8000ace:	f7ff ffb4 	bl	8000a3a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40001400 	.word	0x40001400

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	; (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	; 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <LL_USART_Enable>:
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60da      	str	r2, [r3, #12]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <LL_USART_ConfigAsyncMode>:
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	615a      	str	r2, [r3, #20]
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
	...

08000c40 <LL_AHB1_GRP1_EnableClock>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40023800 	.word	0x40023800

08000c70 <LL_APB1_GRP1_EnableClock>:
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000cca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cce:	f7ff ffcf 	bl	8000c70 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f7ff ffb4 	bl	8000c40 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000cd8:	230c      	movs	r3, #12
 8000cda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000cec:	2307      	movs	r3, #7
 8000cee:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4818      	ldr	r0, [pc, #96]	; (8000d58 <MX_USART2_UART_Init+0xb8>)
 8000cf6:	f001 fa42 	bl	800217e <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000cfa:	f7ff fef1 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2200      	movs	r2, #0
 8000d02:	2105      	movs	r1, #5
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff41 	bl	8000b8c <NVIC_EncodePriority>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	2026      	movs	r0, #38	; 0x26
 8000d10:	f7ff ff12 	bl	8000b38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000d14:	2026      	movs	r0, #38	; 0x26
 8000d16:	f7ff fef1 	bl	8000afc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000d1a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d1e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d34:	2300      	movs	r3, #0
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MX_USART2_UART_Init+0xbc>)
 8000d40:	f001 fe68 	bl	8002a14 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART2_UART_Init+0xbc>)
 8000d46:	f7ff ff64 	bl	8000c12 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_USART2_UART_Init+0xbc>)
 8000d4c:	f7ff ff51 	bl	8000bf2 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3738      	adds	r7, #56	; 0x38
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40004400 	.word	0x40004400

08000d60 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000d8a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d8e:	f7ff ff6f 	bl	8000c70 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff ff54 	bl	8000c40 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000d98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4819      	ldr	r0, [pc, #100]	; (8000e1c <MX_USART3_UART_Init+0xbc>)
 8000db8:	f001 f9e1 	bl	800217e <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000dbc:	f7ff fe90 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2105      	movs	r1, #5
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fee0 	bl	8000b8c <NVIC_EncodePriority>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	2027      	movs	r0, #39	; 0x27
 8000dd2:	f7ff feb1 	bl	8000b38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8000dd6:	2027      	movs	r0, #39	; 0x27
 8000dd8:	f7ff fe90 	bl	8000afc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ddc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000de0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000dee:	230c      	movs	r3, #12
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_USART3_UART_Init+0xc0>)
 8000e02:	f001 fe07 	bl	8002a14 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <MX_USART3_UART_Init+0xc0>)
 8000e08:	f7ff ff03 	bl	8000c12 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <MX_USART3_UART_Init+0xc0>)
 8000e0e:	f7ff fef0 	bl	8000bf2 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40004800 	.word	0x40004800

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff fdbf 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f005 fa45 	bl	80062e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fc39 	bl	80006cc <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e68:	08006420 	.word	0x08006420
  ldr r2, =_sbss
 8000e6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e70:	20004c08 	.word	0x20004c08

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f8d8 	bl	8001056 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f7ff fcd0 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fca2 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20004774 	.word	0x20004774

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20004774 	.word	0x20004774

08000efc <__NVIC_SetPriorityGrouping>:
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff4c 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107e:	f7ff ff61 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 8001082:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	6978      	ldr	r0, [r7, #20]
 800108a:	f7ff ffb1 	bl	8000ff0 <NVIC_EncodePriority>
 800108e:	4602      	mov	r2, r0
 8001090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff80 	bl	8000f9c <__NVIC_SetPriority>
}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff54 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43d9      	mvns	r1, r3
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	400b      	ands	r3, r1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e264      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d075      	beq.n	80011fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001112:	4ba3      	ldr	r3, [pc, #652]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b04      	cmp	r3, #4
 800111c:	d00c      	beq.n	8001138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4ba0      	ldr	r3, [pc, #640]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001126:	2b08      	cmp	r3, #8
 8001128:	d112      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b9d      	ldr	r3, [pc, #628]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001136:	d10b      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4b99      	ldr	r3, [pc, #612]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d05b      	beq.n	80011fc <HAL_RCC_OscConfig+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d157      	bne.n	80011fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e23f      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x74>
 800115a:	4b91      	ldr	r3, [pc, #580]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a90      	ldr	r2, [pc, #576]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x98>
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a8a      	ldr	r2, [pc, #552]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a87      	ldr	r2, [pc, #540]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 800118c:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a83      	ldr	r2, [pc, #524]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a80      	ldr	r2, [pc, #512]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fe9a 	bl	8000ee4 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fe96 	bl	8000ee4 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e204      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xc0>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fe86 	bl	8000ee4 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fe82 	bl	8000ee4 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1f0      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0xe8>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120a:	4b65      	ldr	r3, [pc, #404]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1c4      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4952      	ldr	r1, [pc, #328]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <HAL_RCC_OscConfig+0x2b0>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126a:	f7ff fe3b 	bl	8000ee4 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fe37 	bl	8000ee4 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1a5      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4940      	ldr	r1, [pc, #256]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <HAL_RCC_OscConfig+0x2b0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fe1a 	bl	8000ee4 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fe16 	bl	8000ee4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e184      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d030      	beq.n	8001340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d016      	beq.n	8001314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ec:	f7ff fdfa 	bl	8000ee4 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fdf6 	bl	8000ee4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e164      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x200>
 8001312:	e015      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fde3 	bl	8000ee4 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fddf 	bl	8000ee4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e14d      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80a0 	beq.w	800148e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d121      	bne.n	80013ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff fda5 	bl	8000ee4 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e011      	b.n	80013c2 <HAL_RCC_OscConfig+0x2ce>
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	42470000 	.word	0x42470000
 80013a8:	42470e80 	.word	0x42470e80
 80013ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b0:	f7ff fd98 	bl	8000ee4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e106      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_RCC_OscConfig+0x4e4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d106      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
 80013d6:	4b81      	ldr	r3, [pc, #516]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	4a80      	ldr	r2, [pc, #512]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6713      	str	r3, [r2, #112]	; 0x70
 80013e2:	e01c      	b.n	800141e <HAL_RCC_OscConfig+0x32a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x312>
 80013ec:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a7a      	ldr	r2, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	4b78      	ldr	r3, [pc, #480]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fc:	4a77      	ldr	r2, [pc, #476]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6713      	str	r3, [r2, #112]	; 0x70
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x32a>
 8001406:	4b75      	ldr	r3, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a74      	ldr	r2, [pc, #464]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	4a71      	ldr	r2, [pc, #452]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fd5d 	bl	8000ee4 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fd59 	bl	8000ee4 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e0c5      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ee      	beq.n	800142e <HAL_RCC_OscConfig+0x33a>
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fd47 	bl	8000ee4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fd43 	bl	8000ee4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0af      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a55      	ldr	r2, [pc, #340]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 809b 	beq.w	80015ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001498:	4b50      	ldr	r3, [pc, #320]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d05c      	beq.n	800155e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d141      	bne.n	8001530 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ac:	4b4c      	ldr	r3, [pc, #304]	; (80015e0 <HAL_RCC_OscConfig+0x4ec>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fd17 	bl	8000ee4 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff fd13 	bl	8000ee4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e081      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014cc:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	019b      	lsls	r3, r3, #6
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	085b      	lsrs	r3, r3, #1
 80014f0:	3b01      	subs	r3, #1
 80014f2:	041b      	lsls	r3, r3, #16
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	061b      	lsls	r3, r3, #24
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_RCC_OscConfig+0x4ec>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fcec 	bl	8000ee4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fce8 	bl	8000ee4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e056      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x41c>
 800152e:	e04e      	b.n	80015ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_RCC_OscConfig+0x4ec>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fcd5 	bl	8000ee4 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fcd1 	bl	8000ee4 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e03f      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x44a>
 800155c:	e037      	b.n	80015ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e032      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_RCC_OscConfig+0x4e8>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d028      	beq.n	80015ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d121      	bne.n	80015ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001590:	429a      	cmp	r2, r3
 8001592:	d11a      	bne.n	80015ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800159a:	4013      	ands	r3, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d111      	bne.n	80015ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	3b01      	subs	r3, #1
 80015b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40007000 	.word	0x40007000
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470060 	.word	0x42470060

080015e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0cc      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d90c      	bls.n	8001620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b65      	ldr	r3, [pc, #404]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b63      	ldr	r3, [pc, #396]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0b8      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4a52      	ldr	r2, [pc, #328]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800165a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165c:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	494d      	ldr	r1, [pc, #308]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d044      	beq.n	8001704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e07f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e067      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4934      	ldr	r1, [pc, #208]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d4:	f7ff fc06 	bl	8000ee4 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff fc02 	bl	8000ee4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e04f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 020c 	and.w	r2, r3, #12
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	d1eb      	bne.n	80016dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d20c      	bcs.n	800172c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e032      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4916      	ldr	r1, [pc, #88]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	490e      	ldr	r1, [pc, #56]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800176a:	f000 f821 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 800176e:	4602      	mov	r2, r0
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	490a      	ldr	r1, [pc, #40]	; (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	5ccb      	ldrb	r3, [r1, r3]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f85e 	bl	800084c <HAL_InitTick>

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00
 80017a0:	40023800 	.word	0x40023800
 80017a4:	080063f8 	.word	0x080063f8
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c8:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d00d      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x40>
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	f200 80bd 	bhi.w	8001954 <HAL_RCC_GetSysClockFreq+0x1a4>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x34>
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x3a>
 80017e2:	e0b7      	b.n	8001954 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b61      	ldr	r3, [pc, #388]	; (800196c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017e6:	60bb      	str	r3, [r7, #8]
       break;
 80017e8:	e0b7      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ea:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017ec:	60bb      	str	r3, [r7, #8]
      break;
 80017ee:	e0b4      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f0:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fa:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d04d      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001806:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	099b      	lsrs	r3, r3, #6
 800180c:	461a      	mov	r2, r3
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	ea02 0800 	and.w	r8, r2, r0
 800181e:	ea03 0901 	and.w	r9, r3, r1
 8001822:	4640      	mov	r0, r8
 8001824:	4649      	mov	r1, r9
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	014b      	lsls	r3, r1, #5
 8001830:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001834:	0142      	lsls	r2, r0, #5
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	ebb0 0008 	subs.w	r0, r0, r8
 800183e:	eb61 0109 	sbc.w	r1, r1, r9
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	018b      	lsls	r3, r1, #6
 800184c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001850:	0182      	lsls	r2, r0, #6
 8001852:	1a12      	subs	r2, r2, r0
 8001854:	eb63 0301 	sbc.w	r3, r3, r1
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	00d9      	lsls	r1, r3, #3
 8001862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001866:	00d0      	lsls	r0, r2, #3
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	eb12 0208 	adds.w	r2, r2, r8
 8001870:	eb43 0309 	adc.w	r3, r3, r9
 8001874:	f04f 0000 	mov.w	r0, #0
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	0259      	lsls	r1, r3, #9
 800187e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001882:	0250      	lsls	r0, r2, #9
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	f7fe fca4 	bl	80001e0 <__aeabi_uldivmod>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4613      	mov	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e04a      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	461a      	mov	r2, r3
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	ea02 0400 	and.w	r4, r2, r0
 80018ba:	ea03 0501 	and.w	r5, r3, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	014b      	lsls	r3, r1, #5
 80018cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018d0:	0142      	lsls	r2, r0, #5
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	1b00      	subs	r0, r0, r4
 80018d8:	eb61 0105 	sbc.w	r1, r1, r5
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	018b      	lsls	r3, r1, #6
 80018e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018ea:	0182      	lsls	r2, r0, #6
 80018ec:	1a12      	subs	r2, r2, r0
 80018ee:	eb63 0301 	sbc.w	r3, r3, r1
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	00d9      	lsls	r1, r3, #3
 80018fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001900:	00d0      	lsls	r0, r2, #3
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	1912      	adds	r2, r2, r4
 8001908:	eb45 0303 	adc.w	r3, r5, r3
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	f04f 0100 	mov.w	r1, #0
 8001914:	0299      	lsls	r1, r3, #10
 8001916:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800191a:	0290      	lsls	r0, r2, #10
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	461a      	mov	r2, r3
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	f7fe fc58 	bl	80001e0 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	3301      	adds	r3, #1
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	60bb      	str	r3, [r7, #8]
      break;
 8001952:	e002      	b.n	800195a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001956:	60bb      	str	r3, [r7, #8]
      break;
 8001958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195a:	68bb      	ldr	r3, [r7, #8]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	00f42400 	.word	0x00f42400
 8001970:	007a1200 	.word	0x007a1200

08001974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_RCC_GetHCLKFreq+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000000 	.word	0x20000000

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001990:	f7ff fff0 	bl	8001974 <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0a9b      	lsrs	r3, r3, #10
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08006408 	.word	0x08006408

080019b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	220f      	movs	r2, #15
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_RCC_GetClockConfig+0x60>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0207 	and.w	r2, r3, #7
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e041      	b.n	8001aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f839 	bl	8001ab6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f000 f9d8 	bl	8001e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d001      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e04e      	b.n	8001b82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d022      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0e:	d01d      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d010      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6e:	e007      	b.n	8001b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40010000 	.word	0x40010000
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40000c00 	.word	0x40000c00
 8001ba0:	40010400 	.word	0x40010400
 8001ba4:	40014000 	.word	0x40014000
 8001ba8:	40001800 	.word	0x40001800

08001bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0202 	mvn.w	r2, #2
 8001bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8ee 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8e0 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8f1 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0204 	mvn.w	r2, #4
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8c4 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8b6 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8c7 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0208 	mvn.w	r2, #8
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2204      	movs	r2, #4
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f89a 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f88c 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f89d 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0210 	mvn.w	r2, #16
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f870 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f862 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f873 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10e      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0201 	mvn.w	r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fd4a 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	2b80      	cmp	r3, #128	; 0x80
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b80      	cmp	r3, #128	; 0x80
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f902 	bl	8001f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	2b40      	cmp	r3, #64	; 0x40
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f838 	bl	8001df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0220 	mvn.w	r2, #32
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8cc 	bl	8001f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a40      	ldr	r2, [pc, #256]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2a:	d00f      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	; (8001f24 <TIM_Base_SetConfig+0x118>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00b      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <TIM_Base_SetConfig+0x11c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <TIM_Base_SetConfig+0x120>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d003      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d108      	bne.n	8001e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d027      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <TIM_Base_SetConfig+0x118>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d023      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <TIM_Base_SetConfig+0x11c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01f      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <TIM_Base_SetConfig+0x120>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d017      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <TIM_Base_SetConfig+0x128>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <TIM_Base_SetConfig+0x12c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00f      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <TIM_Base_SetConfig+0x130>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <TIM_Base_SetConfig+0x134>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <TIM_Base_SetConfig+0x138>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <TIM_Base_SetConfig+0x13c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0xf8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d103      	bne.n	8001f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	615a      	str	r2, [r3, #20]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40014400 	.word	0x40014400
 8001f3c:	40014800 	.word	0x40014800
 8001f40:	40001800 	.word	0x40001800
 8001f44:	40001c00 	.word	0x40001c00
 8001f48:	40002000 	.word	0x40002000

08001f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_GPIO_SetPinMode>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2103      	movs	r1, #3
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	61bb      	str	r3, [r7, #24]
  return result;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_GPIO_SetPinOutputType>:
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b085      	sub	sp, #20
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	605a      	str	r2, [r3, #4]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_GPIO_SetPinSpeed>:
{
 8002002:	b480      	push	{r7}
 8002004:	b089      	sub	sp, #36	; 0x24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	613b      	str	r3, [r7, #16]
  return result;
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2103      	movs	r1, #3
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	401a      	ands	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	61bb      	str	r3, [r7, #24]
  return result;
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	431a      	orrs	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	609a      	str	r2, [r3, #8]
}
 8002054:	bf00      	nop
 8002056:	3724      	adds	r7, #36	; 0x24
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_GPIO_SetPinPull>:
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	613b      	str	r3, [r7, #16]
  return result;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2103      	movs	r1, #3
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	61bb      	str	r3, [r7, #24]
  return result;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	60da      	str	r2, [r3, #12]
}
 80020b2:	bf00      	nop
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_GPIO_SetAFPin_0_7>:
{
 80020be:	b480      	push	{r7}
 80020c0:	b089      	sub	sp, #36	; 0x24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	613b      	str	r3, [r7, #16]
  return result;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	210f      	movs	r1, #15
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	401a      	ands	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	61bb      	str	r3, [r7, #24]
  return result;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	431a      	orrs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	621a      	str	r2, [r3, #32]
}
 8002110:	bf00      	nop
 8002112:	3724      	adds	r7, #36	; 0x24
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_GPIO_SetAFPin_8_15>:
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	613b      	str	r3, [r7, #16]
  return result;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	210f      	movs	r1, #15
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	401a      	ands	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	61bb      	str	r3, [r7, #24]
  return result;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b088      	sub	sp, #32
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	613b      	str	r3, [r7, #16]
  return result;
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80021a8:	e050      	b.n	800224c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	2101      	movs	r1, #1
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d042      	beq.n	8002246 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d003      	beq.n	80021d0 <LL_GPIO_Init+0x52>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d10d      	bne.n	80021ec <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	461a      	mov	r2, r3
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff12 	bl	8002002 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	461a      	mov	r2, r3
 80021e4:	69b9      	ldr	r1, [r7, #24]
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fef3 	bl	8001fd2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	461a      	mov	r2, r3
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff33 	bl	8002060 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d11a      	bne.n	8002238 <LL_GPIO_Init+0xba>
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	60bb      	str	r3, [r7, #8]
  return result;
 800220e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002210:	fab3 f383 	clz	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b07      	cmp	r3, #7
 8002218:	d807      	bhi.n	800222a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	461a      	mov	r2, r3
 8002220:	69b9      	ldr	r1, [r7, #24]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ff4b 	bl	80020be <LL_GPIO_SetAFPin_0_7>
 8002228:	e006      	b.n	8002238 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	461a      	mov	r2, r3
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff72 	bl	800211c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	461a      	mov	r2, r3
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff fe97 	bl	8001f74 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1a7      	bne.n	80021aa <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <LL_RCC_GetSysClkSource+0x18>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <LL_RCC_GetAHBPrescaler+0x18>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800

0800229c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <LL_RCC_PLL_GetMainSource+0x18>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800

080022f0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <LL_RCC_PLL_GetN+0x18>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	099b      	lsrs	r3, r3, #6
 80022fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	40023800 	.word	0x40023800

0800230c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <LL_RCC_PLL_GetP+0x18>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <LL_RCC_PLL_GetDivider+0x18>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800234c:	f000 f820 	bl	8002390 <RCC_GetSystemClockFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f840 	bl	80023e0 <RCC_GetHCLKClockFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f84e 	bl	800240c <RCC_GetPCLK1ClockFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f85a 	bl	8002434 <RCC_GetPCLK2ClockFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60da      	str	r2, [r3, #12]
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800239a:	f7ff ff63 	bl	8002264 <LL_RCC_GetSysClkSource>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d00c      	beq.n	80023be <RCC_GetSystemClockFreq+0x2e>
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d80f      	bhi.n	80023c8 <RCC_GetSystemClockFreq+0x38>
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <RCC_GetSystemClockFreq+0x22>
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d003      	beq.n	80023b8 <RCC_GetSystemClockFreq+0x28>
 80023b0:	e00a      	b.n	80023c8 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <RCC_GetSystemClockFreq+0x48>)
 80023b4:	607b      	str	r3, [r7, #4]
      break;
 80023b6:	e00a      	b.n	80023ce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <RCC_GetSystemClockFreq+0x4c>)
 80023ba:	607b      	str	r3, [r7, #4]
      break;
 80023bc:	e007      	b.n	80023ce <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80023be:	2008      	movs	r0, #8
 80023c0:	f000 f84c 	bl	800245c <RCC_PLL_GetFreqDomain_SYS>
 80023c4:	6078      	str	r0, [r7, #4]
      break;
 80023c6:	e002      	b.n	80023ce <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <RCC_GetSystemClockFreq+0x48>)
 80023ca:	607b      	str	r3, [r7, #4]
      break;
 80023cc:	bf00      	nop
  }

  return frequency;
 80023ce:	687b      	ldr	r3, [r7, #4]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	007a1200 	.word	0x007a1200

080023e0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80023e8:	f7ff ff4a 	bl	8002280 <LL_RCC_GetAHBPrescaler>
 80023ec:	4603      	mov	r3, r0
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <RCC_GetHCLKClockFreq+0x28>)
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	40d3      	lsrs	r3, r2
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	080063f8 	.word	0x080063f8

0800240c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002414:	f7ff ff42 	bl	800229c <LL_RCC_GetAPB1Prescaler>
 8002418:	4603      	mov	r3, r0
 800241a:	0a9b      	lsrs	r3, r3, #10
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <RCC_GetPCLK1ClockFreq+0x24>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	40d3      	lsrs	r3, r2
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	08006408 	.word	0x08006408

08002434 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800243c:	f7ff ff3c 	bl	80022b8 <LL_RCC_GetAPB2Prescaler>
 8002440:	4603      	mov	r3, r0
 8002442:	0b5b      	lsrs	r3, r3, #13
 8002444:	4a04      	ldr	r2, [pc, #16]	; (8002458 <RCC_GetPCLK2ClockFreq+0x24>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	40d3      	lsrs	r3, r2
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	08006408 	.word	0x08006408

0800245c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002470:	f7ff ff30 	bl	80022d4 <LL_RCC_PLL_GetMainSource>
 8002474:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002482:	d003      	beq.n	800248c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002484:	e005      	b.n	8002492 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002488:	617b      	str	r3, [r7, #20]
      break;
 800248a:	e005      	b.n	8002498 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800248e:	617b      	str	r3, [r7, #20]
      break;
 8002490:	e002      	b.n	8002498 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002494:	617b      	str	r3, [r7, #20]
      break;
 8002496:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b08      	cmp	r3, #8
 800249c:	d113      	bne.n	80024c6 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800249e:	f7ff ff43 	bl	8002328 <LL_RCC_PLL_GetDivider>
 80024a2:	4602      	mov	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fbb3 f4f2 	udiv	r4, r3, r2
 80024aa:	f7ff ff21 	bl	80022f0 <LL_RCC_PLL_GetN>
 80024ae:	4603      	mov	r3, r0
 80024b0:	fb03 f404 	mul.w	r4, r3, r4
 80024b4:	f7ff ff2a 	bl	800230c <LL_RCC_PLL_GetP>
 80024b8:	4603      	mov	r3, r0
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	3301      	adds	r3, #1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fbb4 f3f3 	udiv	r3, r4, r3
 80024c4:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80024c6:	693b      	ldr	r3, [r7, #16]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	00f42400 	.word	0x00f42400
 80024d4:	007a1200 	.word	0x007a1200

080024d8 <LL_TIM_SetPrescaler>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_TIM_SetAutoReload>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_TIM_SetRepetitionCounter>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f043 0201 	orr.w	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	615a      	str	r2, [r3, #20]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a3d      	ldr	r2, [pc, #244]	; (8002654 <LL_TIM_Init+0x108>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <LL_TIM_Init+0x40>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256a:	d00f      	beq.n	800258c <LL_TIM_Init+0x40>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3a      	ldr	r2, [pc, #232]	; (8002658 <LL_TIM_Init+0x10c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00b      	beq.n	800258c <LL_TIM_Init+0x40>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a39      	ldr	r2, [pc, #228]	; (800265c <LL_TIM_Init+0x110>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <LL_TIM_Init+0x40>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a38      	ldr	r2, [pc, #224]	; (8002660 <LL_TIM_Init+0x114>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <LL_TIM_Init+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a37      	ldr	r2, [pc, #220]	; (8002664 <LL_TIM_Init+0x118>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d106      	bne.n	800259a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a2d      	ldr	r2, [pc, #180]	; (8002654 <LL_TIM_Init+0x108>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d02b      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a8:	d027      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <LL_TIM_Init+0x10c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d023      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <LL_TIM_Init+0x110>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01f      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a28      	ldr	r2, [pc, #160]	; (8002660 <LL_TIM_Init+0x114>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01b      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a27      	ldr	r2, [pc, #156]	; (8002664 <LL_TIM_Init+0x118>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d017      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <LL_TIM_Init+0x11c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <LL_TIM_Init+0x120>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00f      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <LL_TIM_Init+0x124>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00b      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <LL_TIM_Init+0x128>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <LL_TIM_Init+0x12c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d003      	beq.n	80025fa <LL_TIM_Init+0xae>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a21      	ldr	r2, [pc, #132]	; (800267c <LL_TIM_Init+0x130>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d106      	bne.n	8002608 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff6d 	bl	80024f4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff59 	bl	80024d8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <LL_TIM_Init+0x108>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <LL_TIM_Init+0xea>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <LL_TIM_Init+0x118>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d105      	bne.n	8002642 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	4619      	mov	r1, r3
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff67 	bl	8002510 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff72 	bl	800252c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40010000 	.word	0x40010000
 8002658:	40000400 	.word	0x40000400
 800265c:	40000800 	.word	0x40000800
 8002660:	40000c00 	.word	0x40000c00
 8002664:	40010400 	.word	0x40010400
 8002668:	40014000 	.word	0x40014000
 800266c:	40014400 	.word	0x40014400
 8002670:	40014800 	.word	0x40014800
 8002674:	40001800 	.word	0x40001800
 8002678:	40001c00 	.word	0x40001c00
 800267c:	40002000 	.word	0x40002000

08002680 <LL_USART_IsEnabled>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_USART_SetStopBitsLength>:
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	611a      	str	r2, [r3, #16]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_USART_SetHWFlowCtrl>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	615a      	str	r2, [r3, #20]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_USART_SetBaudRate>:
{
 80026f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f8:	b09f      	sub	sp, #124	; 0x7c
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6778      	str	r0, [r7, #116]	; 0x74
 80026fe:	6739      	str	r1, [r7, #112]	; 0x70
 8002700:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002702:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800270a:	f040 80bc 	bne.w	8002886 <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800270e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002710:	461c      	mov	r4, r3
 8002712:	f04f 0500 	mov.w	r5, #0
 8002716:	4622      	mov	r2, r4
 8002718:	462b      	mov	r3, r5
 800271a:	eb12 0a02 	adds.w	sl, r2, r2
 800271e:	eb43 0b03 	adc.w	fp, r3, r3
 8002722:	4652      	mov	r2, sl
 8002724:	465b      	mov	r3, fp
 8002726:	1912      	adds	r2, r2, r4
 8002728:	eb45 0303 	adc.w	r3, r5, r3
 800272c:	f04f 0000 	mov.w	r0, #0
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	00d9      	lsls	r1, r3, #3
 8002736:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800273a:	00d0      	lsls	r0, r2, #3
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	1911      	adds	r1, r2, r4
 8002742:	6639      	str	r1, [r7, #96]	; 0x60
 8002744:	416b      	adcs	r3, r5
 8002746:	667b      	str	r3, [r7, #100]	; 0x64
 8002748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800274a:	461a      	mov	r2, r3
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	1891      	adds	r1, r2, r2
 8002752:	6339      	str	r1, [r7, #48]	; 0x30
 8002754:	415b      	adcs	r3, r3
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
 8002758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800275c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002760:	f7fd fd3e 	bl	80001e0 <__aeabi_uldivmod>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4ba9      	ldr	r3, [pc, #676]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 800276a:	fba3 2302 	umull	r2, r3, r3, r2
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	b29b      	uxth	r3, r3
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	b29e      	uxth	r6, r3
 8002776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002778:	461c      	mov	r4, r3
 800277a:	f04f 0500 	mov.w	r5, #0
 800277e:	4622      	mov	r2, r4
 8002780:	462b      	mov	r3, r5
 8002782:	1891      	adds	r1, r2, r2
 8002784:	62b9      	str	r1, [r7, #40]	; 0x28
 8002786:	415b      	adcs	r3, r3
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800278e:	1912      	adds	r2, r2, r4
 8002790:	eb45 0303 	adc.w	r3, r5, r3
 8002794:	f04f 0000 	mov.w	r0, #0
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	00d9      	lsls	r1, r3, #3
 800279e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027a2:	00d0      	lsls	r0, r2, #3
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	1911      	adds	r1, r2, r4
 80027aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80027ac:	416b      	adcs	r3, r5
 80027ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b2:	461a      	mov	r2, r3
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	1891      	adds	r1, r2, r2
 80027ba:	6239      	str	r1, [r7, #32]
 80027bc:	415b      	adcs	r3, r3
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80027c8:	f7fd fd0a 	bl	80001e0 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 80027d2:	fba3 1302 	umull	r1, r3, r3, r2
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	2164      	movs	r1, #100	; 0x64
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	4a8a      	ldr	r2, [pc, #552]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4433      	add	r3, r6
 80027fa:	b29e      	uxth	r6, r3
 80027fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fe:	4618      	mov	r0, r3
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	1894      	adds	r4, r2, r2
 800280a:	61bc      	str	r4, [r7, #24]
 800280c:	415b      	adcs	r3, r3
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002814:	1812      	adds	r2, r2, r0
 8002816:	eb41 0303 	adc.w	r3, r1, r3
 800281a:	f04f 0400 	mov.w	r4, #0
 800281e:	f04f 0500 	mov.w	r5, #0
 8002822:	00dd      	lsls	r5, r3, #3
 8002824:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002828:	00d4      	lsls	r4, r2, #3
 800282a:	4622      	mov	r2, r4
 800282c:	462b      	mov	r3, r5
 800282e:	1814      	adds	r4, r2, r0
 8002830:	653c      	str	r4, [r7, #80]	; 0x50
 8002832:	414b      	adcs	r3, r1
 8002834:	657b      	str	r3, [r7, #84]	; 0x54
 8002836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002838:	461a      	mov	r2, r3
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	1891      	adds	r1, r2, r2
 8002840:	6139      	str	r1, [r7, #16]
 8002842:	415b      	adcs	r3, r3
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800284a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800284e:	f7fd fcc7 	bl	80001e0 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 8002858:	fba3 1302 	umull	r1, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	2164      	movs	r1, #100	; 0x64
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	3332      	adds	r3, #50	; 0x32
 800286a:	4a69      	ldr	r2, [pc, #420]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	b29b      	uxth	r3, r3
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	b29b      	uxth	r3, r3
 800287a:	4433      	add	r3, r6
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	e0be      	b.n	8002a04 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002888:	461c      	mov	r4, r3
 800288a:	f04f 0500 	mov.w	r5, #0
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	eb12 0802 	adds.w	r8, r2, r2
 8002896:	eb43 0903 	adc.w	r9, r3, r3
 800289a:	4642      	mov	r2, r8
 800289c:	464b      	mov	r3, r9
 800289e:	1912      	adds	r2, r2, r4
 80028a0:	eb45 0303 	adc.w	r3, r5, r3
 80028a4:	f04f 0000 	mov.w	r0, #0
 80028a8:	f04f 0100 	mov.w	r1, #0
 80028ac:	00d9      	lsls	r1, r3, #3
 80028ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028b2:	00d0      	lsls	r0, r2, #3
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	1911      	adds	r1, r2, r4
 80028ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80028bc:	416b      	adcs	r3, r5
 80028be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c2:	4618      	mov	r0, r3
 80028c4:	f04f 0100 	mov.w	r1, #0
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	008b      	lsls	r3, r1, #2
 80028d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028d6:	0082      	lsls	r2, r0, #2
 80028d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028dc:	f7fd fc80 	bl	80001e0 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4b4a      	ldr	r3, [pc, #296]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 80028e6:	fba3 2302 	umull	r2, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	b29e      	uxth	r6, r3
 80028f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f4:	4618      	mov	r0, r3
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	1894      	adds	r4, r2, r2
 8002900:	60bc      	str	r4, [r7, #8]
 8002902:	415b      	adcs	r3, r3
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800290a:	1812      	adds	r2, r2, r0
 800290c:	eb41 0303 	adc.w	r3, r1, r3
 8002910:	f04f 0400 	mov.w	r4, #0
 8002914:	f04f 0500 	mov.w	r5, #0
 8002918:	00dd      	lsls	r5, r3, #3
 800291a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800291e:	00d4      	lsls	r4, r2, #3
 8002920:	4622      	mov	r2, r4
 8002922:	462b      	mov	r3, r5
 8002924:	1814      	adds	r4, r2, r0
 8002926:	643c      	str	r4, [r7, #64]	; 0x40
 8002928:	414b      	adcs	r3, r1
 800292a:	647b      	str	r3, [r7, #68]	; 0x44
 800292c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800292e:	4618      	mov	r0, r3
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	008b      	lsls	r3, r1, #2
 800293e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002942:	0082      	lsls	r2, r0, #2
 8002944:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002948:	f7fd fc4a 	bl	80001e0 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 8002952:	fba3 1302 	umull	r1, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2164      	movs	r1, #100	; 0x64
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	b29b      	uxth	r3, r3
 800296e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002972:	b29b      	uxth	r3, r3
 8002974:	4433      	add	r3, r6
 8002976:	b29e      	uxth	r6, r3
 8002978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800297a:	4618      	mov	r0, r3
 800297c:	f04f 0100 	mov.w	r1, #0
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	1894      	adds	r4, r2, r2
 8002986:	603c      	str	r4, [r7, #0]
 8002988:	415b      	adcs	r3, r3
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002990:	1812      	adds	r2, r2, r0
 8002992:	eb41 0303 	adc.w	r3, r1, r3
 8002996:	f04f 0400 	mov.w	r4, #0
 800299a:	f04f 0500 	mov.w	r5, #0
 800299e:	00dd      	lsls	r5, r3, #3
 80029a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029a4:	00d4      	lsls	r4, r2, #3
 80029a6:	4622      	mov	r2, r4
 80029a8:	462b      	mov	r3, r5
 80029aa:	1814      	adds	r4, r2, r0
 80029ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80029ae:	414b      	adcs	r3, r1
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029b4:	4618      	mov	r0, r3
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	008b      	lsls	r3, r1, #2
 80029c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029c8:	0082      	lsls	r2, r0, #2
 80029ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80029ce:	f7fd fc07 	bl	80001e0 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 80029d8:	fba3 1302 	umull	r1, r3, r3, r2
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	2164      	movs	r1, #100	; 0x64
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	3332      	adds	r3, #50	; 0x32
 80029ea:	4a09      	ldr	r2, [pc, #36]	; (8002a10 <LL_USART_SetBaudRate+0x31c>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	095b      	lsrs	r3, r3, #5
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4433      	add	r3, r6
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	377c      	adds	r7, #124	; 0x7c
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a0e:	bf00      	nop
 8002a10:	51eb851f 	.word	0x51eb851f

08002a14 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fe2a 	bl	8002680 <LL_USART_IsEnabled>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d15e      	bne.n	8002af0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a3a:	f023 030c 	bic.w	r3, r3, #12
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	6851      	ldr	r1, [r2, #4]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	4311      	orrs	r1, r2
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	6912      	ldr	r2, [r2, #16]
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	6992      	ldr	r2, [r2, #24]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff fe21 	bl	80026a8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fe2e 	bl	80026ce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002a72:	f107 0308 	add.w	r3, r7, #8
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fc64 	bl	8002344 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <LL_USART_Init+0xe8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d102      	bne.n	8002a8a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	e021      	b.n	8002ace <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <LL_USART_Init+0xec>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d102      	bne.n	8002a98 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	e01a      	b.n	8002ace <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <LL_USART_Init+0xf0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d102      	bne.n	8002aa6 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	e013      	b.n	8002ace <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <LL_USART_Init+0xf4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d102      	bne.n	8002ab4 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e00c      	b.n	8002ace <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <LL_USART_Init+0xf8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d102      	bne.n	8002ac2 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e005      	b.n	8002ace <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <LL_USART_Init+0xfc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002adc:	2300      	movs	r3, #0
 8002ade:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fe02 	bl	80026f4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40004400 	.word	0x40004400
 8002b04:	40004800 	.word	0x40004800
 8002b08:	40011400 	.word	0x40011400
 8002b0c:	40004c00 	.word	0x40004c00
 8002b10:	40005000 	.word	0x40005000

08002b14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b26:	2b84      	cmp	r3, #132	; 0x84
 8002b28:	d005      	beq.n	8002b36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	3303      	adds	r3, #3
 8002b34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b48:	f001 f8ec 	bl	8003d24 <vTaskStartScheduler>
  
  return osOK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b54:	b089      	sub	sp, #36	; 0x24
 8002b56:	af04      	add	r7, sp, #16
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <osThreadCreate+0x54>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01c      	beq.n	8002ba6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685c      	ldr	r4, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681d      	ldr	r5, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691e      	ldr	r6, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ffc8 	bl	8002b14 <makeFreeRtosPriority>
 8002b84:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b8e:	9202      	str	r2, [sp, #8]
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	9100      	str	r1, [sp, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4632      	mov	r2, r6
 8002b98:	4629      	mov	r1, r5
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f000 fefa 	bl	8003994 <xTaskCreateStatic>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	e01c      	b.n	8002be0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685c      	ldr	r4, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bb2:	b29e      	uxth	r6, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ffaa 	bl	8002b14 <makeFreeRtosPriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	9200      	str	r2, [sp, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	4632      	mov	r2, r6
 8002bce:	4629      	mov	r1, r5
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f000 ff3c 	bl	8003a4e <xTaskCreate>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d001      	beq.n	8002be0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e000      	b.n	8002be2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002be0:	68fb      	ldr	r3, [r7, #12]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <osDelay+0x16>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	e000      	b.n	8002c02 <osDelay+0x18>
 8002c00:	2301      	movs	r3, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 f85a 	bl	8003cbc <vTaskDelay>
  
  return osOK;
 8002c08:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f103 0208 	add.w	r2, r3, #8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f103 0208 	add.w	r2, r3, #8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f103 0208 	add.w	r2, r3, #8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	601a      	str	r2, [r3, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d103      	bne.n	8002cd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e00c      	b.n	8002cee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	e002      	b.n	8002ce2 <vListInsert+0x2e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d2f6      	bcs.n	8002cdc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6852      	ldr	r2, [r2, #4]
 8002d46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d103      	bne.n	8002d5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	1e5a      	subs	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002da6:	f002 fa7d 	bl	80052a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	68f9      	ldr	r1, [r7, #12]
 8002db4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	441a      	add	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	441a      	add	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	22ff      	movs	r2, #255	; 0xff
 8002df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d114      	bne.n	8002e26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01a      	beq.n	8002e3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3310      	adds	r3, #16
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fa0f 	bl	800422c <xTaskRemoveFromEventList>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <xQueueGenericReset+0xcc>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	e009      	b.n	8002e3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3310      	adds	r3, #16
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fef1 	bl	8002c12 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3324      	adds	r3, #36	; 0x24
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff feec 	bl	8002c12 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e3a:	f002 fa63 	bl	8005304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	e000ed04 	.word	0xe000ed04

08002e4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08e      	sub	sp, #56	; 0x38
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <xQueueGenericCreateStatic+0x52>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <xQueueGenericCreateStatic+0x56>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <xQueueGenericCreateStatic+0x58>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	623b      	str	r3, [r7, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d102      	bne.n	8002eca <xQueueGenericCreateStatic+0x7e>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <xQueueGenericCreateStatic+0x82>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <xQueueGenericCreateStatic+0x84>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	61fb      	str	r3, [r7, #28]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002eea:	2348      	movs	r3, #72	; 0x48
 8002eec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b48      	cmp	r3, #72	; 0x48
 8002ef2:	d00a      	beq.n	8002f0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	61bb      	str	r3, [r7, #24]
}
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f805 	bl	8002f3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3730      	adds	r7, #48	; 0x30
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d103      	bne.n	8002f58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e002      	b.n	8002f5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	69b8      	ldr	r0, [r7, #24]
 8002f6e:	f7ff ff05 	bl	8002d7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08e      	sub	sp, #56	; 0x38
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <xQueueGenericSend+0x32>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <xQueueGenericSend+0x40>
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <xQueueGenericSend+0x44>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <xQueueGenericSend+0x46>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <xQueueGenericSend+0x60>
	__asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d103      	bne.n	8002fea <xQueueGenericSend+0x6e>
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <xQueueGenericSend+0x72>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <xQueueGenericSend+0x74>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <xQueueGenericSend+0x8e>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	623b      	str	r3, [r7, #32]
}
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800300a:	f001 facb 	bl	80045a4 <xTaskGetSchedulerState>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <xQueueGenericSend+0x9e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <xQueueGenericSend+0xa2>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <xQueueGenericSend+0xa4>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xQueueGenericSend+0xbe>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	61fb      	str	r3, [r7, #28]
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800303a:	f002 f933 	bl	80052a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <xQueueGenericSend+0xd4>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d129      	bne.n	80030a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003056:	f000 fb2f 	bl	80036b8 <prvCopyDataToQueue>
 800305a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	3324      	adds	r3, #36	; 0x24
 8003068:	4618      	mov	r0, r3
 800306a:	f001 f8df 	bl	800422c <xTaskRemoveFromEventList>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003074:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <xQueueGenericSend+0x1f8>)
 8003076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	e00a      	b.n	800309c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800308c:	4b39      	ldr	r3, [pc, #228]	; (8003174 <xQueueGenericSend+0x1f8>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800309c:	f002 f932 	bl	8005304 <vPortExitCritical>
				return pdPASS;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e063      	b.n	800316c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030aa:	f002 f92b 	bl	8005304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e05c      	b.n	800316c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 f917 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030c6:	f002 f91d 	bl	8005304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ca:	f000 fe91 	bl	8003df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030ce:	f002 f8e9 	bl	80052a4 <vPortEnterCritical>
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d103      	bne.n	80030e8 <xQueueGenericSend+0x16c>
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d103      	bne.n	80030fe <xQueueGenericSend+0x182>
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030fe:	f002 f901 	bl	8005304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003102:	1d3a      	adds	r2, r7, #4
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f001 f906 	bl	800431c <xTaskCheckForTimeOut>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d124      	bne.n	8003160 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003118:	f000 fbc6 	bl	80038a8 <prvIsQueueFull>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d018      	beq.n	8003154 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	3310      	adds	r3, #16
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f001 f82e 	bl	800418c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003132:	f000 fb51 	bl	80037d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003136:	f000 fe69 	bl	8003e0c <xTaskResumeAll>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	f47f af7c 	bne.w	800303a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <xQueueGenericSend+0x1f8>)
 8003144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	e772      	b.n	800303a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003156:	f000 fb3f 	bl	80037d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800315a:	f000 fe57 	bl	8003e0c <xTaskResumeAll>
 800315e:	e76c      	b.n	800303a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003162:	f000 fb39 	bl	80037d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003166:	f000 fe51 	bl	8003e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800316a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800316c:	4618      	mov	r0, r3
 800316e:	3738      	adds	r7, #56	; 0x38
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b090      	sub	sp, #64	; 0x40
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <xQueueGenericSendFromISR+0x3c>
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <xQueueGenericSendFromISR+0x40>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <xQueueGenericSendFromISR+0x42>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d103      	bne.n	80031e2 <xQueueGenericSendFromISR+0x6a>
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <xQueueGenericSendFromISR+0x6e>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <xQueueGenericSendFromISR+0x70>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10a      	bne.n	8003202 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	623b      	str	r3, [r7, #32]
}
 80031fe:	bf00      	nop
 8003200:	e7fe      	b.n	8003200 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003202:	f002 f931 	bl	8005468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003206:	f3ef 8211 	mrs	r2, BASEPRI
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	61fa      	str	r2, [r7, #28]
 800321c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800321e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <xQueueGenericSendFromISR+0xbc>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d12f      	bne.n	8003294 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800323a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800324a:	f000 fa35 	bl	80036b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800324e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d112      	bne.n	800327e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d016      	beq.n	800328e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	3324      	adds	r3, #36	; 0x24
 8003264:	4618      	mov	r0, r3
 8003266:	f000 ffe1 	bl	800422c <xTaskRemoveFromEventList>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e007      	b.n	800328e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800327e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003282:	3301      	adds	r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	b25a      	sxtb	r2, r3
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800328e:	2301      	movs	r3, #1
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003292:	e001      	b.n	8003298 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003294:	2300      	movs	r3, #0
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3740      	adds	r7, #64	; 0x40
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <xQueueReceive+0x30>
	__asm volatile
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	623b      	str	r3, [r7, #32]
}
 80032dc:	bf00      	nop
 80032de:	e7fe      	b.n	80032de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <xQueueReceive+0x3e>
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <xQueueReceive+0x42>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <xQueueReceive+0x44>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <xQueueReceive+0x5e>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	61fb      	str	r3, [r7, #28]
}
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800330e:	f001 f949 	bl	80045a4 <xTaskGetSchedulerState>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d102      	bne.n	800331e <xQueueReceive+0x6e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <xQueueReceive+0x72>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <xQueueReceive+0x74>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <xQueueReceive+0x8e>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	61bb      	str	r3, [r7, #24]
}
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800333e:	f001 ffb1 	bl	80052a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01f      	beq.n	800338e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003352:	f000 fa1b 	bl	800378c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	1e5a      	subs	r2, r3, #1
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00f      	beq.n	8003386 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003368:	3310      	adds	r3, #16
 800336a:	4618      	mov	r0, r3
 800336c:	f000 ff5e 	bl	800422c <xTaskRemoveFromEventList>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003376:	4b3d      	ldr	r3, [pc, #244]	; (800346c <xQueueReceive+0x1bc>)
 8003378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003386:	f001 ffbd 	bl	8005304 <vPortExitCritical>
				return pdPASS;
 800338a:	2301      	movs	r3, #1
 800338c:	e069      	b.n	8003462 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003394:	f001 ffb6 	bl	8005304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003398:	2300      	movs	r3, #0
 800339a:	e062      	b.n	8003462 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033a2:	f107 0310 	add.w	r3, r7, #16
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 ffa2 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033ac:	2301      	movs	r3, #1
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033b0:	f001 ffa8 	bl	8005304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033b4:	f000 fd1c 	bl	8003df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033b8:	f001 ff74 	bl	80052a4 <vPortEnterCritical>
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033c2:	b25b      	sxtb	r3, r3
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d103      	bne.n	80033d2 <xQueueReceive+0x122>
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d103      	bne.n	80033e8 <xQueueReceive+0x138>
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033e8:	f001 ff8c 	bl	8005304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033ec:	1d3a      	adds	r2, r7, #4
 80033ee:	f107 0310 	add.w	r3, r7, #16
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 ff91 	bl	800431c <xTaskCheckForTimeOut>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d123      	bne.n	8003448 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003402:	f000 fa3b 	bl	800387c <prvIsQueueEmpty>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d017      	beq.n	800343c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	3324      	adds	r3, #36	; 0x24
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f000 feb9 	bl	800418c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800341a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341c:	f000 f9dc 	bl	80037d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003420:	f000 fcf4 	bl	8003e0c <xTaskResumeAll>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d189      	bne.n	800333e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <xQueueReceive+0x1bc>)
 800342c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	e780      	b.n	800333e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800343c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800343e:	f000 f9cb 	bl	80037d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003442:	f000 fce3 	bl	8003e0c <xTaskResumeAll>
 8003446:	e77a      	b.n	800333e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800344a:	f000 f9c5 	bl	80037d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800344e:	f000 fcdd 	bl	8003e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003454:	f000 fa12 	bl	800387c <prvIsQueueEmpty>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f43f af6f 	beq.w	800333e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003462:	4618      	mov	r0, r3
 8003464:	3730      	adds	r7, #48	; 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	e000ed04 	.word	0xe000ed04

08003470 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08e      	sub	sp, #56	; 0x38
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003482:	2300      	movs	r3, #0
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	623b      	str	r3, [r7, #32]
}
 800349e:	bf00      	nop
 80034a0:	e7fe      	b.n	80034a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80034aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	61fb      	str	r3, [r7, #28]
}
 80034bc:	bf00      	nop
 80034be:	e7fe      	b.n	80034be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034c0:	f001 f870 	bl	80045a4 <xTaskGetSchedulerState>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d102      	bne.n	80034d0 <xQueueSemaphoreTake+0x60>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <xQueueSemaphoreTake+0x64>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <xQueueSemaphoreTake+0x66>
 80034d4:	2300      	movs	r3, #0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	61bb      	str	r3, [r7, #24]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034f0:	f001 fed8 	bl	80052a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d024      	beq.n	800354a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	1e5a      	subs	r2, r3, #1
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003510:	f001 f9f0 	bl	80048f4 <pvTaskIncrementMutexHeldCount>
 8003514:	4602      	mov	r2, r0
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00f      	beq.n	8003542 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	3310      	adds	r3, #16
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fe80 	bl	800422c <xTaskRemoveFromEventList>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003532:	4b54      	ldr	r3, [pc, #336]	; (8003684 <xQueueSemaphoreTake+0x214>)
 8003534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003542:	f001 fedf 	bl	8005304 <vPortExitCritical>
				return pdPASS;
 8003546:	2301      	movs	r3, #1
 8003548:	e097      	b.n	800367a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d111      	bne.n	8003574 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	617b      	str	r3, [r7, #20]
}
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800356c:	f001 feca 	bl	8005304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003570:	2300      	movs	r3, #0
 8003572:	e082      	b.n	800367a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800357a:	f107 030c 	add.w	r3, r7, #12
 800357e:	4618      	mov	r0, r3
 8003580:	f000 feb6 	bl	80042f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003584:	2301      	movs	r3, #1
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003588:	f001 febc 	bl	8005304 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800358c:	f000 fc30 	bl	8003df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003590:	f001 fe88 	bl	80052a4 <vPortEnterCritical>
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800359a:	b25b      	sxtb	r3, r3
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d103      	bne.n	80035aa <xQueueSemaphoreTake+0x13a>
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d103      	bne.n	80035c0 <xQueueSemaphoreTake+0x150>
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c0:	f001 fea0 	bl	8005304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035c4:	463a      	mov	r2, r7
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fea5 	bl	800431c <xTaskCheckForTimeOut>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d132      	bne.n	800363e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035da:	f000 f94f 	bl	800387c <prvIsQueueEmpty>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d026      	beq.n	8003632 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80035ec:	f001 fe5a 	bl	80052a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fff3 	bl	80045e0 <xTaskPriorityInherit>
 80035fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80035fc:	f001 fe82 	bl	8005304 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	3324      	adds	r3, #36	; 0x24
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fdbf 	bl	800418c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800360e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003610:	f000 f8e2 	bl	80037d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003614:	f000 fbfa 	bl	8003e0c <xTaskResumeAll>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	f47f af68 	bne.w	80034f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003620:	4b18      	ldr	r3, [pc, #96]	; (8003684 <xQueueSemaphoreTake+0x214>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	e75e      	b.n	80034f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003634:	f000 f8d0 	bl	80037d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003638:	f000 fbe8 	bl	8003e0c <xTaskResumeAll>
 800363c:	e758      	b.n	80034f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800363e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003640:	f000 f8ca 	bl	80037d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003644:	f000 fbe2 	bl	8003e0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800364a:	f000 f917 	bl	800387c <prvIsQueueEmpty>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f43f af4d 	beq.w	80034f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00d      	beq.n	8003678 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800365c:	f001 fe22 	bl	80052a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003662:	f000 f811 	bl	8003688 <prvGetDisinheritPriorityAfterTimeout>
 8003666:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f8b2 	bl	80047d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003674:	f001 fe46 	bl	8005304 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800367a:	4618      	mov	r0, r3
 800367c:	3738      	adds	r7, #56	; 0x38
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d006      	beq.n	80036a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e001      	b.n	80036aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036aa:	68fb      	ldr	r3, [r7, #12]
	}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10d      	bne.n	80036f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d14d      	bne.n	800377a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fff2 	bl	80046cc <xTaskPriorityDisinherit>
 80036e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	e043      	b.n	800377a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d119      	bne.n	800372c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6858      	ldr	r0, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	461a      	mov	r2, r3
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	f002 fe10 	bl	8006328 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	441a      	add	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	429a      	cmp	r2, r3
 8003720:	d32b      	bcc.n	800377a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	e026      	b.n	800377a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68d8      	ldr	r0, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	461a      	mov	r2, r3
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	f002 fdf6 	bl	8006328 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	425b      	negs	r3, r3
 8003746:	441a      	add	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d207      	bcs.n	8003768 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	425b      	negs	r3, r3
 8003762:	441a      	add	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d105      	bne.n	800377a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	3b01      	subs	r3, #1
 8003778:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003782:	697b      	ldr	r3, [r7, #20]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	441a      	add	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d303      	bcc.n	80037c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68d9      	ldr	r1, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	461a      	mov	r2, r3
 80037ca:	6838      	ldr	r0, [r7, #0]
 80037cc:	f002 fdac 	bl	8006328 <memcpy>
	}
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037e0:	f001 fd60 	bl	80052a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ec:	e011      	b.n	8003812 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d012      	beq.n	800381c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3324      	adds	r3, #36	; 0x24
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fd16 	bl	800422c <xTaskRemoveFromEventList>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003806:	f000 fdeb 	bl	80043e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	3b01      	subs	r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	dce9      	bgt.n	80037ee <prvUnlockQueue+0x16>
 800381a:	e000      	b.n	800381e <prvUnlockQueue+0x46>
					break;
 800381c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	22ff      	movs	r2, #255	; 0xff
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003826:	f001 fd6d 	bl	8005304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800382a:	f001 fd3b 	bl	80052a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003834:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003836:	e011      	b.n	800385c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3310      	adds	r3, #16
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fcf1 	bl	800422c <xTaskRemoveFromEventList>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003850:	f000 fdc6 	bl	80043e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003854:	7bbb      	ldrb	r3, [r7, #14]
 8003856:	3b01      	subs	r3, #1
 8003858:	b2db      	uxtb	r3, r3
 800385a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800385c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003860:	2b00      	cmp	r3, #0
 8003862:	dce9      	bgt.n	8003838 <prvUnlockQueue+0x60>
 8003864:	e000      	b.n	8003868 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003866:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	22ff      	movs	r2, #255	; 0xff
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003870:	f001 fd48 	bl	8005304 <vPortExitCritical>
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003884:	f001 fd0e 	bl	80052a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e001      	b.n	800389a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800389a:	f001 fd33 	bl	8005304 <vPortExitCritical>

	return xReturn;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b0:	f001 fcf8 	bl	80052a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	429a      	cmp	r2, r3
 80038be:	d102      	bne.n	80038c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e001      	b.n	80038ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ca:	f001 fd1b 	bl	8005304 <vPortExitCritical>

	return xReturn;
 80038ce:	68fb      	ldr	r3, [r7, #12]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e014      	b.n	8003912 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038e8:	4a0f      	ldr	r2, [pc, #60]	; (8003928 <vQueueAddToRegistry+0x50>)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10b      	bne.n	800390c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038f4:	490c      	ldr	r1, [pc, #48]	; (8003928 <vQueueAddToRegistry+0x50>)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <vQueueAddToRegistry+0x50>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800390a:	e006      	b.n	800391a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3301      	adds	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b07      	cmp	r3, #7
 8003916:	d9e7      	bls.n	80038e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	20004778 	.word	0x20004778

0800392c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800393c:	f001 fcb2 	bl	80052a4 <vPortEnterCritical>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003946:	b25b      	sxtb	r3, r3
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d103      	bne.n	8003956 <vQueueWaitForMessageRestricted+0x2a>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800395c:	b25b      	sxtb	r3, r3
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d103      	bne.n	800396c <vQueueWaitForMessageRestricted+0x40>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800396c:	f001 fcca 	bl	8005304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3324      	adds	r3, #36	; 0x24
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fc27 	bl	80041d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7ff ff26 	bl	80037d8 <prvUnlockQueue>
	}
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08e      	sub	sp, #56	; 0x38
 8003998:	af04      	add	r7, sp, #16
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xTaskCreateStatic+0x2a>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	623b      	str	r3, [r7, #32]
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xTaskCreateStatic+0x46>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	61fb      	str	r3, [r7, #28]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039da:	2354      	movs	r3, #84	; 0x54
 80039dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b54      	cmp	r3, #84	; 0x54
 80039e2:	d00a      	beq.n	80039fa <xTaskCreateStatic+0x66>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61bb      	str	r3, [r7, #24]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01e      	beq.n	8003a40 <xTaskCreateStatic+0xac>
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9303      	str	r3, [sp, #12]
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	f107 0314 	add.w	r3, r7, #20
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f850 	bl	8003ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a3a:	f000 f8d5 	bl	8003be8 <prvAddNewTaskToReadyList>
 8003a3e:	e001      	b.n	8003a44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a44:	697b      	ldr	r3, [r7, #20]
	}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3728      	adds	r7, #40	; 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b08c      	sub	sp, #48	; 0x30
 8003a52:	af04      	add	r7, sp, #16
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 fd40 	bl	80054e8 <pvPortMalloc>
 8003a68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a70:	2054      	movs	r0, #84	; 0x54
 8003a72:	f001 fd39 	bl	80054e8 <pvPortMalloc>
 8003a76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
 8003a84:	e005      	b.n	8003a92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a86:	6978      	ldr	r0, [r7, #20]
 8003a88:	f001 fdfa 	bl	8005680 <vPortFree>
 8003a8c:	e001      	b.n	8003a92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d017      	beq.n	8003ac8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aa0:	88fa      	ldrh	r2, [r7, #6]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9303      	str	r3, [sp, #12]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	9302      	str	r3, [sp, #8]
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f80e 	bl	8003ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003abc:	69f8      	ldr	r0, [r7, #28]
 8003abe:	f000 f893 	bl	8003be8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	e002      	b.n	8003ace <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8003acc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ace:	69bb      	ldr	r3, [r7, #24]
	}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003af0:	3b01      	subs	r3, #1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f023 0307 	bic.w	r3, r3, #7
 8003afe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	617b      	str	r3, [r7, #20]
}
 8003b1c:	bf00      	nop
 8003b1e:	e7fe      	b.n	8003b1e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01f      	beq.n	8003b66 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
 8003b2a:	e012      	b.n	8003b52 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	7819      	ldrb	r1, [r3, #0]
 8003b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3334      	adds	r3, #52	; 0x34
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	4413      	add	r3, r2
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d006      	beq.n	8003b5a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	d9e9      	bls.n	8003b2c <prvInitialiseNewTask+0x54>
 8003b58:	e000      	b.n	8003b5c <prvInitialiseNewTask+0x84>
			{
				break;
 8003b5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b64:	e003      	b.n	8003b6e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	2b06      	cmp	r3, #6
 8003b72:	d901      	bls.n	8003b78 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b74:	2306      	movs	r3, #6
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f85f 	bl	8002c52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b96:	3318      	adds	r3, #24
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff f85a 	bl	8002c52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	f1c3 0207 	rsb	r2, r3, #7
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	69b8      	ldr	r0, [r7, #24]
 8003bc8:	f001 fa40 	bl	800504c <pxPortInitialiseStack>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bde:	bf00      	nop
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bf0:	f001 fb58 	bl	80052a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bf4:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <prvAddNewTaskToReadyList+0xb8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a29      	ldr	r2, [pc, #164]	; (8003ca0 <prvAddNewTaskToReadyList+0xb8>)
 8003bfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <prvAddNewTaskToReadyList+0xbc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c06:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <prvAddNewTaskToReadyList+0xbc>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <prvAddNewTaskToReadyList+0xb8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d110      	bne.n	8003c36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c14:	f000 fc08 	bl	8004428 <prvInitialiseTaskLists>
 8003c18:	e00d      	b.n	8003c36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c1a:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <prvAddNewTaskToReadyList+0xc0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <prvAddNewTaskToReadyList+0xbc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d802      	bhi.n	8003c36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c30:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <prvAddNewTaskToReadyList+0xbc>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c36:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <prvAddNewTaskToReadyList+0xc4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <prvAddNewTaskToReadyList+0xc4>)
 8003c3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	2201      	movs	r2, #1
 8003c46:	409a      	lsls	r2, r3
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <prvAddNewTaskToReadyList+0xc8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <prvAddNewTaskToReadyList+0xc8>)
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <prvAddNewTaskToReadyList+0xcc>)
 8003c60:	441a      	add	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f7fe ffff 	bl	8002c6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c6e:	f001 fb49 	bl	8005304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <prvAddNewTaskToReadyList+0xc0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <prvAddNewTaskToReadyList+0xbc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d207      	bcs.n	8003c98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <prvAddNewTaskToReadyList+0xd0>)
 8003c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200007d4 	.word	0x200007d4
 8003ca4:	200006d4 	.word	0x200006d4
 8003ca8:	200007e0 	.word	0x200007e0
 8003cac:	200007f0 	.word	0x200007f0
 8003cb0:	200007dc 	.word	0x200007dc
 8003cb4:	200006d8 	.word	0x200006d8
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d017      	beq.n	8003cfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <vTaskDelay+0x60>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <vTaskDelay+0x30>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	60bb      	str	r3, [r7, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cec:	f000 f880 	bl	8003df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fe12 	bl	800491c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cf8:	f000 f888 	bl	8003e0c <xTaskResumeAll>
 8003cfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d107      	bne.n	8003d14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <vTaskDelay+0x64>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	200007fc 	.word	0x200007fc
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d32:	463a      	mov	r2, r7
 8003d34:	1d39      	adds	r1, r7, #4
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fc fbcc 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	9202      	str	r2, [sp, #8]
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	460a      	mov	r2, r1
 8003d52:	4921      	ldr	r1, [pc, #132]	; (8003dd8 <vTaskStartScheduler+0xb4>)
 8003d54:	4821      	ldr	r0, [pc, #132]	; (8003ddc <vTaskStartScheduler+0xb8>)
 8003d56:	f7ff fe1d 	bl	8003994 <xTaskCreateStatic>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4a20      	ldr	r2, [pc, #128]	; (8003de0 <vTaskStartScheduler+0xbc>)
 8003d5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <vTaskStartScheduler+0xbc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e001      	b.n	8003d72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d102      	bne.n	8003d7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d78:	f000 fe36 	bl	80049e8 <xTimerCreateTimerTask>
 8003d7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d116      	bne.n	8003db2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	613b      	str	r3, [r7, #16]
}
 8003d96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <vTaskStartScheduler+0xc0>)
 8003d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <vTaskStartScheduler+0xc4>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003da6:	4b11      	ldr	r3, [pc, #68]	; (8003dec <vTaskStartScheduler+0xc8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dac:	f001 f9d8 	bl	8005160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003db0:	e00e      	b.n	8003dd0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d10a      	bne.n	8003dd0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	60fb      	str	r3, [r7, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	e7fe      	b.n	8003dce <vTaskStartScheduler+0xaa>
}
 8003dd0:	bf00      	nop
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	080063e0 	.word	0x080063e0
 8003ddc:	080043f9 	.word	0x080043f9
 8003de0:	200007f8 	.word	0x200007f8
 8003de4:	200007f4 	.word	0x200007f4
 8003de8:	200007e0 	.word	0x200007e0
 8003dec:	200007d8 	.word	0x200007d8

08003df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <vTaskSuspendAll+0x18>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <vTaskSuspendAll+0x18>)
 8003dfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	200007fc 	.word	0x200007fc

08003e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e1a:	4b41      	ldr	r3, [pc, #260]	; (8003f20 <xTaskResumeAll+0x114>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <xTaskResumeAll+0x2c>
	__asm volatile
 8003e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e26:	f383 8811 	msr	BASEPRI, r3
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	603b      	str	r3, [r7, #0]
}
 8003e34:	bf00      	nop
 8003e36:	e7fe      	b.n	8003e36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e38:	f001 fa34 	bl	80052a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e3c:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <xTaskResumeAll+0x114>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4a37      	ldr	r2, [pc, #220]	; (8003f20 <xTaskResumeAll+0x114>)
 8003e44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <xTaskResumeAll+0x114>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d161      	bne.n	8003f12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e4e:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <xTaskResumeAll+0x118>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d05d      	beq.n	8003f12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e56:	e02e      	b.n	8003eb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <xTaskResumeAll+0x11c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3318      	adds	r3, #24
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe ff5e 	bl	8002d26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe ff59 	bl	8002d26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <xTaskResumeAll+0x120>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <xTaskResumeAll+0x120>)
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <xTaskResumeAll+0x124>)
 8003e94:	441a      	add	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f7fe fee5 	bl	8002c6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4b23      	ldr	r3, [pc, #140]	; (8003f34 <xTaskResumeAll+0x128>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <xTaskResumeAll+0x12c>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <xTaskResumeAll+0x11c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1cc      	bne.n	8003e58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ec4:	f000 fb4e 	bl	8004564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ec8:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <xTaskResumeAll+0x130>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ed4:	f000 f846 	bl	8003f64 <xTaskIncrementTick>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <xTaskResumeAll+0x12c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f1      	bne.n	8003ed4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <xTaskResumeAll+0x130>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <xTaskResumeAll+0x12c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f02:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <xTaskResumeAll+0x134>)
 8003f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f12:	f001 f9f7 	bl	8005304 <vPortExitCritical>

	return xAlreadyYielded;
 8003f16:	68bb      	ldr	r3, [r7, #8]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200007fc 	.word	0x200007fc
 8003f24:	200007d4 	.word	0x200007d4
 8003f28:	20000794 	.word	0x20000794
 8003f2c:	200007dc 	.word	0x200007dc
 8003f30:	200006d8 	.word	0x200006d8
 8003f34:	200006d4 	.word	0x200006d4
 8003f38:	200007e8 	.word	0x200007e8
 8003f3c:	200007e4 	.word	0x200007e4
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <xTaskGetTickCount+0x1c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f50:	687b      	ldr	r3, [r7, #4]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	200007d8 	.word	0x200007d8

08003f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f6e:	4b4e      	ldr	r3, [pc, #312]	; (80040a8 <xTaskIncrementTick+0x144>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 808e 	bne.w	8004094 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f78:	4b4c      	ldr	r3, [pc, #304]	; (80040ac <xTaskIncrementTick+0x148>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f80:	4a4a      	ldr	r2, [pc, #296]	; (80040ac <xTaskIncrementTick+0x148>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d120      	bne.n	8003fce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f8c:	4b48      	ldr	r3, [pc, #288]	; (80040b0 <xTaskIncrementTick+0x14c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <xTaskIncrementTick+0x48>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	603b      	str	r3, [r7, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	e7fe      	b.n	8003faa <xTaskIncrementTick+0x46>
 8003fac:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <xTaskIncrementTick+0x14c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	4b40      	ldr	r3, [pc, #256]	; (80040b4 <xTaskIncrementTick+0x150>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a3e      	ldr	r2, [pc, #248]	; (80040b0 <xTaskIncrementTick+0x14c>)
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4a3e      	ldr	r2, [pc, #248]	; (80040b4 <xTaskIncrementTick+0x150>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b3d      	ldr	r3, [pc, #244]	; (80040b8 <xTaskIncrementTick+0x154>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <xTaskIncrementTick+0x154>)
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	f000 facb 	bl	8004564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fce:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <xTaskIncrementTick+0x158>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d348      	bcc.n	800406a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd8:	4b35      	ldr	r3, [pc, #212]	; (80040b0 <xTaskIncrementTick+0x14c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe2:	4b36      	ldr	r3, [pc, #216]	; (80040bc <xTaskIncrementTick+0x158>)
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	601a      	str	r2, [r3, #0]
					break;
 8003fea:	e03e      	b.n	800406a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fec:	4b30      	ldr	r3, [pc, #192]	; (80040b0 <xTaskIncrementTick+0x14c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d203      	bcs.n	800400c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004004:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <xTaskIncrementTick+0x158>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800400a:	e02e      	b.n	800406a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3304      	adds	r3, #4
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fe88 	bl	8002d26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3318      	adds	r3, #24
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fe7f 	bl	8002d26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	2201      	movs	r2, #1
 800402e:	409a      	lsls	r2, r3
 8004030:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <xTaskIncrementTick+0x15c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4313      	orrs	r3, r2
 8004036:	4a22      	ldr	r2, [pc, #136]	; (80040c0 <xTaskIncrementTick+0x15c>)
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <xTaskIncrementTick+0x160>)
 8004048:	441a      	add	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7fe fe0b 	bl	8002c6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <xTaskIncrementTick+0x164>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	429a      	cmp	r2, r3
 8004062:	d3b9      	bcc.n	8003fd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004068:	e7b6      	b.n	8003fd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800406a:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <xTaskIncrementTick+0x164>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	4914      	ldr	r1, [pc, #80]	; (80040c4 <xTaskIncrementTick+0x160>)
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d901      	bls.n	8004086 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004082:	2301      	movs	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <xTaskIncrementTick+0x168>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800408e:	2301      	movs	r3, #1
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e004      	b.n	800409e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <xTaskIncrementTick+0x16c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <xTaskIncrementTick+0x16c>)
 800409c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200007fc 	.word	0x200007fc
 80040ac:	200007d8 	.word	0x200007d8
 80040b0:	2000078c 	.word	0x2000078c
 80040b4:	20000790 	.word	0x20000790
 80040b8:	200007ec 	.word	0x200007ec
 80040bc:	200007f4 	.word	0x200007f4
 80040c0:	200007dc 	.word	0x200007dc
 80040c4:	200006d8 	.word	0x200006d8
 80040c8:	200006d4 	.word	0x200006d4
 80040cc:	200007e8 	.word	0x200007e8
 80040d0:	200007e4 	.word	0x200007e4

080040d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040da:	4b27      	ldr	r3, [pc, #156]	; (8004178 <vTaskSwitchContext+0xa4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <vTaskSwitchContext+0xa8>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040e8:	e03f      	b.n	800416a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <vTaskSwitchContext+0xa8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <vTaskSwitchContext+0xac>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	f1c3 031f 	rsb	r3, r3, #31
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	491f      	ldr	r1, [pc, #124]	; (8004184 <vTaskSwitchContext+0xb0>)
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <vTaskSwitchContext+0x5c>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	607b      	str	r3, [r7, #4]
}
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <vTaskSwitchContext+0x5a>
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <vTaskSwitchContext+0xb0>)
 800413c:	4413      	add	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	3308      	adds	r3, #8
 8004152:	429a      	cmp	r2, r3
 8004154:	d104      	bne.n	8004160 <vTaskSwitchContext+0x8c>
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4a08      	ldr	r2, [pc, #32]	; (8004188 <vTaskSwitchContext+0xb4>)
 8004168:	6013      	str	r3, [r2, #0]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	200007fc 	.word	0x200007fc
 800417c:	200007e8 	.word	0x200007e8
 8004180:	200007dc 	.word	0x200007dc
 8004184:	200006d8 	.word	0x200006d8
 8004188:	200006d4 	.word	0x200006d4

0800418c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	60fb      	str	r3, [r7, #12]
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <vTaskPlaceOnEventList+0x44>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3318      	adds	r3, #24
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fe fd7a 	bl	8002cb4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041c0:	2101      	movs	r1, #1
 80041c2:	6838      	ldr	r0, [r7, #0]
 80041c4:	f000 fbaa 	bl	800491c <prvAddCurrentTaskToDelayedList>
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	200006d4 	.word	0x200006d4

080041d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	617b      	str	r3, [r7, #20]
}
 80041f8:	bf00      	nop
 80041fa:	e7fe      	b.n	80041fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <vTaskPlaceOnEventListRestricted+0x54>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3318      	adds	r3, #24
 8004202:	4619      	mov	r1, r3
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7fe fd31 	bl	8002c6c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
 8004214:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	68b8      	ldr	r0, [r7, #8]
 800421a:	f000 fb7f 	bl	800491c <prvAddCurrentTaskToDelayedList>
	}
 800421e:	bf00      	nop
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200006d4 	.word	0x200006d4

0800422c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	60fb      	str	r3, [r7, #12]
}
 8004254:	bf00      	nop
 8004256:	e7fe      	b.n	8004256 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	3318      	adds	r3, #24
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fd62 	bl	8002d26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <xTaskRemoveFromEventList+0xac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d11c      	bne.n	80042a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	3304      	adds	r3, #4
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fd59 	bl	8002d26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	2201      	movs	r2, #1
 800427a:	409a      	lsls	r2, r3
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <xTaskRemoveFromEventList+0xb0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4313      	orrs	r3, r2
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <xTaskRemoveFromEventList+0xb0>)
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <xTaskRemoveFromEventList+0xb4>)
 8004294:	441a      	add	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fe fce5 	bl	8002c6c <vListInsertEnd>
 80042a2:	e005      	b.n	80042b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	3318      	adds	r3, #24
 80042a8:	4619      	mov	r1, r3
 80042aa:	480e      	ldr	r0, [pc, #56]	; (80042e4 <xTaskRemoveFromEventList+0xb8>)
 80042ac:	f7fe fcde 	bl	8002c6c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <xTaskRemoveFromEventList+0xbc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d905      	bls.n	80042ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <xTaskRemoveFromEventList+0xc0>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	e001      	b.n	80042ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042ce:	697b      	ldr	r3, [r7, #20]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	200007fc 	.word	0x200007fc
 80042dc:	200007dc 	.word	0x200007dc
 80042e0:	200006d8 	.word	0x200006d8
 80042e4:	20000794 	.word	0x20000794
 80042e8:	200006d4 	.word	0x200006d4
 80042ec:	200007e8 	.word	0x200007e8

080042f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <vTaskInternalSetTimeOutState+0x24>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <vTaskInternalSetTimeOutState+0x28>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	605a      	str	r2, [r3, #4]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	200007ec 	.word	0x200007ec
 8004318:	200007d8 	.word	0x200007d8

0800431c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	613b      	str	r3, [r7, #16]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	60fb      	str	r3, [r7, #12]
}
 800435a:	bf00      	nop
 800435c:	e7fe      	b.n	800435c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800435e:	f000 ffa1 	bl	80052a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <xTaskCheckForTimeOut+0xbc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d102      	bne.n	8004382 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e023      	b.n	80043ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <xTaskCheckForTimeOut+0xc0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d007      	beq.n	800439e <xTaskCheckForTimeOut+0x82>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e015      	b.n	80043ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d20b      	bcs.n	80043c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff ff9b 	bl	80042f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e004      	b.n	80043ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043ca:	f000 ff9b 	bl	8005304 <vPortExitCritical>

	return xReturn;
 80043ce:	69fb      	ldr	r3, [r7, #28]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200007d8 	.word	0x200007d8
 80043dc:	200007ec 	.word	0x200007ec

080043e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <vTaskMissedYield+0x14>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	200007e8 	.word	0x200007e8

080043f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004400:	f000 f852 	bl	80044a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <prvIdleTask+0x28>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d9f9      	bls.n	8004400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <prvIdleTask+0x2c>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800441c:	e7f0      	b.n	8004400 <prvIdleTask+0x8>
 800441e:	bf00      	nop
 8004420:	200006d8 	.word	0x200006d8
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	e00c      	b.n	800444e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4a12      	ldr	r2, [pc, #72]	; (8004488 <prvInitialiseTaskLists+0x60>)
 8004440:	4413      	add	r3, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe fbe5 	bl	8002c12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3301      	adds	r3, #1
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d9ef      	bls.n	8004434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004454:	480d      	ldr	r0, [pc, #52]	; (800448c <prvInitialiseTaskLists+0x64>)
 8004456:	f7fe fbdc 	bl	8002c12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800445a:	480d      	ldr	r0, [pc, #52]	; (8004490 <prvInitialiseTaskLists+0x68>)
 800445c:	f7fe fbd9 	bl	8002c12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004460:	480c      	ldr	r0, [pc, #48]	; (8004494 <prvInitialiseTaskLists+0x6c>)
 8004462:	f7fe fbd6 	bl	8002c12 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004466:	480c      	ldr	r0, [pc, #48]	; (8004498 <prvInitialiseTaskLists+0x70>)
 8004468:	f7fe fbd3 	bl	8002c12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800446c:	480b      	ldr	r0, [pc, #44]	; (800449c <prvInitialiseTaskLists+0x74>)
 800446e:	f7fe fbd0 	bl	8002c12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <prvInitialiseTaskLists+0x78>)
 8004474:	4a05      	ldr	r2, [pc, #20]	; (800448c <prvInitialiseTaskLists+0x64>)
 8004476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <prvInitialiseTaskLists+0x7c>)
 800447a:	4a05      	ldr	r2, [pc, #20]	; (8004490 <prvInitialiseTaskLists+0x68>)
 800447c:	601a      	str	r2, [r3, #0]
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200006d8 	.word	0x200006d8
 800448c:	20000764 	.word	0x20000764
 8004490:	20000778 	.word	0x20000778
 8004494:	20000794 	.word	0x20000794
 8004498:	200007a8 	.word	0x200007a8
 800449c:	200007c0 	.word	0x200007c0
 80044a0:	2000078c 	.word	0x2000078c
 80044a4:	20000790 	.word	0x20000790

080044a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ae:	e019      	b.n	80044e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044b0:	f000 fef8 	bl	80052a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <prvCheckTasksWaitingTermination+0x50>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fc30 	bl	8002d26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <prvCheckTasksWaitingTermination+0x54>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	4a0b      	ldr	r2, [pc, #44]	; (80044fc <prvCheckTasksWaitingTermination+0x54>)
 80044ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044da:	f000 ff13 	bl	8005304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f810 	bl	8004504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <prvCheckTasksWaitingTermination+0x58>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e1      	bne.n	80044b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200007a8 	.word	0x200007a8
 80044fc:	200007d4 	.word	0x200007d4
 8004500:	200007bc 	.word	0x200007bc

08004504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004512:	2b00      	cmp	r3, #0
 8004514:	d108      	bne.n	8004528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f8b0 	bl	8005680 <vPortFree>
				vPortFree( pxTCB );
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 f8ad 	bl	8005680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004526:	e018      	b.n	800455a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452e:	2b01      	cmp	r3, #1
 8004530:	d103      	bne.n	800453a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 f8a4 	bl	8005680 <vPortFree>
	}
 8004538:	e00f      	b.n	800455a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004540:	2b02      	cmp	r3, #2
 8004542:	d00a      	beq.n	800455a <prvDeleteTCB+0x56>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <prvDeleteTCB+0x54>
	}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800456a:	4b0c      	ldr	r3, [pc, #48]	; (800459c <prvResetNextTaskUnblockTime+0x38>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004576:	f04f 32ff 	mov.w	r2, #4294967295
 800457a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800457c:	e008      	b.n	8004590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800457e:	4b07      	ldr	r3, [pc, #28]	; (800459c <prvResetNextTaskUnblockTime+0x38>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <prvResetNextTaskUnblockTime+0x3c>)
 800458e:	6013      	str	r3, [r2, #0]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	2000078c 	.word	0x2000078c
 80045a0:	200007f4 	.word	0x200007f4

080045a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <xTaskGetSchedulerState+0x34>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045b2:	2301      	movs	r3, #1
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	e008      	b.n	80045ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <xTaskGetSchedulerState+0x38>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045c0:	2302      	movs	r3, #2
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	e001      	b.n	80045ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045ca:	687b      	ldr	r3, [r7, #4]
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	200007e0 	.word	0x200007e0
 80045dc:	200007fc 	.word	0x200007fc

080045e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d05e      	beq.n	80046b4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <xTaskPriorityInherit+0xe0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	429a      	cmp	r2, r3
 8004602:	d24e      	bcs.n	80046a2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	db06      	blt.n	800461a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800460c:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <xTaskPriorityInherit+0xe0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	f1c3 0207 	rsb	r2, r3, #7
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	6959      	ldr	r1, [r3, #20]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4a26      	ldr	r2, [pc, #152]	; (80046c4 <xTaskPriorityInherit+0xe4>)
 800462c:	4413      	add	r3, r2
 800462e:	4299      	cmp	r1, r3
 8004630:	d12f      	bne.n	8004692 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	3304      	adds	r3, #4
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fb75 	bl	8002d26 <uxListRemove>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	2201      	movs	r2, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43da      	mvns	r2, r3
 800464e:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <xTaskPriorityInherit+0xe8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4013      	ands	r3, r2
 8004654:	4a1c      	ldr	r2, [pc, #112]	; (80046c8 <xTaskPriorityInherit+0xe8>)
 8004656:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <xTaskPriorityInherit+0xe0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	2201      	movs	r2, #1
 8004668:	409a      	lsls	r2, r3
 800466a:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <xTaskPriorityInherit+0xe8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4313      	orrs	r3, r2
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <xTaskPriorityInherit+0xe8>)
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <xTaskPriorityInherit+0xe4>)
 8004682:	441a      	add	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f7fe faee 	bl	8002c6c <vListInsertEnd>
 8004690:	e004      	b.n	800469c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <xTaskPriorityInherit+0xe0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e008      	b.n	80046b4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <xTaskPriorityInherit+0xe0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d201      	bcs.n	80046b4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80046b0:	2301      	movs	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046b4:	68fb      	ldr	r3, [r7, #12]
	}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200006d4 	.word	0x200006d4
 80046c4:	200006d8 	.word	0x200006d8
 80046c8:	200007dc 	.word	0x200007dc

080046cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d06e      	beq.n	80047c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046e2:	4b3a      	ldr	r3, [pc, #232]	; (80047cc <xTaskPriorityDisinherit+0x100>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d00a      	beq.n	8004702 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	60fb      	str	r3, [r7, #12]
}
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	60bb      	str	r3, [r7, #8]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004724:	1e5a      	subs	r2, r3, #1
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	429a      	cmp	r2, r3
 8004734:	d044      	beq.n	80047c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473a:	2b00      	cmp	r3, #0
 800473c:	d140      	bne.n	80047c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3304      	adds	r3, #4
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe faef 	bl	8002d26 <uxListRemove>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d115      	bne.n	800477a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004752:	491f      	ldr	r1, [pc, #124]	; (80047d0 <xTaskPriorityDisinherit+0x104>)
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <xTaskPriorityDisinherit+0xae>
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	2201      	movs	r2, #1
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43da      	mvns	r2, r3
 8004770:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <xTaskPriorityDisinherit+0x108>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4013      	ands	r3, r2
 8004776:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <xTaskPriorityDisinherit+0x108>)
 8004778:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	f1c3 0207 	rsb	r2, r3, #7
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	2201      	movs	r2, #1
 8004794:	409a      	lsls	r2, r3
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <xTaskPriorityDisinherit+0x108>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4313      	orrs	r3, r2
 800479c:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <xTaskPriorityDisinherit+0x108>)
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <xTaskPriorityDisinherit+0x104>)
 80047ae:	441a      	add	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f7fe fa58 	bl	8002c6c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047bc:	2301      	movs	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047c0:	697b      	ldr	r3, [r7, #20]
	}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200006d4 	.word	0x200006d4
 80047d0:	200006d8 	.word	0x200006d8
 80047d4:	200007dc 	.word	0x200007dc

080047d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80047e6:	2301      	movs	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d077      	beq.n	80048e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	60fb      	str	r3, [r7, #12]
}
 800480a:	bf00      	nop
 800480c:	e7fe      	b.n	800480c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d902      	bls.n	800481e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e002      	b.n	8004824 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	429a      	cmp	r2, r3
 800482c:	d058      	beq.n	80048e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	d153      	bne.n	80048e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004838:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	429a      	cmp	r2, r3
 8004840:	d10a      	bne.n	8004858 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60bb      	str	r3, [r7, #8]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	db04      	blt.n	8004876 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f1c3 0207 	rsb	r2, r3, #7
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	6959      	ldr	r1, [r3, #20]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4a19      	ldr	r2, [pc, #100]	; (80048ec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004886:	4413      	add	r3, r2
 8004888:	4299      	cmp	r1, r3
 800488a:	d129      	bne.n	80048e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fa48 	bl	8002d26 <uxListRemove>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	2201      	movs	r2, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4013      	ands	r3, r2
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	2201      	movs	r2, #1
 80048b8:	409a      	lsls	r2, r3
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	4a0b      	ldr	r2, [pc, #44]	; (80048f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4a06      	ldr	r2, [pc, #24]	; (80048ec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80048d2:	441a      	add	r2, r3
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f7fe f9c6 	bl	8002c6c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048e0:	bf00      	nop
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	200006d4 	.word	0x200006d4
 80048ec:	200006d8 	.word	0x200006d8
 80048f0:	200007dc 	.word	0x200007dc

080048f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <pvTaskIncrementMutexHeldCount+0x24>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <pvTaskIncrementMutexHeldCount+0x24>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004906:	3201      	adds	r2, #1
 8004908:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800490a:	4b03      	ldr	r3, [pc, #12]	; (8004918 <pvTaskIncrementMutexHeldCount+0x24>)
 800490c:	681b      	ldr	r3, [r3, #0]
	}
 800490e:	4618      	mov	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	200006d4 	.word	0x200006d4

0800491c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004926:	4b29      	ldr	r3, [pc, #164]	; (80049cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800492c:	4b28      	ldr	r3, [pc, #160]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3304      	adds	r3, #4
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe f9f7 	bl	8002d26 <uxListRemove>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	2201      	movs	r2, #1
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43da      	mvns	r2, r3
 800494c:	4b21      	ldr	r3, [pc, #132]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4013      	ands	r3, r2
 8004952:	4a20      	ldr	r2, [pc, #128]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004954:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d10a      	bne.n	8004974 <prvAddCurrentTaskToDelayedList+0x58>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004964:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	481a      	ldr	r0, [pc, #104]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800496e:	f7fe f97d 	bl	8002c6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004972:	e026      	b.n	80049c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800497c:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d209      	bcs.n	80049a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800498c:	4b13      	ldr	r3, [pc, #76]	; (80049dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3304      	adds	r3, #4
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f7fe f98b 	bl	8002cb4 <vListInsert>
}
 800499e:	e010      	b.n	80049c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7fe f981 	bl	8002cb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049b2:	4b0c      	ldr	r3, [pc, #48]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d202      	bcs.n	80049c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049bc:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6013      	str	r3, [r2, #0]
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200007d8 	.word	0x200007d8
 80049d0:	200006d4 	.word	0x200006d4
 80049d4:	200007dc 	.word	0x200007dc
 80049d8:	200007c0 	.word	0x200007c0
 80049dc:	20000790 	.word	0x20000790
 80049e0:	2000078c 	.word	0x2000078c
 80049e4:	200007f4 	.word	0x200007f4

080049e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049f2:	f000 faeb 	bl	8004fcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049f6:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <xTimerCreateTimerTask+0x80>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d021      	beq.n	8004a42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a06:	1d3a      	adds	r2, r7, #4
 8004a08:	f107 0108 	add.w	r1, r7, #8
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fb fd7b 	bl	800050c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	9202      	str	r2, [sp, #8]
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	2302      	movs	r3, #2
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	460a      	mov	r2, r1
 8004a28:	4910      	ldr	r1, [pc, #64]	; (8004a6c <xTimerCreateTimerTask+0x84>)
 8004a2a:	4811      	ldr	r0, [pc, #68]	; (8004a70 <xTimerCreateTimerTask+0x88>)
 8004a2c:	f7fe ffb2 	bl	8003994 <xTaskCreateStatic>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <xTimerCreateTimerTask+0x8c>)
 8004a34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <xTimerCreateTimerTask+0x8c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	613b      	str	r3, [r7, #16]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a5e:	697b      	ldr	r3, [r7, #20]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000830 	.word	0x20000830
 8004a6c:	080063e8 	.word	0x080063e8
 8004a70:	08004bad 	.word	0x08004bad
 8004a74:	20000834 	.word	0x20000834

08004a78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	623b      	str	r3, [r7, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <xTimerGenericCommand+0x98>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02a      	beq.n	8004b04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	dc18      	bgt.n	8004af2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ac0:	f7ff fd70 	bl	80045a4 <xTaskGetSchedulerState>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d109      	bne.n	8004ade <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <xTimerGenericCommand+0x98>)
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	f107 0114 	add.w	r1, r7, #20
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	f7fe fa51 	bl	8002f7c <xQueueGenericSend>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24
 8004adc:	e012      	b.n	8004b04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <xTimerGenericCommand+0x98>)
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	f107 0114 	add.w	r1, r7, #20
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f7fe fa47 	bl	8002f7c <xQueueGenericSend>
 8004aee:	6278      	str	r0, [r7, #36]	; 0x24
 8004af0:	e008      	b.n	8004b04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004af2:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <xTimerGenericCommand+0x98>)
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	f107 0114 	add.w	r1, r7, #20
 8004afa:	2300      	movs	r3, #0
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	f7fe fb3b 	bl	8003178 <xQueueGenericSendFromISR>
 8004b02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000830 	.word	0x20000830

08004b14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <prvProcessExpiredTimer+0x94>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe f8fa 	bl	8002d26 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d022      	beq.n	8004b86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	18d1      	adds	r1, r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6978      	ldr	r0, [r7, #20]
 8004b4e:	f000 f8d1 	bl	8004cf4 <prvInsertTimerInActiveList>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01f      	beq.n	8004b98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	2100      	movs	r1, #0
 8004b62:	6978      	ldr	r0, [r7, #20]
 8004b64:	f7ff ff88 	bl	8004a78 <xTimerGenericCommand>
 8004b68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d113      	bne.n	8004b98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	4798      	blx	r3
}
 8004ba0:	bf00      	nop
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000828 	.word	0x20000828

08004bac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb4:	f107 0308 	add.w	r3, r7, #8
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 f857 	bl	8004c6c <prvGetNextExpireTime>
 8004bbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f803 	bl	8004bd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bca:	f000 f8d5 	bl	8004d78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bce:	e7f1      	b.n	8004bb4 <prvTimerTask+0x8>

08004bd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bda:	f7ff f909 	bl	8003df0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bde:	f107 0308 	add.w	r3, r7, #8
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f866 	bl	8004cb4 <prvSampleTimeNow>
 8004be8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d130      	bne.n	8004c52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <prvProcessTimerOrBlockTask+0x3c>
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d806      	bhi.n	8004c0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bfe:	f7ff f905 	bl	8003e0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff ff85 	bl	8004b14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c0a:	e024      	b.n	8004c56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <prvProcessTimerOrBlockTask+0x90>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <prvProcessTimerOrBlockTask+0x50>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <prvProcessTimerOrBlockTask+0x52>
 8004c20:	2300      	movs	r3, #0
 8004c22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <prvProcessTimerOrBlockTask+0x94>)
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	4619      	mov	r1, r3
 8004c32:	f7fe fe7b 	bl	800392c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c36:	f7ff f8e9 	bl	8003e0c <xTaskResumeAll>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <prvProcessTimerOrBlockTask+0x98>)
 8004c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
}
 8004c50:	e001      	b.n	8004c56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c52:	f7ff f8db 	bl	8003e0c <xTaskResumeAll>
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	2000082c 	.word	0x2000082c
 8004c64:	20000830 	.word	0x20000830
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <prvGetNextExpireTime+0x44>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <prvGetNextExpireTime+0x16>
 8004c7e:	2201      	movs	r2, #1
 8004c80:	e000      	b.n	8004c84 <prvGetNextExpireTime+0x18>
 8004c82:	2200      	movs	r2, #0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <prvGetNextExpireTime+0x44>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e001      	b.n	8004ca0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000828 	.word	0x20000828

08004cb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cbc:	f7ff f942 	bl	8003f44 <xTaskGetTickCount>
 8004cc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <prvSampleTimeNow+0x3c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d205      	bcs.n	8004cd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ccc:	f000 f91a 	bl	8004f04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cde:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <prvSampleTimeNow+0x3c>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000838 	.word	0x20000838

08004cf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d812      	bhi.n	8004d40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d302      	bcc.n	8004d2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	e01b      	b.n	8004d66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <prvInsertTimerInActiveList+0x7c>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7fd ffbb 	bl	8002cb4 <vListInsert>
 8004d3e:	e012      	b.n	8004d66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d206      	bcs.n	8004d56 <prvInsertTimerInActiveList+0x62>
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d302      	bcc.n	8004d56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e007      	b.n	8004d66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <prvInsertTimerInActiveList+0x80>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fd ffa7 	bl	8002cb4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d66:	697b      	ldr	r3, [r7, #20]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	2000082c 	.word	0x2000082c
 8004d74:	20000828 	.word	0x20000828

08004d78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	; 0x30
 8004d7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d7e:	e0ae      	b.n	8004ede <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f2c0 80aa 	blt.w	8004edc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	3304      	adds	r3, #4
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fd ffc4 	bl	8002d26 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff ff87 	bl	8004cb4 <prvSampleTimeNow>
 8004da6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b09      	cmp	r3, #9
 8004dac:	f200 8097 	bhi.w	8004ede <prvProcessReceivedCommands+0x166>
 8004db0:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <prvProcessReceivedCommands+0x40>)
 8004db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db6:	bf00      	nop
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004de1 	.word	0x08004de1
 8004dc4:	08004e55 	.word	0x08004e55
 8004dc8:	08004e69 	.word	0x08004e69
 8004dcc:	08004eb3 	.word	0x08004eb3
 8004dd0:	08004de1 	.word	0x08004de1
 8004dd4:	08004de1 	.word	0x08004de1
 8004dd8:	08004e55 	.word	0x08004e55
 8004ddc:	08004e69 	.word	0x08004e69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	18d1      	adds	r1, r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e00:	f7ff ff78 	bl	8004cf4 <prvInsertTimerInActiveList>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d069      	beq.n	8004ede <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05e      	beq.n	8004ede <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	441a      	add	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	2100      	movs	r1, #0
 8004e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e32:	f7ff fe21 	bl	8004a78 <xTimerGenericCommand>
 8004e36:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d14f      	bne.n	8004ede <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	61bb      	str	r3, [r7, #24]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004e66:	e03a      	b.n	8004ede <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	617b      	str	r3, [r7, #20]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	18d1      	adds	r1, r2, r3
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eac:	f7ff ff22 	bl	8004cf4 <prvInsertTimerInActiveList>
					break;
 8004eb0:	e015      	b.n	8004ede <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ec2:	f000 fbdd 	bl	8005680 <vPortFree>
 8004ec6:	e00a      	b.n	8004ede <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004eda:	e000      	b.n	8004ede <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004edc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <prvProcessReceivedCommands+0x188>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f107 0108 	add.w	r1, r7, #8
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe f9e1 	bl	80032b0 <xQueueReceive>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f47f af45 	bne.w	8004d80 <prvProcessReceivedCommands+0x8>
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	bf00      	nop
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000830 	.word	0x20000830

08004f04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f0a:	e048      	b.n	8004f9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f0c:	4b2d      	ldr	r3, [pc, #180]	; (8004fc4 <prvSwitchTimerLists+0xc0>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <prvSwitchTimerLists+0xc0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fd fefe 	bl	8002d26 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d02e      	beq.n	8004f9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90e      	bls.n	8004f70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f5e:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <prvSwitchTimerLists+0xc0>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7fd fea3 	bl	8002cb4 <vListInsert>
 8004f6e:	e016      	b.n	8004f9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f70:	2300      	movs	r3, #0
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	2100      	movs	r1, #0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff fd7c 	bl	8004a78 <xTimerGenericCommand>
 8004f80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	603b      	str	r3, [r7, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f9e:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <prvSwitchTimerLists+0xc0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1b1      	bne.n	8004f0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <prvSwitchTimerLists+0xc0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <prvSwitchTimerLists+0xc4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <prvSwitchTimerLists+0xc0>)
 8004fb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fb6:	4a04      	ldr	r2, [pc, #16]	; (8004fc8 <prvSwitchTimerLists+0xc4>)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	6013      	str	r3, [r2, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000828 	.word	0x20000828
 8004fc8:	2000082c 	.word	0x2000082c

08004fcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fd2:	f000 f967 	bl	80052a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fd6:	4b15      	ldr	r3, [pc, #84]	; (800502c <prvCheckForValidListAndQueue+0x60>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d120      	bne.n	8005020 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fde:	4814      	ldr	r0, [pc, #80]	; (8005030 <prvCheckForValidListAndQueue+0x64>)
 8004fe0:	f7fd fe17 	bl	8002c12 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fe4:	4813      	ldr	r0, [pc, #76]	; (8005034 <prvCheckForValidListAndQueue+0x68>)
 8004fe6:	f7fd fe14 	bl	8002c12 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <prvCheckForValidListAndQueue+0x6c>)
 8004fec:	4a10      	ldr	r2, [pc, #64]	; (8005030 <prvCheckForValidListAndQueue+0x64>)
 8004fee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ff0:	4b12      	ldr	r3, [pc, #72]	; (800503c <prvCheckForValidListAndQueue+0x70>)
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <prvCheckForValidListAndQueue+0x68>)
 8004ff4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	4b11      	ldr	r3, [pc, #68]	; (8005040 <prvCheckForValidListAndQueue+0x74>)
 8004ffc:	4a11      	ldr	r2, [pc, #68]	; (8005044 <prvCheckForValidListAndQueue+0x78>)
 8004ffe:	210c      	movs	r1, #12
 8005000:	200a      	movs	r0, #10
 8005002:	f7fd ff23 	bl	8002e4c <xQueueGenericCreateStatic>
 8005006:	4603      	mov	r3, r0
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <prvCheckForValidListAndQueue+0x60>)
 800500a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <prvCheckForValidListAndQueue+0x60>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005014:	4b05      	ldr	r3, [pc, #20]	; (800502c <prvCheckForValidListAndQueue+0x60>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	490b      	ldr	r1, [pc, #44]	; (8005048 <prvCheckForValidListAndQueue+0x7c>)
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fc5c 	bl	80038d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005020:	f000 f970 	bl	8005304 <vPortExitCritical>
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000830 	.word	0x20000830
 8005030:	20000800 	.word	0x20000800
 8005034:	20000814 	.word	0x20000814
 8005038:	20000828 	.word	0x20000828
 800503c:	2000082c 	.word	0x2000082c
 8005040:	200008b4 	.word	0x200008b4
 8005044:	2000083c 	.word	0x2000083c
 8005048:	080063f0 	.word	0x080063f0

0800504c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3b04      	subs	r3, #4
 800505c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b04      	subs	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3b04      	subs	r3, #4
 800507a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800507c:	4a0c      	ldr	r2, [pc, #48]	; (80050b0 <pxPortInitialiseStack+0x64>)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3b14      	subs	r3, #20
 8005086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3b04      	subs	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f06f 0202 	mvn.w	r2, #2
 800509a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3b20      	subs	r3, #32
 80050a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	080050b5 	.word	0x080050b5

080050b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <prvTaskExitError+0x54>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d00a      	beq.n	80050de <prvTaskExitError+0x2a>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	60fb      	str	r3, [r7, #12]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <prvTaskExitError+0x28>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60bb      	str	r3, [r7, #8]
}
 80050f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050f2:	bf00      	nop
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0fc      	beq.n	80050f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050fa:	bf00      	nop
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	2000000c 	.word	0x2000000c
 800510c:	00000000 	.word	0x00000000

08005110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <pxCurrentTCBConst2>)
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	6808      	ldr	r0, [r1, #0]
 8005116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	f380 8809 	msr	PSP, r0
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	4770      	bx	lr
 800512c:	f3af 8000 	nop.w

08005130 <pxCurrentTCBConst2>:
 8005130:	200006d4 	.word	0x200006d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop

08005138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005138:	4808      	ldr	r0, [pc, #32]	; (800515c <prvPortStartFirstTask+0x24>)
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f380 8808 	msr	MSP, r0
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8814 	msr	CONTROL, r0
 800514a:	b662      	cpsie	i
 800514c:	b661      	cpsie	f
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	df00      	svc	0
 8005158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800515a:	bf00      	nop
 800515c:	e000ed08 	.word	0xe000ed08

08005160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005166:	4b46      	ldr	r3, [pc, #280]	; (8005280 <xPortStartScheduler+0x120>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a46      	ldr	r2, [pc, #280]	; (8005284 <xPortStartScheduler+0x124>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10a      	bne.n	8005186 <xPortStartScheduler+0x26>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	613b      	str	r3, [r7, #16]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005186:	4b3e      	ldr	r3, [pc, #248]	; (8005280 <xPortStartScheduler+0x120>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a3f      	ldr	r2, [pc, #252]	; (8005288 <xPortStartScheduler+0x128>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10a      	bne.n	80051a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	60fb      	str	r3, [r7, #12]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <xPortStartScheduler+0x12c>)
 80051a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	22ff      	movs	r2, #255	; 0xff
 80051b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	4b31      	ldr	r3, [pc, #196]	; (8005290 <xPortStartScheduler+0x130>)
 80051cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051ce:	4b31      	ldr	r3, [pc, #196]	; (8005294 <xPortStartScheduler+0x134>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051d4:	e009      	b.n	80051ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80051d6:	4b2f      	ldr	r3, [pc, #188]	; (8005294 <xPortStartScheduler+0x134>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3b01      	subs	r3, #1
 80051dc:	4a2d      	ldr	r2, [pc, #180]	; (8005294 <xPortStartScheduler+0x134>)
 80051de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b80      	cmp	r3, #128	; 0x80
 80051f4:	d0ef      	beq.n	80051d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051f6:	4b27      	ldr	r3, [pc, #156]	; (8005294 <xPortStartScheduler+0x134>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1c3 0307 	rsb	r3, r3, #7
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d00a      	beq.n	8005218 <xPortStartScheduler+0xb8>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60bb      	str	r3, [r7, #8]
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005218:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <xPortStartScheduler+0x134>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <xPortStartScheduler+0x134>)
 8005220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <xPortStartScheduler+0x134>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800522a:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <xPortStartScheduler+0x134>)
 800522c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005236:	4b18      	ldr	r3, [pc, #96]	; (8005298 <xPortStartScheduler+0x138>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <xPortStartScheduler+0x138>)
 800523c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <xPortStartScheduler+0x138>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <xPortStartScheduler+0x138>)
 8005248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800524c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800524e:	f000 f8dd 	bl	800540c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <xPortStartScheduler+0x13c>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005258:	f000 f8fc 	bl	8005454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <xPortStartScheduler+0x140>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0f      	ldr	r2, [pc, #60]	; (80052a0 <xPortStartScheduler+0x140>)
 8005262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005268:	f7ff ff66 	bl	8005138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800526c:	f7fe ff32 	bl	80040d4 <vTaskSwitchContext>
	prvTaskExitError();
 8005270:	f7ff ff20 	bl	80050b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	e000ed00 	.word	0xe000ed00
 8005284:	410fc271 	.word	0x410fc271
 8005288:	410fc270 	.word	0x410fc270
 800528c:	e000e400 	.word	0xe000e400
 8005290:	200008fc 	.word	0x200008fc
 8005294:	20000900 	.word	0x20000900
 8005298:	e000ed20 	.word	0xe000ed20
 800529c:	2000000c 	.word	0x2000000c
 80052a0:	e000ef34 	.word	0xe000ef34

080052a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	607b      	str	r3, [r7, #4]
}
 80052bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <vPortEnterCritical+0x58>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a0d      	ldr	r2, [pc, #52]	; (80052fc <vPortEnterCritical+0x58>)
 80052c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <vPortEnterCritical+0x58>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d10f      	bne.n	80052f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <vPortEnterCritical+0x5c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	603b      	str	r3, [r7, #0]
}
 80052ec:	bf00      	nop
 80052ee:	e7fe      	b.n	80052ee <vPortEnterCritical+0x4a>
	}
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	2000000c 	.word	0x2000000c
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <vPortExitCritical+0x50>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <vPortExitCritical+0x24>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	607b      	str	r3, [r7, #4]
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005328:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <vPortExitCritical+0x50>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3b01      	subs	r3, #1
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <vPortExitCritical+0x50>)
 8005330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005332:	4b08      	ldr	r3, [pc, #32]	; (8005354 <vPortExitCritical+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <vPortExitCritical+0x42>
 800533a:	2300      	movs	r3, #0
 800533c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f383 8811 	msr	BASEPRI, r3
}
 8005344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	2000000c 	.word	0x2000000c
	...

08005360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005360:	f3ef 8009 	mrs	r0, PSP
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <pxCurrentTCBConst>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f01e 0f10 	tst.w	lr, #16
 8005370:	bf08      	it	eq
 8005372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	6010      	str	r0, [r2, #0]
 800537c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005384:	f380 8811 	msr	BASEPRI, r0
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f7fe fea0 	bl	80040d4 <vTaskSwitchContext>
 8005394:	f04f 0000 	mov.w	r0, #0
 8005398:	f380 8811 	msr	BASEPRI, r0
 800539c:	bc09      	pop	{r0, r3}
 800539e:	6819      	ldr	r1, [r3, #0]
 80053a0:	6808      	ldr	r0, [r1, #0]
 80053a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a6:	f01e 0f10 	tst.w	lr, #16
 80053aa:	bf08      	it	eq
 80053ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053b0:	f380 8809 	msr	PSP, r0
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	f3af 8000 	nop.w

080053c0 <pxCurrentTCBConst>:
 80053c0:	200006d4 	.word	0x200006d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop

080053c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
}
 80053e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053e2:	f7fe fdbf 	bl	8003f64 <xTaskIncrementTick>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <SysTick_Handler+0x40>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	2300      	movs	r3, #0
 80053f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f383 8811 	msr	BASEPRI, r3
}
 80053fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <vPortSetupTimerInterrupt+0x34>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <vPortSetupTimerInterrupt+0x38>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <vPortSetupTimerInterrupt+0x3c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	; (800544c <vPortSetupTimerInterrupt+0x40>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	4a09      	ldr	r2, [pc, #36]	; (8005450 <vPortSetupTimerInterrupt+0x44>)
 800542a:	3b01      	subs	r3, #1
 800542c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800542e:	4b04      	ldr	r3, [pc, #16]	; (8005440 <vPortSetupTimerInterrupt+0x34>)
 8005430:	2207      	movs	r2, #7
 8005432:	601a      	str	r2, [r3, #0]
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000e010 	.word	0xe000e010
 8005444:	e000e018 	.word	0xe000e018
 8005448:	20000000 	.word	0x20000000
 800544c:	10624dd3 	.word	0x10624dd3
 8005450:	e000e014 	.word	0xe000e014

08005454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005464 <vPortEnableVFP+0x10>
 8005458:	6801      	ldr	r1, [r0, #0]
 800545a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800545e:	6001      	str	r1, [r0, #0]
 8005460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005462:	bf00      	nop
 8005464:	e000ed88 	.word	0xe000ed88

08005468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800546e:	f3ef 8305 	mrs	r3, IPSR
 8005472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d914      	bls.n	80054a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800547a:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <vPortValidateInterruptPriority+0x70>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005484:	4b15      	ldr	r3, [pc, #84]	; (80054dc <vPortValidateInterruptPriority+0x74>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	7afa      	ldrb	r2, [r7, #11]
 800548a:	429a      	cmp	r2, r3
 800548c:	d20a      	bcs.n	80054a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	607b      	str	r3, [r7, #4]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054a4:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <vPortValidateInterruptPriority+0x78>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <vPortValidateInterruptPriority+0x7c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d90a      	bls.n	80054ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	603b      	str	r3, [r7, #0]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <vPortValidateInterruptPriority+0x60>
	}
 80054ca:	bf00      	nop
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	e000e3f0 	.word	0xe000e3f0
 80054dc:	200008fc 	.word	0x200008fc
 80054e0:	e000ed0c 	.word	0xe000ed0c
 80054e4:	20000900 	.word	0x20000900

080054e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054f4:	f7fe fc7c 	bl	8003df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054f8:	4b5b      	ldr	r3, [pc, #364]	; (8005668 <pvPortMalloc+0x180>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005500:	f000 f920 	bl	8005744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005504:	4b59      	ldr	r3, [pc, #356]	; (800566c <pvPortMalloc+0x184>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	f040 8093 	bne.w	8005638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01d      	beq.n	8005554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005518:	2208      	movs	r2, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	2b00      	cmp	r3, #0
 8005528:	d014      	beq.n	8005554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f023 0307 	bic.w	r3, r3, #7
 8005530:	3308      	adds	r3, #8
 8005532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <pvPortMalloc+0x6c>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	617b      	str	r3, [r7, #20]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d06e      	beq.n	8005638 <pvPortMalloc+0x150>
 800555a:	4b45      	ldr	r3, [pc, #276]	; (8005670 <pvPortMalloc+0x188>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	429a      	cmp	r2, r3
 8005562:	d869      	bhi.n	8005638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005564:	4b43      	ldr	r3, [pc, #268]	; (8005674 <pvPortMalloc+0x18c>)
 8005566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005568:	4b42      	ldr	r3, [pc, #264]	; (8005674 <pvPortMalloc+0x18c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800556e:	e004      	b.n	800557a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	429a      	cmp	r2, r3
 8005582:	d903      	bls.n	800558c <pvPortMalloc+0xa4>
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f1      	bne.n	8005570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800558c:	4b36      	ldr	r3, [pc, #216]	; (8005668 <pvPortMalloc+0x180>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	429a      	cmp	r2, r3
 8005594:	d050      	beq.n	8005638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2208      	movs	r2, #8
 800559c:	4413      	add	r3, r2
 800559e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	2308      	movs	r3, #8
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d91f      	bls.n	80055f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4413      	add	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <pvPortMalloc+0xf8>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	613b      	str	r3, [r7, #16]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055f2:	69b8      	ldr	r0, [r7, #24]
 80055f4:	f000 f908 	bl	8005808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055f8:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <pvPortMalloc+0x188>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <pvPortMalloc+0x188>)
 8005604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005606:	4b1a      	ldr	r3, [pc, #104]	; (8005670 <pvPortMalloc+0x188>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <pvPortMalloc+0x190>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d203      	bcs.n	800561a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005612:	4b17      	ldr	r3, [pc, #92]	; (8005670 <pvPortMalloc+0x188>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a18      	ldr	r2, [pc, #96]	; (8005678 <pvPortMalloc+0x190>)
 8005618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	4b13      	ldr	r3, [pc, #76]	; (800566c <pvPortMalloc+0x184>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	431a      	orrs	r2, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <pvPortMalloc+0x194>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	4a11      	ldr	r2, [pc, #68]	; (800567c <pvPortMalloc+0x194>)
 8005636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005638:	f7fe fbe8 	bl	8003e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <pvPortMalloc+0x174>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	60fb      	str	r3, [r7, #12]
}
 8005658:	bf00      	nop
 800565a:	e7fe      	b.n	800565a <pvPortMalloc+0x172>
	return pvReturn;
 800565c:	69fb      	ldr	r3, [r7, #28]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3728      	adds	r7, #40	; 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	2000450c 	.word	0x2000450c
 800566c:	20004520 	.word	0x20004520
 8005670:	20004510 	.word	0x20004510
 8005674:	20004504 	.word	0x20004504
 8005678:	20004514 	.word	0x20004514
 800567c:	20004518 	.word	0x20004518

08005680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d04d      	beq.n	800572e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005692:	2308      	movs	r3, #8
 8005694:	425b      	negs	r3, r3
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4413      	add	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	4b24      	ldr	r3, [pc, #144]	; (8005738 <vPortFree+0xb8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <vPortFree+0x44>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60fb      	str	r3, [r7, #12]
}
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <vPortFree+0x62>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60bb      	str	r3, [r7, #8]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <vPortFree+0xb8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01e      	beq.n	800572e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11a      	bne.n	800572e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <vPortFree+0xb8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	43db      	mvns	r3, r3
 8005702:	401a      	ands	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005708:	f7fe fb72 	bl	8003df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	4b0a      	ldr	r3, [pc, #40]	; (800573c <vPortFree+0xbc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4413      	add	r3, r2
 8005716:	4a09      	ldr	r2, [pc, #36]	; (800573c <vPortFree+0xbc>)
 8005718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800571a:	6938      	ldr	r0, [r7, #16]
 800571c:	f000 f874 	bl	8005808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <vPortFree+0xc0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3301      	adds	r3, #1
 8005726:	4a06      	ldr	r2, [pc, #24]	; (8005740 <vPortFree+0xc0>)
 8005728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800572a:	f7fe fb6f 	bl	8003e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800572e:	bf00      	nop
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20004520 	.word	0x20004520
 800573c:	20004510 	.word	0x20004510
 8005740:	2000451c 	.word	0x2000451c

08005744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800574a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800574e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005750:	4b27      	ldr	r3, [pc, #156]	; (80057f0 <prvHeapInit+0xac>)
 8005752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3307      	adds	r3, #7
 8005762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <prvHeapInit+0xac>)
 8005774:	4413      	add	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800577c:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <prvHeapInit+0xb0>)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005782:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <prvHeapInit+0xb0>)
 8005784:	2200      	movs	r2, #0
 8005786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4413      	add	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005790:	2208      	movs	r2, #8
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <prvHeapInit+0xb4>)
 80057a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057a6:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <prvHeapInit+0xb4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057ae:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <prvHeapInit+0xb4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <prvHeapInit+0xb4>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <prvHeapInit+0xb8>)
 80057d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4a09      	ldr	r2, [pc, #36]	; (8005800 <prvHeapInit+0xbc>)
 80057da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <prvHeapInit+0xc0>)
 80057de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057e2:	601a      	str	r2, [r3, #0]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000904 	.word	0x20000904
 80057f4:	20004504 	.word	0x20004504
 80057f8:	2000450c 	.word	0x2000450c
 80057fc:	20004514 	.word	0x20004514
 8005800:	20004510 	.word	0x20004510
 8005804:	20004520 	.word	0x20004520

08005808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005810:	4b28      	ldr	r3, [pc, #160]	; (80058b4 <prvInsertBlockIntoFreeList+0xac>)
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e002      	b.n	800581c <prvInsertBlockIntoFreeList+0x14>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d8f7      	bhi.n	8005816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d108      	bne.n	800584a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	441a      	add	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d118      	bne.n	8005890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d00d      	beq.n	8005886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	441a      	add	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e008      	b.n	8005898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e003      	b.n	8005898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	429a      	cmp	r2, r3
 800589e:	d002      	beq.n	80058a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20004504 	.word	0x20004504
 80058b8:	2000450c 	.word	0x2000450c

080058bc <ELClient_Init>:
static void protoCompletedCb(void);

//===== Initialization
/* Porting status: DONE  */
void ELClient_Init() 
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af02      	add	r7, sp, #8
  _proto.buf = _protoBuf;
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <ELClient_Init+0x48>)
 80058c4:	4a10      	ldr	r2, [pc, #64]	; (8005908 <ELClient_Init+0x4c>)
 80058c6:	601a      	str	r2, [r3, #0]
  _proto.bufSize = sizeof(_protoBuf);
 80058c8:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <ELClient_Init+0x48>)
 80058ca:	2280      	movs	r2, #128	; 0x80
 80058cc:	809a      	strh	r2, [r3, #4]
  _proto.dataLen = 0;
 80058ce:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <ELClient_Init+0x48>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	80da      	strh	r2, [r3, #6]
  _proto.isEsc = 0;
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <ELClient_Init+0x48>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	721a      	strb	r2, [r3, #8]

  xCompltSemp = xSemaphoreCreateBinaryStatic( &xCompltSempBuffer );
 80058da:	2303      	movs	r3, #3
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <ELClient_Init+0x50>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	2001      	movs	r0, #1
 80058e6:	f7fd fab1 	bl	8002e4c <xQueueGenericCreateStatic>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <ELClient_Init+0x54>)
 80058ee:	6013      	str	r3, [r2, #0]

  vMBPortSerialEnable(1, 0);
 80058f0:	2100      	movs	r1, #0
 80058f2:	2001      	movs	r0, #1
 80058f4:	f000 fcba 	bl	800626c <vMBPortSerialEnable>
  ELCLient_Transport_Init(0);
 80058f8:	2000      	movs	r0, #0
 80058fa:	f000 fb61 	bl	8005fc0 <ELCLient_Transport_Init>
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	200045ac 	.word	0x200045ac
 8005908:	2000452c 	.word	0x2000452c
 800590c:	200047bc 	.word	0x200047bc
 8005910:	200047b8 	.word	0x200047b8

08005914 <ELClientMqtt_WifiCbRegister>:

/* Porting status: DONE  */
void ELClientMqtt_WifiCbRegister(void* fn)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  wifiCb = (elclient_callback_fn)fn;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a04      	ldr	r2, [pc, #16]	; (8005930 <ELClientMqtt_WifiCbRegister+0x1c>)
 8005920:	6013      	str	r3, [r2, #0]
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	200045b8 	.word	0x200045b8

08005934 <ELClient_WaitReturn>:

BaseType_t ELClient_WaitReturn(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
	return (xSemaphoreTake( xCompltSemp, ( TickType_t ) 3000 ) == pdTRUE);
 8005938:	4b07      	ldr	r3, [pc, #28]	; (8005958 <ELClient_WaitReturn+0x24>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8005940:	4618      	mov	r0, r3
 8005942:	f7fd fd95 	bl	8003470 <xQueueSemaphoreTake>
 8005946:	4603      	mov	r3, r0
 8005948:	2b01      	cmp	r3, #1
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
}
 8005952:	4618      	mov	r0, r3
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	200047b8 	.word	0x200047b8

0800595c <ELClient_Sync>:

/* Porting status: DONE */
BOOL ELClient_Sync(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  // send a SLIP END char to make sure we get a clean start
  xPortSerialPutByte(SLIP_END);
 8005960:	20c0      	movs	r0, #192	; 0xc0
 8005962:	f000 fca5 	bl	80062b0 <xPortSerialPutByte>
  
  // send sync request
//  testPtr = (uint32_t)&wifiCb;
  ELClient_RequestArgc(CMD_SYNC, (uint32_t)&wifiCb, 0);
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <ELClient_Sync+0x3c>)
 8005968:	2200      	movs	r2, #0
 800596a:	4619      	mov	r1, r3
 800596c:	2001      	movs	r0, #1
 800596e:	f000 f86b 	bl	8005a48 <ELClient_RequestArgc>
  ELClient_Request();
 8005972:	f000 f90b 	bl	8005b8c <ELClient_Request>

  if ( ELClient_WaitReturn() )
 8005976:	f7ff ffdd 	bl	8005934 <ELClient_WaitReturn>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <ELClient_Sync+0x34>
     for (i=0;i<4;i++)
     {
       if (*src++ != *dst++) { return false; };
     }
    */
	  if (compltPacketPtr->value == (uint32_t)&wifiCb) 
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <ELClient_Sync+0x40>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4a04      	ldr	r2, [pc, #16]	; (8005998 <ELClient_Sync+0x3c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d101      	bne.n	8005990 <ELClient_Sync+0x34>
    {
		  return TRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <ELClient_Sync+0x36>
	  }
  }

  return FALSE;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200045b8 	.word	0x200045b8
 800599c:	20004524 	.word	0x20004524

080059a0 <ELClient_Process>:



/*Porting status:DONE  */
void ELClient_Process(void* arg)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint8_t value = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
	  value = ELClient_Read();
 80059ac:	f000 fb22 	bl	8005ff4 <ELClient_Read>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]
	  if (value == SLIP_ESC)
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	2bdb      	cmp	r3, #219	; 0xdb
 80059b8:	d103      	bne.n	80059c2 <ELClient_Process+0x22>
	  {
		_proto.isEsc = 1;
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <ELClient_Process+0xa0>)
 80059bc:	2201      	movs	r2, #1
 80059be:	721a      	strb	r2, [r3, #8]
 80059c0:	e7f4      	b.n	80059ac <ELClient_Process+0xc>
	  } else if (value == SLIP_END)
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2bc0      	cmp	r3, #192	; 0xc0
 80059c6:	d113      	bne.n	80059f0 <ELClient_Process+0x50>
	  {
		  if ( _proto.dataLen >= 8 ) {
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <ELClient_Process+0xa0>)
 80059ca:	88db      	ldrh	r3, [r3, #6]
 80059cc:	2b07      	cmp	r3, #7
 80059ce:	d908      	bls.n	80059e2 <ELClient_Process+0x42>
			protoCompletedCb();
 80059d0:	f000 f8ea 	bl	8005ba8 <protoCompletedCb>
			xSemaphoreGive( xCompltSemp );
 80059d4:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <ELClient_Process+0xa4>)
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	2300      	movs	r3, #0
 80059da:	2200      	movs	r2, #0
 80059dc:	2100      	movs	r1, #0
 80059de:	f7fd facd 	bl	8002f7c <xQueueGenericSend>
		  }
		  _proto.dataLen = 0;
 80059e2:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <ELClient_Process+0xa0>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	80da      	strh	r2, [r3, #6]
		  _proto.isEsc = 0;
 80059e8:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <ELClient_Process+0xa0>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	721a      	strb	r2, [r3, #8]
 80059ee:	e7dd      	b.n	80059ac <ELClient_Process+0xc>
	  } else
	  {
		if (_proto.isEsc)
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <ELClient_Process+0xa0>)
 80059f2:	7a1b      	ldrb	r3, [r3, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00c      	beq.n	8005a12 <ELClient_Process+0x72>
		{
		  if (value == SLIP_ESC_END) { value = SLIP_END; }
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2bdc      	cmp	r3, #220	; 0xdc
 80059fc:	d101      	bne.n	8005a02 <ELClient_Process+0x62>
 80059fe:	23c0      	movs	r3, #192	; 0xc0
 8005a00:	73fb      	strb	r3, [r7, #15]
		  if (value == SLIP_ESC_ESC) { value = SLIP_ESC; }
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2bdd      	cmp	r3, #221	; 0xdd
 8005a06:	d101      	bne.n	8005a0c <ELClient_Process+0x6c>
 8005a08:	23db      	movs	r3, #219	; 0xdb
 8005a0a:	73fb      	strb	r3, [r7, #15]
		  _proto.isEsc = 0;
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <ELClient_Process+0xa0>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	721a      	strb	r2, [r3, #8]
		}
		if (_proto.dataLen < _proto.bufSize) {
 8005a12:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <ELClient_Process+0xa0>)
 8005a14:	88da      	ldrh	r2, [r3, #6]
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <ELClient_Process+0xa0>)
 8005a18:	889b      	ldrh	r3, [r3, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d20b      	bcs.n	8005a36 <ELClient_Process+0x96>
		  _proto.buf[_proto.dataLen++] = value;
 8005a1e:	4b08      	ldr	r3, [pc, #32]	; (8005a40 <ELClient_Process+0xa0>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <ELClient_Process+0xa0>)
 8005a24:	88db      	ldrh	r3, [r3, #6]
 8005a26:	1c59      	adds	r1, r3, #1
 8005a28:	b288      	uxth	r0, r1
 8005a2a:	4905      	ldr	r1, [pc, #20]	; (8005a40 <ELClient_Process+0xa0>)
 8005a2c:	80c8      	strh	r0, [r1, #6]
 8005a2e:	4413      	add	r3, r2
 8005a30:	7bfa      	ldrb	r2, [r7, #15]
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e7ba      	b.n	80059ac <ELClient_Process+0xc>
		}else
		{
			_proto.dataLen = 0;
 8005a36:	4b02      	ldr	r3, [pc, #8]	; (8005a40 <ELClient_Process+0xa0>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	80da      	strh	r2, [r3, #6]
	  value = ELClient_Read();
 8005a3c:	e7b6      	b.n	80059ac <ELClient_Process+0xc>
 8005a3e:	bf00      	nop
 8005a40:	200045ac 	.word	0x200045ac
 8005a44:	200047b8 	.word	0x200047b8

08005a48 <ELClient_RequestArgc>:
  }
}

//================= SLIP REQUEST FUNCIONS ==============
void ELClient_RequestArgc(uint16_t cmd, uint32_t value, uint16_t argc)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	6039      	str	r1, [r7, #0]
 8005a52:	80fb      	strh	r3, [r7, #6]
 8005a54:	4613      	mov	r3, r2
 8005a56:	80bb      	strh	r3, [r7, #4]
  crc = 0;
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <ELClient_RequestArgc+0x84>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	801a      	strh	r2, [r3, #0]

  /* send an initial END character to flush out any data that may
  * have accumulated in the receiver due to line noise
  */
  xPortSerialPutByte(SLIP_END);
 8005a5e:	20c0      	movs	r0, #192	; 0xc0
 8005a60:	f000 fc26 	bl	80062b0 <xPortSerialPutByte>
  ELClient_WriteBuffer(&cmd, 2);
 8005a64:	1dbb      	adds	r3, r7, #6
 8005a66:	2102      	movs	r1, #2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 faf9 	bl	8006060 <ELClient_WriteBuffer>
  crc = _crc16Data((unsigned const char*)&cmd, 2, crc);
 8005a6e:	4b17      	ldr	r3, [pc, #92]	; (8005acc <ELClient_RequestArgc+0x84>)
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	1dbb      	adds	r3, r7, #6
 8005a74:	2102      	movs	r1, #2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f912 	bl	8005ca0 <_crc16Data>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <ELClient_RequestArgc+0x84>)
 8005a82:	801a      	strh	r2, [r3, #0]

  ELClient_WriteBuffer(&argc, 2);
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	2102      	movs	r1, #2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fae9 	bl	8006060 <ELClient_WriteBuffer>
  crc = _crc16Data((unsigned const char*)&argc, 2, crc);
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <ELClient_RequestArgc+0x84>)
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	2102      	movs	r1, #2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f902 	bl	8005ca0 <_crc16Data>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <ELClient_RequestArgc+0x84>)
 8005aa2:	801a      	strh	r2, [r3, #0]

  ELClient_WriteBuffer(&value, 4);
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	2104      	movs	r1, #4
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fad9 	bl	8006060 <ELClient_WriteBuffer>
  crc = _crc16Data((unsigned const char*)&value, 4, crc);
 8005aae:	4b07      	ldr	r3, [pc, #28]	; (8005acc <ELClient_RequestArgc+0x84>)
 8005ab0:	881a      	ldrh	r2, [r3, #0]
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f8f2 	bl	8005ca0 <_crc16Data>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	4b02      	ldr	r3, [pc, #8]	; (8005acc <ELClient_RequestArgc+0x84>)
 8005ac2:	801a      	strh	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20004528 	.word	0x20004528

08005ad0 <ELClient_RequestBuffer>:

void ELClient_RequestBuffer(const void* data, uint16_t len)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	807b      	strh	r3, [r7, #2]
  uint16_t l = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	82fb      	strh	r3, [r7, #22]
  uint8_t *d = (uint8_t*)data;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	613b      	str	r3, [r7, #16]
  uint16_t data_len = len;
 8005ae4:	887b      	ldrh	r3, [r7, #2]
 8005ae6:	817b      	strh	r3, [r7, #10]

  // ELClient_write the length
  ELClient_WriteBuffer(&data_len, 2);
 8005ae8:	f107 030a 	add.w	r3, r7, #10
 8005aec:	2102      	movs	r1, #2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fab6 	bl	8006060 <ELClient_WriteBuffer>
  crc = _crc16Data((unsigned const char*)&data_len, 2, crc);
 8005af4:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <ELClient_RequestBuffer+0xb8>)
 8005af6:	881a      	ldrh	r2, [r3, #0]
 8005af8:	f107 030a 	add.w	r3, r7, #10
 8005afc:	2102      	movs	r1, #2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f8ce 	bl	8005ca0 <_crc16Data>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	4b1f      	ldr	r3, [pc, #124]	; (8005b88 <ELClient_RequestBuffer+0xb8>)
 8005b0a:	801a      	strh	r2, [r3, #0]

  // output the data
  for (l=len; l>0; l--) 
 8005b0c:	887b      	ldrh	r3, [r7, #2]
 8005b0e:	82fb      	strh	r3, [r7, #22]
 8005b10:	e015      	b.n	8005b3e <ELClient_RequestBuffer+0x6e>
  {
    ELClient_Write(*d);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fa80 	bl	800601c <ELClient_Write>
    crc = _crc16Add(*d++, crc);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	613a      	str	r2, [r7, #16]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <ELClient_RequestBuffer+0xb8>)
 8005b26:	8812      	ldrh	r2, [r2, #0]
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f87a 	bl	8005c24 <_crc16Add>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <ELClient_RequestBuffer+0xb8>)
 8005b36:	801a      	strh	r2, [r3, #0]
  for (l=len; l>0; l--) 
 8005b38:	8afb      	ldrh	r3, [r7, #22]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	82fb      	strh	r3, [r7, #22]
 8005b3e:	8afb      	ldrh	r3, [r7, #22]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <ELClient_RequestBuffer+0x42>
  }

  // output padding
  uint16_t pad = (4-(len&3))&3;
 8005b44:	887b      	ldrh	r3, [r7, #2]
 8005b46:	425b      	negs	r3, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	81fb      	strh	r3, [r7, #14]
  uint8_t temp = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	737b      	strb	r3, [r7, #13]
  while (pad--) 
 8005b54:	e00e      	b.n	8005b74 <ELClient_RequestBuffer+0xa4>
  {
    ELClient_Write(temp);
 8005b56:	7b7b      	ldrb	r3, [r7, #13]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 fa5f 	bl	800601c <ELClient_Write>
    crc = _crc16Add(temp, crc);
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <ELClient_RequestBuffer+0xb8>)
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	7b7b      	ldrb	r3, [r7, #13]
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f85c 	bl	8005c24 <_crc16Add>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <ELClient_RequestBuffer+0xb8>)
 8005b72:	801a      	strh	r2, [r3, #0]
  while (pad--) 
 8005b74:	89fb      	ldrh	r3, [r7, #14]
 8005b76:	1e5a      	subs	r2, r3, #1
 8005b78:	81fa      	strh	r2, [r7, #14]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1eb      	bne.n	8005b56 <ELClient_RequestBuffer+0x86>
  }
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20004528 	.word	0x20004528

08005b8c <ELClient_Request>:

/*Porting status: DONE  */
void ELClient_Request(void) 
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  ELClient_WriteBuffer((uint8_t*)&crc, 2);
 8005b90:	2102      	movs	r1, #2
 8005b92:	4804      	ldr	r0, [pc, #16]	; (8005ba4 <ELClient_Request+0x18>)
 8005b94:	f000 fa64 	bl	8006060 <ELClient_WriteBuffer>

  /* tell the receiver that we’re done sending the packet
  */
  xPortSerialPutByte(SLIP_END);
 8005b98:	20c0      	movs	r0, #192	; 0xc0
 8005b9a:	f000 fb89 	bl	80062b0 <xPortSerialPutByte>
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20004528 	.word	0x20004528

08005ba8 <protoCompletedCb>:

//================ CALLBACK HANDLER ==================
static void protoCompletedCb(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
  compltPacketPtr = (ELClientPacket*)_proto.buf;
 8005bae:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <protoCompletedCb+0x74>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <protoCompletedCb+0x78>)
 8005bb4:	6013      	str	r3, [r2, #0]

  elclient_callback_fn  fp;

  // verify CRC
  uint16_t crc = _crc16Data(_proto.buf, _proto.dataLen-2, 0);
 8005bb6:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <protoCompletedCb+0x74>)
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <protoCompletedCb+0x74>)
 8005bbc:	88db      	ldrh	r3, [r3, #6]
 8005bbe:	3b02      	subs	r3, #2
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f000 f86b 	bl	8005ca0 <_crc16Data>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	80fb      	strh	r3, [r7, #6]
  uint16_t resp_crc = *(uint16_t*)(_proto.buf+_proto.dataLen-2);
 8005bce:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <protoCompletedCb+0x74>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <protoCompletedCb+0x74>)
 8005bd4:	88db      	ldrh	r3, [r3, #6]
 8005bd6:	3b02      	subs	r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	80bb      	strh	r3, [r7, #4]
  if (crc != resp_crc) {
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	88bb      	ldrh	r3, [r7, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d111      	bne.n	8005c0a <protoCompletedCb+0x62>
    DBG_PRINTF("ELC: Invalid CRC");
    return ;
  }

	// dispatch based on command
	switch (compltPacketPtr->cmd)
 8005be6:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <protoCompletedCb+0x78>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d005      	beq.n	8005bfe <protoCompletedCb+0x56>
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	dc0b      	bgt.n	8005c0e <protoCompletedCb+0x66>
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d00b      	beq.n	8005c12 <protoCompletedCb+0x6a>
 8005bfa:	2b02      	cmp	r3, #2
		  DBG_PRINTF("NEED_SYNC!");
		  break;

	  default:
		  DBG_PRINTF("CMD??");
		  break;
 8005bfc:	e007      	b.n	8005c0e <protoCompletedCb+0x66>
		  fp = *((elclient_callback_fn*)(compltPacketPtr->value));
 8005bfe:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <protoCompletedCb+0x78>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	603b      	str	r3, [r7, #0]
		 break;
 8005c08:	e004      	b.n	8005c14 <protoCompletedCb+0x6c>
    return ;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <protoCompletedCb+0x6c>
		  break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <protoCompletedCb+0x6c>
		  break;
 8005c12:	bf00      	nop
	 }
}
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200045ac 	.word	0x200045ac
 8005c20:	20004524 	.word	0x20004524

08005c24 <_crc16Add>:

//================== CRC helper functions ====================
/*Porting status: DONE  */
uint16_t _crc16Add(unsigned char b, uint16_t sum)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	460a      	mov	r2, r1
 8005c2e:	71fb      	strb	r3, [r7, #7]
 8005c30:	4613      	mov	r3, r2
 8005c32:	80bb      	strh	r3, [r7, #4]
  uint16_t acc = sum;
 8005c34:	88bb      	ldrh	r3, [r7, #4]
 8005c36:	81fb      	strh	r3, [r7, #14]

  acc ^= b;
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	89fb      	ldrh	r3, [r7, #14]
 8005c3e:	4053      	eors	r3, r2
 8005c40:	81fb      	strh	r3, [r7, #14]
  acc = (acc >> 8) | (acc << 8);
 8005c42:	89fb      	ldrh	r3, [r7, #14]
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	b21a      	sxth	r2, r3
 8005c4a:	89fb      	ldrh	r3, [r7, #14]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	b21b      	sxth	r3, r3
 8005c50:	4313      	orrs	r3, r2
 8005c52:	b21b      	sxth	r3, r3
 8005c54:	81fb      	strh	r3, [r7, #14]
  acc ^= (acc & 0xff00) << 4;
 8005c56:	89fb      	ldrh	r3, [r7, #14]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	b21b      	sxth	r3, r3
 8005c5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005c60:	f023 030f 	bic.w	r3, r3, #15
 8005c64:	b21a      	sxth	r2, r3
 8005c66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c6a:	4053      	eors	r3, r2
 8005c6c:	b21b      	sxth	r3, r3
 8005c6e:	81fb      	strh	r3, [r7, #14]
  acc ^= (acc >> 8) >> 4;
 8005c70:	89fb      	ldrh	r3, [r7, #14]
 8005c72:	0b1b      	lsrs	r3, r3, #12
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	89fb      	ldrh	r3, [r7, #14]
 8005c78:	4053      	eors	r3, r2
 8005c7a:	81fb      	strh	r3, [r7, #14]
  acc ^= (acc & 0xff00) >> 5;
 8005c7c:	89fb      	ldrh	r3, [r7, #14]
 8005c7e:	115b      	asrs	r3, r3, #5
 8005c80:	b21b      	sxth	r3, r3
 8005c82:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005c86:	b21a      	sxth	r2, r3
 8005c88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c8c:	4053      	eors	r3, r2
 8005c8e:	b21b      	sxth	r3, r3
 8005c90:	81fb      	strh	r3, [r7, #14]

  return acc;
 8005c92:	89fb      	ldrh	r3, [r7, #14]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_crc16Data>:

/*Porting status: DONE  */
uint16_t _crc16Data(const unsigned char *data, uint16_t len, uint16_t acc)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
 8005cac:	4613      	mov	r3, r2
 8005cae:	803b      	strh	r3, [r7, #0]
  uint16_t i = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	81fb      	strh	r3, [r7, #14]
  uint16_t sum = acc;
 8005cb4:	883b      	ldrh	r3, [r7, #0]
 8005cb6:	81bb      	strh	r3, [r7, #12]

  for (i=0; i<len; i++)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	81fb      	strh	r3, [r7, #14]
 8005cbc:	e00d      	b.n	8005cda <_crc16Data+0x3a>
  {
    sum = _crc16Add(*data++, sum);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	89ba      	ldrh	r2, [r7, #12]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff ffaa 	bl	8005c24 <_crc16Add>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	81bb      	strh	r3, [r7, #12]
  for (i=0; i<len; i++)
 8005cd4:	89fb      	ldrh	r3, [r7, #14]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	81fb      	strh	r3, [r7, #14]
 8005cda:	89fa      	ldrh	r2, [r7, #14]
 8005cdc:	887b      	ldrh	r3, [r7, #2]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d3ed      	bcc.n	8005cbe <_crc16Data+0x1e>
  }

  return sum;
 8005ce2:	89bb      	ldrh	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <ELClientMqtt_ConnectedCbRegister>:
static ELClient_MQTT_Struct_t  EL_Mqtt_Struct;



void ELClientMqtt_ConnectedCbRegister(void* fn)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	EL_Mqtt_Struct.connectedCb = fn;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <ELClientMqtt_ConnectedCbRegister+0x1c>)
 8005cf8:	6013      	str	r3, [r2, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	200045bc 	.word	0x200045bc

08005d0c <ELClientMqtt_DisconnectedCbRegister>:

void ELClientMqtt_DisconnectedCbRegister(void* fn)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
	EL_Mqtt_Struct.disconnectedCb = fn;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <ELClientMqtt_DisconnectedCbRegister+0x1c>)
 8005d18:	6053      	str	r3, [r2, #4]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	200045bc 	.word	0x200045bc

08005d2c <ELClientMqtt_PublishedCbRegister>:

void ELClientMqtt_PublishedCbRegister(void* fn)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	EL_Mqtt_Struct.publishedCb = fn;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <ELClientMqtt_PublishedCbRegister+0x1c>)
 8005d38:	6093      	str	r3, [r2, #8]
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	200045bc 	.word	0x200045bc

08005d4c <ELClientMqtt_DataCbRegister>:

void ELClientMqtt_DataCbRegister(void* fn)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	EL_Mqtt_Struct.dataCb = fn;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <ELClientMqtt_DataCbRegister+0x1c>)
 8005d58:	60d3      	str	r3, [r2, #12]
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	200045bc 	.word	0x200045bc

08005d6c <ELClientMqtt_setup>:

void ELClientMqtt_setup() 
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
  ELClient_RequestArgc(CMD_MQTT_SETUP, 0, 4);
 8005d72:	2204      	movs	r2, #4
 8005d74:	2100      	movs	r1, #0
 8005d76:	200a      	movs	r0, #10
 8005d78:	f7ff fe66 	bl	8005a48 <ELClient_RequestArgc>
  uint32_t cb = (uint32_t)(EL_Mqtt_Struct.connectedCb);
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <ELClientMqtt_setup+0x5c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	607b      	str	r3, [r7, #4]
  ELClient_RequestBuffer(&cb, 4);
 8005d82:	1d3b      	adds	r3, r7, #4
 8005d84:	2104      	movs	r1, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fea2 	bl	8005ad0 <ELClient_RequestBuffer>
  cb = (uint32_t)(EL_Mqtt_Struct.disconnectedCb);
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <ELClientMqtt_setup+0x5c>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	607b      	str	r3, [r7, #4]
  ELClient_RequestBuffer(&cb, 4);
 8005d92:	1d3b      	adds	r3, r7, #4
 8005d94:	2104      	movs	r1, #4
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fe9a 	bl	8005ad0 <ELClient_RequestBuffer>
  cb = (uint32_t)(EL_Mqtt_Struct.publishedCb);
 8005d9c:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <ELClientMqtt_setup+0x5c>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	607b      	str	r3, [r7, #4]
  ELClient_RequestBuffer(&cb, 4);
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	2104      	movs	r1, #4
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fe92 	bl	8005ad0 <ELClient_RequestBuffer>
  cb = (uint32_t)(EL_Mqtt_Struct.dataCb);
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <ELClientMqtt_setup+0x5c>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	607b      	str	r3, [r7, #4]
  ELClient_RequestBuffer(&cb, 4);
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	2104      	movs	r1, #4
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fe8a 	bl	8005ad0 <ELClient_RequestBuffer>
  ELClient_Request();
 8005dbc:	f7ff fee6 	bl	8005b8c <ELClient_Request>
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	200045bc 	.word	0x200045bc

08005dcc <ELClientMqtt_subscribe>:

// SUBSCRIBE
void ELClientMqtt_subscribe(const char* topic, uint8_t qos) 
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
  ELClient_RequestArgc(CMD_MQTT_SUBSCRIBE, 0, 2);
 8005dd8:	2202      	movs	r2, #2
 8005dda:	2100      	movs	r1, #0
 8005ddc:	200c      	movs	r0, #12
 8005dde:	f7ff fe33 	bl	8005a48 <ELClient_RequestArgc>
  ELClient_RequestBuffer(topic, strlen(topic));
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fa f9f4 	bl	80001d0 <strlen>
 8005de8:	4603      	mov	r3, r0
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fe6e 	bl	8005ad0 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(&qos, 1);
 8005df4:	1cfb      	adds	r3, r7, #3
 8005df6:	2101      	movs	r1, #1
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fe69 	bl	8005ad0 <ELClient_RequestBuffer>
  ELClient_Request();
 8005dfe:	f7ff fec5 	bl	8005b8c <ELClient_Request>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <ELClientMqtt_publish>:


// PUBLISH
void ELClientMqtt_publish(const uint8_t* topic, const char* data,
    const uint16_t len, uint8_t qos, uint8_t retain)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	4611      	mov	r1, r2
 8005e16:	461a      	mov	r2, r3
 8005e18:	460b      	mov	r3, r1
 8005e1a:	80fb      	strh	r3, [r7, #6]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	717b      	strb	r3, [r7, #5]
  // Header 
  ELClient_RequestArgc(CMD_MQTT_PUBLISH, 0, 5);
 8005e20:	2205      	movs	r2, #5
 8005e22:	2100      	movs	r1, #0
 8005e24:	200b      	movs	r0, #11
 8005e26:	f7ff fe0f 	bl	8005a48 <ELClient_RequestArgc>

  // Data section
  ELClient_RequestBuffer(topic, strlen(topic)); /*Arg 1*/
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7fa f9d0 	bl	80001d0 <strlen>
 8005e30:	4603      	mov	r3, r0
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	4619      	mov	r1, r3
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff fe4a 	bl	8005ad0 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(data, len); /*Arg 2*/
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	68b8      	ldr	r0, [r7, #8]
 8005e42:	f7ff fe45 	bl	8005ad0 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(&len, 2); /*Arg 3*/
 8005e46:	1dbb      	adds	r3, r7, #6
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fe40 	bl	8005ad0 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(&qos, 1); /*Arg 4*/
 8005e50:	1d7b      	adds	r3, r7, #5
 8005e52:	2101      	movs	r1, #1
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fe3b 	bl	8005ad0 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(&retain, 1); /*Arg 5*/
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	f107 0018 	add.w	r0, r7, #24
 8005e60:	f7ff fe36 	bl	8005ad0 <ELClient_RequestBuffer>

  // Footer
  ELClient_Request();
 8005e64:	f7ff fe92 	bl	8005b8c <ELClient_Request>
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <Response_popArg>:

  return len;
}

int16_t Response_popArg(void* d, uint16_t maxLen)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	807b      	strh	r3, [r7, #2]
  if (_arg_num >= _cmd->argc) return -1;
 8005e7c:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <Response_popArg+0xa8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	885b      	ldrh	r3, [r3, #2]
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	4b25      	ldr	r3, [pc, #148]	; (8005f1c <Response_popArg+0xac>)
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d802      	bhi.n	8005e92 <Response_popArg+0x22>
 8005e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e90:	e03b      	b.n	8005f0a <Response_popArg+0x9a>

  uint16_t len = *(uint16_t*)_arg_ptr;
 8005e92:	4b23      	ldr	r3, [pc, #140]	; (8005f20 <Response_popArg+0xb0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	817b      	strh	r3, [r7, #10]
  uint16_t pad = (4-((len+2)&3))&3;    // pad to next multiple of 4, including length
 8005e9a:	897b      	ldrh	r3, [r7, #10]
 8005e9c:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8005ea0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005ea4:	33fe      	adds	r3, #254	; 0xfe
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	813b      	strh	r3, [r7, #8]
  _arg_ptr += 2;
 8005eae:	4b1c      	ldr	r3, [pc, #112]	; (8005f20 <Response_popArg+0xb0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3302      	adds	r3, #2
 8005eb4:	4a1a      	ldr	r2, [pc, #104]	; (8005f20 <Response_popArg+0xb0>)
 8005eb6:	6013      	str	r3, [r2, #0]
  _arg_num++;
 8005eb8:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <Response_popArg+0xac>)
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	4b16      	ldr	r3, [pc, #88]	; (8005f1c <Response_popArg+0xac>)
 8005ec2:	801a      	strh	r2, [r3, #0]

  uint8_t *data = (uint8_t *)d;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	617b      	str	r3, [r7, #20]
  uint16_t l = len > maxLen ? maxLen : len;
 8005ec8:	897a      	ldrh	r2, [r7, #10]
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	bf28      	it	cs
 8005ed0:	4613      	movcs	r3, r2
 8005ed2:	827b      	strh	r3, [r7, #18]
  uint8_t *p = _arg_ptr;
 8005ed4:	4b12      	ldr	r3, [pc, #72]	; (8005f20 <Response_popArg+0xb0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	60fb      	str	r3, [r7, #12]
  while (l--)
 8005eda:	e007      	b.n	8005eec <Response_popArg+0x7c>
    *data++ = *p++;
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	1c53      	adds	r3, r2, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	1c59      	adds	r1, r3, #1
 8005ee6:	6179      	str	r1, [r7, #20]
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	701a      	strb	r2, [r3, #0]
  while (l--)
 8005eec:	8a7b      	ldrh	r3, [r7, #18]
 8005eee:	1e5a      	subs	r2, r3, #1
 8005ef0:	827a      	strh	r2, [r7, #18]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f2      	bne.n	8005edc <Response_popArg+0x6c>

  _arg_ptr += len + pad;
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <Response_popArg+0xb0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	8979      	ldrh	r1, [r7, #10]
 8005efc:	893a      	ldrh	r2, [r7, #8]
 8005efe:	440a      	add	r2, r1
 8005f00:	4413      	add	r3, r2
 8005f02:	4a07      	ldr	r2, [pc, #28]	; (8005f20 <Response_popArg+0xb0>)
 8005f04:	6013      	str	r3, [r2, #0]

  return len;
 8005f06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	200045d4 	.word	0x200045d4
 8005f1c:	200045cc 	.word	0x200045cc
 8005f20:	200045d0 	.word	0x200045d0

08005f24 <Response_popBuffer>:

void Response_popBuffer(uint8_t* buffer, uint16_t* payload_len)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint16_t len = *(uint16_t*)_arg_ptr;
 8005f2e:	4b22      	ldr	r3, [pc, #136]	; (8005fb8 <Response_popBuffer+0x94>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	81bb      	strh	r3, [r7, #12]
  uint16_t pad = (4-((len+2)&3))&3;    // pad to next multiple of 4, including length
 8005f36:	89bb      	ldrh	r3, [r7, #12]
 8005f38:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8005f3c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005f40:	33fe      	adds	r3, #254	; 0xfe
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	817b      	strh	r3, [r7, #10]
  _arg_ptr += 2;
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <Response_popBuffer+0x94>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3302      	adds	r3, #2
 8005f50:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <Response_popBuffer+0x94>)
 8005f52:	6013      	str	r3, [r2, #0]
  _arg_num++;
 8005f54:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <Response_popBuffer+0x98>)
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <Response_popBuffer+0x98>)
 8005f5e:	801a      	strh	r2, [r3, #0]

  uint8_t i;
  for (i = 0; i < len; i++) {
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e00c      	b.n	8005f80 <Response_popBuffer+0x5c>
    buffer[i] = (char)*_arg_ptr++;
 8005f66:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <Response_popBuffer+0x94>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	4912      	ldr	r1, [pc, #72]	; (8005fb8 <Response_popBuffer+0x94>)
 8005f6e:	600a      	str	r2, [r1, #0]
 8005f70:	7bfa      	ldrb	r2, [r7, #15]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	440a      	add	r2, r1
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	89ba      	ldrh	r2, [r7, #12]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d8ed      	bhi.n	8005f66 <Response_popBuffer+0x42>
  }
  buffer[i] = '\0';
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
  *payload_len = i + 1;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3301      	adds	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	801a      	strh	r2, [r3, #0]

  _arg_ptr += pad;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <Response_popBuffer+0x94>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	897b      	ldrh	r3, [r7, #10]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	4a03      	ldr	r2, [pc, #12]	; (8005fb8 <Response_popBuffer+0x94>)
 8005faa:	6013      	str	r3, [r2, #0]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	200045d0 	.word	0x200045d0
 8005fbc:	200045cc 	.word	0x200045cc

08005fc0 <ELCLient_Transport_Init>:
/* The array to use as the queue's storage area.  This must be at least
uxQueueLength * uxItemSize bytes. */
uint8_t ucSerialQueueStorageArea[ SERIAL_QUEUE_LENGTH * SERIAL_ITEM_SIZE ];

void ELCLient_Transport_Init( void *pvParameters )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	6078      	str	r0, [r7, #4]
    /* Create a queue capable of containing 10 uint64_t values. */
    xSerialQueueHandle = xQueueCreateStatic( SERIAL_QUEUE_LENGTH,
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <ELCLient_Transport_Init+0x28>)
 8005fce:	4a07      	ldr	r2, [pc, #28]	; (8005fec <ELCLient_Transport_Init+0x2c>)
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005fd6:	f7fc ff39 	bl	8002e4c <xQueueGenericCreateStatic>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	4a04      	ldr	r2, [pc, #16]	; (8005ff0 <ELCLient_Transport_Init+0x30>)
 8005fde:	6013      	str	r3, [r2, #0]
                                 SERIAL_ITEM_SIZE,
                                 ucSerialQueueStorageArea,
                                 &xSerialQueueStruct );

 }
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200045d8 	.word	0x200045d8
 8005fec:	20004804 	.word	0x20004804
 8005ff0:	20004c04 	.word	0x20004c04

08005ff4 <ELClient_Read>:

uint8_t ELClient_Read()
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	71fb      	strb	r3, [r7, #7]
    xQueueReceive( xSerialQueueHandle, &data, ( TickType_t ) 0xFFFFFFFF );
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <ELClient_Read+0x24>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	1df9      	adds	r1, r7, #7
 8006004:	f04f 32ff 	mov.w	r2, #4294967295
 8006008:	4618      	mov	r0, r3
 800600a:	f7fd f951 	bl	80032b0 <xQueueReceive>

    return data;
 800600e:	79fb      	ldrb	r3, [r7, #7]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20004c04 	.word	0x20004c04

0800601c <ELClient_Write>:
/* for each byte in the packet, send the appropriate character
* sequence
*/
void ELClient_Write(uint8_t data)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  
  switch (data)
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	2bc0      	cmp	r3, #192	; 0xc0
 800602a:	d002      	beq.n	8006032 <ELClient_Write+0x16>
 800602c:	2bdb      	cmp	r3, #219	; 0xdb
 800602e:	d007      	beq.n	8006040 <ELClient_Write+0x24>
 8006030:	e00d      	b.n	800604e <ELClient_Write+0x32>
  /* if it’s the same code as an END character, we send a
  * special two character code so as not to make the
  * receiver think we sent an END
  */    
	  case SLIP_END:
		  xPortSerialPutByte(SLIP_ESC);
 8006032:	20db      	movs	r0, #219	; 0xdb
 8006034:	f000 f93c 	bl	80062b0 <xPortSerialPutByte>
		  xPortSerialPutByte(SLIP_ESC_END);
 8006038:	20dc      	movs	r0, #220	; 0xdc
 800603a:	f000 f939 	bl	80062b0 <xPortSerialPutByte>
		break;
 800603e:	e00b      	b.n	8006058 <ELClient_Write+0x3c>
    /* if it’s the same code as an ESC character,
    * we send a special two character code so as not
    * to make the receiver think we sent an ESC
    */    
	  case SLIP_ESC:
		  xPortSerialPutByte(SLIP_ESC);
 8006040:	20db      	movs	r0, #219	; 0xdb
 8006042:	f000 f935 	bl	80062b0 <xPortSerialPutByte>
		  xPortSerialPutByte(SLIP_ESC_ESC);
 8006046:	20dd      	movs	r0, #221	; 0xdd
 8006048:	f000 f932 	bl	80062b0 <xPortSerialPutByte>
		break;
 800604c:	e004      	b.n	8006058 <ELClient_Write+0x3c>
	  default:
		xPortSerialPutByte(data);
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f92d 	bl	80062b0 <xPortSerialPutByte>
  }
  
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <ELClient_WriteBuffer>:

void ELClient_WriteBuffer(void* data, uint16_t len)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
  uint8_t *d = (uint8_t*)data;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	60fb      	str	r3, [r7, #12]

  while (len--)
 8006070:	e006      	b.n	8006080 <ELClient_WriteBuffer+0x20>
  {
	  ELClient_Write(*d++);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	60fa      	str	r2, [r7, #12]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff ffce 	bl	800601c <ELClient_Write>
  while (len--)
 8006080:	887b      	ldrh	r3, [r7, #2]
 8006082:	1e5a      	subs	r2, r3, #1
 8006084:	807a      	strh	r2, [r7, #2]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f3      	bne.n	8006072 <ELClient_WriteBuffer+0x12>
  }
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <Mqtt_Init>:
void mqttDisconnected(void* response);
void mqttData(void* response);
void mqttPublished(void* response);

void Mqtt_Init()
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0

  ELClient_Init();
 8006098:	f7ff fc10 	bl	80058bc <ELClient_Init>
  ELClientMqtt_WifiCbRegister(wifiStatusCb);
 800609c:	4808      	ldr	r0, [pc, #32]	; (80060c0 <Mqtt_Init+0x2c>)
 800609e:	f7ff fc39 	bl	8005914 <ELClientMqtt_WifiCbRegister>
  // Set-up callbacks for events and initialize with es-link.
  ELClientMqtt_ConnectedCbRegister(mqttConnected);
 80060a2:	4808      	ldr	r0, [pc, #32]	; (80060c4 <Mqtt_Init+0x30>)
 80060a4:	f7ff fe22 	bl	8005cec <ELClientMqtt_ConnectedCbRegister>
  ELClientMqtt_DisconnectedCbRegister(mqttDisconnected);
 80060a8:	4807      	ldr	r0, [pc, #28]	; (80060c8 <Mqtt_Init+0x34>)
 80060aa:	f7ff fe2f 	bl	8005d0c <ELClientMqtt_DisconnectedCbRegister>
  ELClientMqtt_PublishedCbRegister(mqttPublished);
 80060ae:	4807      	ldr	r0, [pc, #28]	; (80060cc <Mqtt_Init+0x38>)
 80060b0:	f7ff fe3c 	bl	8005d2c <ELClientMqtt_PublishedCbRegister>
  ELClientMqtt_DataCbRegister(mqttData);
 80060b4:	4806      	ldr	r0, [pc, #24]	; (80060d0 <Mqtt_Init+0x3c>)
 80060b6:	f7ff fe49 	bl	8005d4c <ELClientMqtt_DataCbRegister>
}
 80060ba:	bf00      	nop
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	08006125 	.word	0x08006125
 80060c4:	08006141 	.word	0x08006141
 80060c8:	08006161 	.word	0x08006161
 80060cc:	080061b5 	.word	0x080061b5
 80060d0:	08006181 	.word	0x08006181

080060d4 <Mqtt_Publish>:

void Mqtt_Publish(const char* topic, const uint8_t* data, const uint16_t len)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  ELClientMqtt_publish(topic, data, len, 0, 0);
 80060e2:	88fa      	ldrh	r2, [r7, #6]
 80060e4:	2300      	movs	r3, #0
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	2300      	movs	r3, #0
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff fe8c 	bl	8005e0a <ELClientMqtt_publish>
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <Mqtt_Sync>:

void Mqtt_Sync()
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
  BOOL ok = FALSE;
 8006100:	2300      	movs	r3, #0
 8006102:	71fb      	strb	r3, [r7, #7]
  do{
	 ok = ELClient_Sync();      // sync up with esp-link, blocks for up to 2 seconds
 8006104:	f7ff fc2a 	bl	800595c <ELClient_Sync>
 8006108:	4603      	mov	r3, r0
 800610a:	71fb      	strb	r3, [r7, #7]
	 osDelay(1000);
 800610c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006110:	f7fc fd6b 	bl	8002bea <osDelay>
  } while(!ok);
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f4      	beq.n	8006104 <Mqtt_Sync+0xa>
}
 800611a:	bf00      	nop
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <wifiStatusCb>:


//============================ LOCAL FUNCTIONS ===============================
// Callback made from esp-link to notify of wifi status changes
void wifiStatusCb(void* arg)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	Response_popArg(&status, 1);
 800612c:	f107 030f 	add.w	r3, r7, #15
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fe9c 	bl	8005e70 <Response_popArg>
		DBG_PRINTF("WIFI CONNECTED");
	} else {
		DBG_PRINTF("WIFI NOT READY: ");
		DBG_PRINTF("%d", status);
	}
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <mqttConnected>:

// Callback when MQTT is connected
void mqttConnected(void* response)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  DBG_PRINTF("MQTT connected!");

  connected = TRUE;
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <mqttConnected+0x1c>)
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20004620 	.word	0x20004620

08006160 <mqttDisconnected>:

// Callback when MQTT is disconnected
void mqttDisconnected(void* response)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  DBG_PRINTF("MQTT disconnected");
  connected = FALSE;
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <mqttDisconnected+0x1c>)
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20004620 	.word	0x20004620

08006180 <mqttData>:

// Callback when an MQTT message arrives for one of our subscriptions
void mqttData(void* response)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint16_t  payloadLen = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	81fb      	strh	r3, [r7, #14]

//  ELClientResponse *res = (ELClientResponse *)response;
  DBG_PRINTF("Received: topic=");
  Response_popBuffer(&topic[0], &payloadLen);
 800618c:	f107 030e 	add.w	r3, r7, #14
 8006190:	4619      	mov	r1, r3
 8006192:	4806      	ldr	r0, [pc, #24]	; (80061ac <mqttData+0x2c>)
 8006194:	f7ff fec6 	bl	8005f24 <Response_popBuffer>
  DUMP_BUFFER(topic, MQTT_FRAME_LEN);

  Response_popBuffer(&data[0], &payloadLen);
 8006198:	f107 030e 	add.w	r3, r7, #14
 800619c:	4619      	mov	r1, r3
 800619e:	4804      	ldr	r0, [pc, #16]	; (80061b0 <mqttData+0x30>)
 80061a0:	f7ff fec0 	bl	8005f24 <Response_popBuffer>
  DBG_PRINTF("Payload len = %d\r\n", payloadLen);
  DBG_PRINTF("data=");
  DUMP_BUFFER(data, MQTT_FRAME_LEN);
}
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20004624 	.word	0x20004624
 80061b0:	200046a4 	.word	0x200046a4

080061b4 <mqttPublished>:

void mqttPublished(void* response)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	DBG_PRINTF("MQTT published");
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <LL_USART_IsActiveFlag_TC>:
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f043 0220 	orr.w	r2, r3, #32
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60da      	str	r2, [r3, #12]
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60da      	str	r2, [r3, #12]
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60da      	str	r2, [r3, #12]
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	460b      	mov	r3, r1
 8006258:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800625a:	78fa      	ldrb	r2, [r7, #3]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	605a      	str	r2, [r3, #4]
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <vMBPortSerialEnable>:
//extern UART_HandleTypeDef huart2;
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	460a      	mov	r2, r1
 8006276:	71fb      	strb	r3, [r7, #7]
 8006278:	4613      	mov	r3, r2
 800627a:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <vMBPortSerialEnable+0x1e>
	  LL_USART_EnableIT_RXNE(USART2);
 8006282:	480a      	ldr	r0, [pc, #40]	; (80062ac <vMBPortSerialEnable+0x40>)
 8006284:	f7ff ffb3 	bl	80061ee <LL_USART_EnableIT_RXNE>
 8006288:	e002      	b.n	8006290 <vMBPortSerialEnable+0x24>
  } else {
	  LL_USART_DisableIT_TXE(USART2);
 800628a:	4808      	ldr	r0, [pc, #32]	; (80062ac <vMBPortSerialEnable+0x40>)
 800628c:	f7ff ffcf 	bl	800622e <LL_USART_DisableIT_TXE>
  }
  
  if (xTxEnable) {    
 8006290:	79bb      	ldrb	r3, [r7, #6]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <vMBPortSerialEnable+0x32>
	  LL_USART_EnableIT_TXE(USART2);
 8006296:	4805      	ldr	r0, [pc, #20]	; (80062ac <vMBPortSerialEnable+0x40>)
 8006298:	f7ff ffb9 	bl	800620e <LL_USART_EnableIT_TXE>
  } else {
	  LL_USART_DisableIT_TXE(USART2);
  }  
}
 800629c:	e002      	b.n	80062a4 <vMBPortSerialEnable+0x38>
	  LL_USART_DisableIT_TXE(USART2);
 800629e:	4803      	ldr	r0, [pc, #12]	; (80062ac <vMBPortSerialEnable+0x40>)
 80062a0:	f7ff ffc5 	bl	800622e <LL_USART_DisableIT_TXE>
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40004400 	.word	0x40004400

080062b0 <xPortSerialPutByte>:
  return TRUE;
}
 
BOOL
xPortSerialPutByte( CHAR ucByte )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  LL_USART_TransmitData8(USART2, ucByte);
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	4619      	mov	r1, r3
 80062be:	4807      	ldr	r0, [pc, #28]	; (80062dc <xPortSerialPutByte+0x2c>)
 80062c0:	f7ff ffc5 	bl	800624e <LL_USART_TransmitData8>
  while(!LL_USART_IsActiveFlag_TC(USART2)) { };
 80062c4:	bf00      	nop
 80062c6:	4805      	ldr	r0, [pc, #20]	; (80062dc <xPortSerialPutByte+0x2c>)
 80062c8:	f7ff ff7e 	bl	80061c8 <LL_USART_IsActiveFlag_TC>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f9      	beq.n	80062c6 <xPortSerialPutByte+0x16>
  return TRUE;
 80062d2:	2301      	movs	r3, #1
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40004400 	.word	0x40004400

080062e0 <__libc_init_array>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	4d0d      	ldr	r5, [pc, #52]	; (8006318 <__libc_init_array+0x38>)
 80062e4:	4c0d      	ldr	r4, [pc, #52]	; (800631c <__libc_init_array+0x3c>)
 80062e6:	1b64      	subs	r4, r4, r5
 80062e8:	10a4      	asrs	r4, r4, #2
 80062ea:	2600      	movs	r6, #0
 80062ec:	42a6      	cmp	r6, r4
 80062ee:	d109      	bne.n	8006304 <__libc_init_array+0x24>
 80062f0:	4d0b      	ldr	r5, [pc, #44]	; (8006320 <__libc_init_array+0x40>)
 80062f2:	4c0c      	ldr	r4, [pc, #48]	; (8006324 <__libc_init_array+0x44>)
 80062f4:	f000 f82e 	bl	8006354 <_init>
 80062f8:	1b64      	subs	r4, r4, r5
 80062fa:	10a4      	asrs	r4, r4, #2
 80062fc:	2600      	movs	r6, #0
 80062fe:	42a6      	cmp	r6, r4
 8006300:	d105      	bne.n	800630e <__libc_init_array+0x2e>
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	f855 3b04 	ldr.w	r3, [r5], #4
 8006308:	4798      	blx	r3
 800630a:	3601      	adds	r6, #1
 800630c:	e7ee      	b.n	80062ec <__libc_init_array+0xc>
 800630e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006312:	4798      	blx	r3
 8006314:	3601      	adds	r6, #1
 8006316:	e7f2      	b.n	80062fe <__libc_init_array+0x1e>
 8006318:	08006418 	.word	0x08006418
 800631c:	08006418 	.word	0x08006418
 8006320:	08006418 	.word	0x08006418
 8006324:	0800641c 	.word	0x0800641c

08006328 <memcpy>:
 8006328:	440a      	add	r2, r1
 800632a:	4291      	cmp	r1, r2
 800632c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006330:	d100      	bne.n	8006334 <memcpy+0xc>
 8006332:	4770      	bx	lr
 8006334:	b510      	push	{r4, lr}
 8006336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800633a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633e:	4291      	cmp	r1, r2
 8006340:	d1f9      	bne.n	8006336 <memcpy+0xe>
 8006342:	bd10      	pop	{r4, pc}

08006344 <memset>:
 8006344:	4402      	add	r2, r0
 8006346:	4603      	mov	r3, r0
 8006348:	4293      	cmp	r3, r2
 800634a:	d100      	bne.n	800634e <memset+0xa>
 800634c:	4770      	bx	lr
 800634e:	f803 1b01 	strb.w	r1, [r3], #1
 8006352:	e7f9      	b.n	8006348 <memset+0x4>

08006354 <_init>:
 8006354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006356:	bf00      	nop
 8006358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635a:	bc08      	pop	{r3}
 800635c:	469e      	mov	lr, r3
 800635e:	4770      	bx	lr

08006360 <_fini>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr
