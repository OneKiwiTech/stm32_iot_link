
esp-link-client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007320  08007320  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007328  08007328  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007328  08007328  00017328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800732c  0800732c  0001732c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004d34  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004da8  20004da8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020465  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005412  00000000  00000000  00040509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  00045920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  000470a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f9e  00000000  00000000  000485c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7b0  00000000  00000000  00070566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ab0  00000000  00000000  0008bd16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016d7c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000625c  00000000  00000000  0016d81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007128 	.word	0x08007128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007128 	.word	0x08007128

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000090 	.word	0x20000090
 80005c8:	200000e4 	.word	0x200000e4

080005cc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <vApplicationGetTimerTaskMemory+0x30>)
 80005e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ea:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	200002e4 	.word	0x200002e4
 80005fc:	20000338 	.word	0x20000338

08000600 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b08e      	sub	sp, #56	; 0x38
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  Mqtt_Init();
 8000606:	f005 ff5f 	bl	80064c8 <Mqtt_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_FREERTOS_Init+0x5c>)
 800060c:	f107 041c 	add.w	r4, r7, #28
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fb56 	bl	8002cd6 <osThreadCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <MX_FREERTOS_Init+0x60>)
 800062e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ELClientRxTask, StartELClientRxTask, osPriorityNormal, 0, 512);
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_FREERTOS_Init+0x64>)
 8000632:	463c      	mov	r4, r7
 8000634:	461d      	mov	r5, r3
 8000636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ELClientRxTaskHandle = osThreadCreate(osThread(ELClientRxTask), NULL);
 8000642:	463b      	mov	r3, r7
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fb45 	bl	8002cd6 <osThreadCreate>
 800064c:	4603      	mov	r3, r0
 800064e:	4a06      	ldr	r2, [pc, #24]	; (8000668 <MX_FREERTOS_Init+0x68>)
 8000650:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8000652:	bf00      	nop
 8000654:	3738      	adds	r7, #56	; 0x38
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	0800715c 	.word	0x0800715c
 8000660:	20004ab4 	.word	0x20004ab4
 8000664:	08007178 	.word	0x08007178
 8000668:	20004ab8 	.word	0x20004ab8

0800066c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b092      	sub	sp, #72	; 0x48
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  static uint32_t  pubCounter = 0;
  char   pubBuffer[64] = {0};
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	223c      	movs	r2, #60	; 0x3c
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f006 f8ef 	bl	8006864 <memset>

  /* Handshake to check SLIP connection*/
  Mqtt_Sync();
 8000686:	f005 ff5f 	bl	8006548 <Mqtt_Sync>
  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); /* Ready indicator*/
 800068a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068e:	4816      	ldr	r0, [pc, #88]	; (80006e8 <StartDefaultTask+0x7c>)
 8000690:	f000 fdd8 	bl	8001244 <HAL_GPIO_TogglePin>

  /* Send MQTT request setup */
  ELClientMqtt_setup();
 8000694:	f005 fbea 	bl	8005e6c <ELClientMqtt_setup>

  ELClientMqtt_subscribe("/esp-link/command", 1);
 8000698:	2101      	movs	r1, #1
 800069a:	4814      	ldr	r0, [pc, #80]	; (80006ec <StartDefaultTask+0x80>)
 800069c:	f005 fc1a 	bl	8005ed4 <ELClientMqtt_subscribe>
  /* Infinite loop */
  for(;;)
  {
    if ( Mqtt_IsConnected() )
 80006a0:	f005 ff46 	bl	8006530 <Mqtt_IsConnected>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d019      	beq.n	80006de <StartDefaultTask+0x72>
    {
      sprintf(pubBuffer, "Counter = %d\r\n", ++pubCounter);
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <StartDefaultTask+0x84>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <StartDefaultTask+0x84>)
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <StartDefaultTask+0x84>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	490d      	ldr	r1, [pc, #52]	; (80006f4 <StartDefaultTask+0x88>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 f8d8 	bl	8006874 <siprintf>
	    Mqtt_Publish("/esp-link/data", pubBuffer, strlen(pubBuffer));
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fd8b 	bl	80001e4 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4619      	mov	r1, r3
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <StartDefaultTask+0x8c>)
 80006da:	f005 ff15 	bl	8006508 <Mqtt_Publish>
    }
	  osDelay(3000);
 80006de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006e2:	f002 fb44 	bl	8002d6e <osDelay>
    if ( Mqtt_IsConnected() )
 80006e6:	e7db      	b.n	80006a0 <StartDefaultTask+0x34>
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	08007194 	.word	0x08007194
 80006f0:	20000738 	.word	0x20000738
 80006f4:	080071a8 	.word	0x080071a8
 80006f8:	080071b8 	.word	0x080071b8

080006fc <StartELClientRxTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartELClientRxTask(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	osDelay(500);
 8000704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000708:	f002 fb31 	bl	8002d6e <osDelay>
	for (;;)
	{
		 ELClient_Process(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f005 f9f7 	bl	8005b00 <ELClient_Process>
 8000712:	e7fb      	b.n	800070c <StartELClientRxTask+0x10>

08000714 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	041a      	lsls	r2, r3, #16
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	619a      	str	r2, [r3, #24]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800073e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000740:	4907      	ldr	r1, [pc, #28]	; (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800074a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4013      	ands	r3, r2
 8000750:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	40023800 	.word	0x40023800

08000764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800077a:	2080      	movs	r0, #128	; 0x80
 800077c:	f7ff ffda 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff ffd7 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff ffd4 	bl	8000734 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800078c:	2008      	movs	r0, #8
 800078e:	f7ff ffd1 	bl	8000734 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin);
 8000792:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_GPIO_Init+0x60>)
 8000798:	f7ff ffbc 	bl	8000714 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin;
 800079c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007a2:	2301      	movs	r3, #1
 80007a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_GPIO_Init+0x60>)
 80007b8:	f001 fda3 	bl	8002302 <LL_GPIO_Init>

}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fc16 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f80e 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff ffc6 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d8:	f000 fb24 	bl	8000e24 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80007dc:	f000 fa18 	bl	8000c10 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 80007e0:	f000 fb80 	bl	8000ee4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007e4:	f7ff ff0c 	bl	8000600 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80007e8:	f002 fa6e 	bl	8002cc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <main+0x24>
	...

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 f830 	bl	8006864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <SystemClock_Config+0xc8>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <SystemClock_Config+0xc8>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <SystemClock_Config+0xc8>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <SystemClock_Config+0xcc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a20      	ldr	r2, [pc, #128]	; (80008bc <SystemClock_Config+0xcc>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <SystemClock_Config+0xcc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000864:	2348      	movs	r3, #72	; 0x48
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fcff 	bl	8001278 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000880:	f000 f830 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2302      	movs	r3, #2
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2102      	movs	r1, #2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 ff61 	bl	8001768 <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008ac:	f000 f81a 	bl	80008e4 <Error_Handler>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3750      	adds	r7, #80	; 0x50
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 fbb5 	bl	8001040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40001000 	.word	0x40001000

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_MspInit+0x54>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <HAL_MspInit+0x54>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x54>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_MspInit+0x54>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_MspInit+0x54>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	f06f 0001 	mvn.w	r0, #1
 8000936:	f000 fc5b 	bl	80011f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	2036      	movs	r0, #54	; 0x36
 800095e:	f000 fc47 	bl	80011f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000962:	2036      	movs	r0, #54	; 0x36
 8000964:	f000 fc60 	bl	8001228 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <HAL_InitTick+0xa4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <HAL_InitTick+0xa4>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_InitTick+0xa4>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000984:	f107 0210 	add.w	r2, r7, #16
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f8d2 	bl	8001b38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000994:	f001 f8bc 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8000998:	4603      	mov	r3, r0
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a0:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_InitTick+0xa8>)
 80009a2:	fba2 2303 	umull	r2, r3, r2, r3
 80009a6:	0c9b      	lsrs	r3, r3, #18
 80009a8:	3b01      	subs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_InitTick+0xac>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <HAL_InitTick+0xb0>)
 80009b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_InitTick+0xac>)
 80009b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_InitTick+0xac>)
 80009bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_InitTick+0xac>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_InitTick+0xac>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <HAL_InitTick+0xac>)
 80009ce:	f001 f8e5 	bl	8001b9c <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d104      	bne.n	80009e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009d8:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_InitTick+0xac>)
 80009da:	f001 f939 	bl	8001c50 <HAL_TIM_Base_Start_IT>
 80009de:	4603      	mov	r3, r0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	431bde83 	.word	0x431bde83
 80009f4:	20004abc 	.word	0x20004abc
 80009f8:	40001000 	.word	0x40001000

080009fc <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <LL_USART_ClearFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f06f 0220 	mvn.w	r2, #32
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uint8_t  data = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
  data = 0xFF & (USART2->DR);
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <USART2_IRQHandler+0x50>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	71fb      	strb	r3, [r7, #7]

  /* User function liked ...FromISR from interrupt handler */
  xQueueSendFromISR( xSerialQueueHandle, &data, &xHigherPriorityTaskWoken );
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <USART2_IRQHandler+0x54>)
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	463a      	mov	r2, r7
 8000a84:	1df9      	adds	r1, r7, #7
 8000a86:	2300      	movs	r3, #0
 8000a88:	f002 fc6e 	bl	8003368 <xQueueGenericSendFromISR>

  LL_USART_ClearFlag_RXNE(USART2);
 8000a8c:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <USART2_IRQHandler+0x50>)
 8000a8e:	f7ff ffc7 	bl	8000a20 <LL_USART_ClearFlag_RXNE>
  LL_USART_ClearFlag_ORE(USART2);
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <USART2_IRQHandler+0x50>)
 8000a94:	f7ff ffb2 	bl	80009fc <LL_USART_ClearFlag_ORE>

  /* Enable switch context */
  if ( xHigherPriorityTaskWoken == pdTRUE ) {
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d107      	bne.n	8000aae <USART2_IRQHandler+0x46>
	  taskYIELD();
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <USART2_IRQHandler+0x58>)
 8000aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	f3bf 8f4f 	dsb	sy
 8000aaa:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	20004d94 	.word	0x20004d94
 8000ac0:	e000ed04 	.word	0xe000ed04

08000ac4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM6_DAC_IRQHandler+0x10>)
 8000ada:	f001 f929 	bl	8001d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20004abc 	.word	0x20004abc

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f005 fe5e 	bl	80067d8 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20020000 	.word	0x20020000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	2000073c 	.word	0x2000073c
 8000b50:	20004da8 	.word	0x20004da8

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	605a      	str	r2, [r3, #4]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bec:	4907      	ldr	r1, [pc, #28]	; (8000c0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40023800 	.word	0x40023800

08000c10 <MX_TIM7_Init>:

/* USER CODE END 0 */

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8000c24:	2020      	movs	r0, #32
 8000c26:	f7ff ffdb 	bl	8000be0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c36:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <MX_TIM7_Init+0x50>)
 8000c3e:	f001 fd47 	bl	80026d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <MX_TIM7_Init+0x50>)
 8000c44:	f7ff ff98 	bl	8000b78 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_TIM7_Init+0x50>)
 8000c4c:	f7ff ffa4 	bl	8000b98 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <MX_TIM7_Init+0x50>)
 8000c52:	f7ff ffb4 	bl	8000bbe <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40001400 	.word	0x40001400

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db0b      	blt.n	8000caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 021f 	and.w	r2, r3, #31
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <__NVIC_EnableIRQ+0x38>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	db0a      	blt.n	8000ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	490c      	ldr	r1, [pc, #48]	; (8000d08 <__NVIC_SetPriority+0x4c>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce4:	e00a      	b.n	8000cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4908      	ldr	r1, [pc, #32]	; (8000d0c <__NVIC_SetPriority+0x50>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	761a      	strb	r2, [r3, #24]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_USART_Enable>:
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60da      	str	r2, [r3, #12]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <LL_USART_ConfigAsyncMode>:
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	615a      	str	r2, [r3, #20]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <LL_AHB1_GRP1_EnableClock>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40023800 	.word	0x40023800

08000df4 <LL_APB1_GRP1_EnableClock>:
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40023800 	.word	0x40023800

08000e24 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	; 0x38
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	615a      	str	r2, [r3, #20]
 8000e3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000e4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e52:	f7ff ffcf 	bl	8000df4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff ffb4 	bl	8000dc4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e60:	2302      	movs	r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e70:	2307      	movs	r3, #7
 8000e72:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <MX_USART2_UART_Init+0xb8>)
 8000e7a:	f001 fa42 	bl	8002302 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000e7e:	f7ff fef1 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2200      	movs	r2, #0
 8000e86:	2105      	movs	r1, #5
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff41 	bl	8000d10 <NVIC_EncodePriority>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4619      	mov	r1, r3
 8000e92:	2026      	movs	r0, #38	; 0x26
 8000e94:	f7ff ff12 	bl	8000cbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000e98:	2026      	movs	r0, #38	; 0x26
 8000e9a:	f7ff fef1 	bl	8000c80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e9e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000ea2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_USART2_UART_Init+0xbc>)
 8000ec4:	f001 fe68 	bl	8002b98 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART2_UART_Init+0xbc>)
 8000eca:	f7ff ff64 	bl	8000d96 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_USART2_UART_Init+0xbc>)
 8000ed0:	f7ff ff51 	bl	8000d76 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3738      	adds	r7, #56	; 0x38
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000f0e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f12:	f7ff ff6f 	bl	8000df4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f16:	2002      	movs	r0, #2
 8000f18:	f7ff ff54 	bl	8000dc4 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8000f1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f22:	2302      	movs	r3, #2
 8000f24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f32:	2307      	movs	r3, #7
 8000f34:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4819      	ldr	r0, [pc, #100]	; (8000fa0 <MX_USART3_UART_Init+0xbc>)
 8000f3c:	f001 f9e1 	bl	8002302 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000f40:	f7ff fe90 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2200      	movs	r2, #0
 8000f48:	2105      	movs	r1, #5
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fee0 	bl	8000d10 <NVIC_EncodePriority>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4619      	mov	r1, r3
 8000f54:	2027      	movs	r0, #39	; 0x27
 8000f56:	f7ff feb1 	bl	8000cbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8000f5a:	2027      	movs	r0, #39	; 0x27
 8000f5c:	f7ff fe90 	bl	8000c80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000f60:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f64:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f72:	230c      	movs	r3, #12
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <MX_USART3_UART_Init+0xc0>)
 8000f86:	f001 fe07 	bl	8002b98 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_USART3_UART_Init+0xc0>)
 8000f8c:	f7ff ff03 	bl	8000d96 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_USART3_UART_Init+0xc0>)
 8000f92:	f7ff fef0 	bl	8000d76 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3738      	adds	r7, #56	; 0x38
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40004800 	.word	0x40004800

08000fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fae:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc4:	4c0b      	ldr	r4, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fd2:	f7ff fdbf 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f005 fc05 	bl	80067e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fda:	f7ff fbf5 	bl	80007c8 <main>
  bx  lr    
 8000fde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fec:	08007330 	.word	0x08007330
  ldr r2, =_sbss
 8000ff0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ff4:	20004da8 	.word	0x20004da8

08000ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <HAL_Init+0x40>)
 8001006:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800100a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_Init+0x40>)
 8001012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_Init+0x40>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f8d8 	bl	80011da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102a:	200f      	movs	r0, #15
 800102c:	f7ff fc8c 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001030:	f7ff fc5e 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023c00 	.word	0x40023c00

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20004b04 	.word	0x20004b04

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20004b04 	.word	0x20004b04

08001080 <__NVIC_SetPriorityGrouping>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff4c 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001202:	f7ff ff61 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001206:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	6978      	ldr	r0, [r7, #20]
 800120e:	f7ff ffb1 	bl	8001174 <NVIC_EncodePriority>
 8001212:	4602      	mov	r2, r0
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff80 	bl	8001120 <__NVIC_SetPriority>
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff54 	bl	80010e4 <__NVIC_EnableIRQ>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	43d9      	mvns	r1, r3
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	400b      	ands	r3, r1
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e264      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d075      	beq.n	8001382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001296:	4ba3      	ldr	r3, [pc, #652]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d00c      	beq.n	80012bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a2:	4ba0      	ldr	r3, [pc, #640]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d112      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ae:	4b9d      	ldr	r3, [pc, #628]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ba:	d10b      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	4b99      	ldr	r3, [pc, #612]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d05b      	beq.n	8001380 <HAL_RCC_OscConfig+0x108>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d157      	bne.n	8001380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e23f      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d106      	bne.n	80012ec <HAL_RCC_OscConfig+0x74>
 80012de:	4b91      	ldr	r3, [pc, #580]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a90      	ldr	r2, [pc, #576]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e01d      	b.n	8001328 <HAL_RCC_OscConfig+0xb0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x98>
 80012f6:	4b8b      	ldr	r3, [pc, #556]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a8a      	ldr	r2, [pc, #552]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b88      	ldr	r3, [pc, #544]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a87      	ldr	r2, [pc, #540]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0xb0>
 8001310:	4b84      	ldr	r3, [pc, #528]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a83      	ldr	r2, [pc, #524]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b81      	ldr	r3, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a80      	ldr	r2, [pc, #512]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fe9a 	bl	8001068 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fe96 	bl	8001068 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	; 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e204      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0xc0>
 8001356:	e014      	b.n	8001382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fe86 	bl	8001068 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fe82 	bl	8001068 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e1f0      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	4b6c      	ldr	r3, [pc, #432]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0xe8>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d063      	beq.n	8001456 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138e:	4b65      	ldr	r3, [pc, #404]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139a:	4b62      	ldr	r3, [pc, #392]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d11c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d116      	bne.n	80013e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	4b5c      	ldr	r3, [pc, #368]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <HAL_RCC_OscConfig+0x152>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e1c4      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b56      	ldr	r3, [pc, #344]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4952      	ldr	r1, [pc, #328]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	e03a      	b.n	8001456 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e8:	4b4f      	ldr	r3, [pc, #316]	; (8001528 <HAL_RCC_OscConfig+0x2b0>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff fe3b 	bl	8001068 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff fe37 	bl	8001068 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e1a5      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	4b46      	ldr	r3, [pc, #280]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4940      	ldr	r1, [pc, #256]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	4313      	orrs	r3, r2
 8001426:	600b      	str	r3, [r1, #0]
 8001428:	e015      	b.n	8001456 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142a:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <HAL_RCC_OscConfig+0x2b0>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fe1a 	bl	8001068 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001438:	f7ff fe16 	bl	8001068 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e184      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	4b36      	ldr	r3, [pc, #216]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d030      	beq.n	80014c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d016      	beq.n	8001498 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146a:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_RCC_OscConfig+0x2b4>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001470:	f7ff fdfa 	bl	8001068 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001478:	f7ff fdf6 	bl	8001068 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e164      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x200>
 8001496:	e015      	b.n	80014c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x2b4>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fde3 	bl	8001068 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a6:	f7ff fddf 	bl	8001068 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e14d      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a0 	beq.w	8001612 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10f      	bne.n	8001502 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fe:	2301      	movs	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_OscConfig+0x2b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d121      	bne.n	8001552 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_RCC_OscConfig+0x2b8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_RCC_OscConfig+0x2b8>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151a:	f7ff fda5 	bl	8001068 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	e011      	b.n	8001546 <HAL_RCC_OscConfig+0x2ce>
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	42470000 	.word	0x42470000
 800152c:	42470e80 	.word	0x42470e80
 8001530:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001534:	f7ff fd98 	bl	8001068 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e106      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	4b85      	ldr	r3, [pc, #532]	; (800175c <HAL_RCC_OscConfig+0x4e4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d106      	bne.n	8001568 <HAL_RCC_OscConfig+0x2f0>
 800155a:	4b81      	ldr	r3, [pc, #516]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a80      	ldr	r2, [pc, #512]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
 8001566:	e01c      	b.n	80015a2 <HAL_RCC_OscConfig+0x32a>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x312>
 8001570:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	4a7a      	ldr	r2, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6713      	str	r3, [r2, #112]	; 0x70
 800157c:	4b78      	ldr	r3, [pc, #480]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a77      	ldr	r2, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
 8001588:	e00b      	b.n	80015a2 <HAL_RCC_OscConfig+0x32a>
 800158a:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a74      	ldr	r2, [pc, #464]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
 8001596:	4b72      	ldr	r3, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a71      	ldr	r2, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 800159c:	f023 0304 	bic.w	r3, r3, #4
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d015      	beq.n	80015d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fd5d 	bl	8001068 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff fd59 	bl	8001068 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0c5      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c8:	4b65      	ldr	r3, [pc, #404]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0ee      	beq.n	80015b2 <HAL_RCC_OscConfig+0x33a>
 80015d4:	e014      	b.n	8001600 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fd47 	bl	8001068 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff fd43 	bl	8001068 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0af      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ee      	bne.n	80015de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d105      	bne.n	8001612 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001606:	4b56      	ldr	r3, [pc, #344]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a55      	ldr	r2, [pc, #340]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 800160c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 809b 	beq.w	8001752 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b08      	cmp	r3, #8
 8001626:	d05c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d141      	bne.n	80016b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <HAL_RCC_OscConfig+0x4ec>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fd17 	bl	8001068 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff fd13 	bl	8001068 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e081      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69da      	ldr	r2, [r3, #28]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	019b      	lsls	r3, r3, #6
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	3b01      	subs	r3, #1
 8001676:	041b      	lsls	r3, r3, #16
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	061b      	lsls	r3, r3, #24
 8001680:	4937      	ldr	r1, [pc, #220]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <HAL_RCC_OscConfig+0x4ec>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fcec 	bl	8001068 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fce8 	bl	8001068 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e056      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x41c>
 80016b2:	e04e      	b.n	8001752 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fcd5 	bl	8001068 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff fcd1 	bl	8001068 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e03f      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x44a>
 80016e0:	e037      	b.n	8001752 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e032      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <HAL_RCC_OscConfig+0x4e8>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d028      	beq.n	800174e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d121      	bne.n	800174e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d11a      	bne.n	800174e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800171e:	4013      	ands	r3, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001724:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001726:	4293      	cmp	r3, r2
 8001728:	d111      	bne.n	800174e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	085b      	lsrs	r3, r3, #1
 8001736:	3b01      	subs	r3, #1
 8001738:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d107      	bne.n	800174e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40007000 	.word	0x40007000
 8001760:	40023800 	.word	0x40023800
 8001764:	42470060 	.word	0x42470060

08001768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cc      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800177c:	4b68      	ldr	r3, [pc, #416]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d90c      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178a:	4b65      	ldr	r3, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d044      	beq.n	8001888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d119      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d003      	beq.n	8001826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	2b03      	cmp	r3, #3
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e067      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f023 0203 	bic.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4934      	ldr	r1, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001858:	f7ff fc06 	bl	8001068 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	e00a      	b.n	8001876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f7ff fc02 	bl	8001068 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e04f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	429a      	cmp	r2, r3
 8001886:	d1eb      	bne.n	8001860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d20c      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f81a 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	080072d4 	.word	0x080072d4
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	2300      	movs	r3, #0
 8001946:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194c:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d00d      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x40>
 8001958:	2b08      	cmp	r3, #8
 800195a:	f200 80bd 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x34>
 8001962:	2b04      	cmp	r3, #4
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x3a>
 8001966:	e0b7      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800196a:	60bb      	str	r3, [r7, #8]
       break;
 800196c:	e0b7      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001970:	60bb      	str	r3, [r7, #8]
      break;
 8001972:	e0b4      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001974:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800197c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197e:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d04d      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b58      	ldr	r3, [pc, #352]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	461a      	mov	r2, r3
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	f240 10ff 	movw	r0, #511	; 0x1ff
 800199a:	f04f 0100 	mov.w	r1, #0
 800199e:	ea02 0800 	and.w	r8, r2, r0
 80019a2:	ea03 0901 	and.w	r9, r3, r1
 80019a6:	4640      	mov	r0, r8
 80019a8:	4649      	mov	r1, r9
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	014b      	lsls	r3, r1, #5
 80019b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019b8:	0142      	lsls	r2, r0, #5
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	ebb0 0008 	subs.w	r0, r0, r8
 80019c2:	eb61 0109 	sbc.w	r1, r1, r9
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	018b      	lsls	r3, r1, #6
 80019d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019d4:	0182      	lsls	r2, r0, #6
 80019d6:	1a12      	subs	r2, r2, r0
 80019d8:	eb63 0301 	sbc.w	r3, r3, r1
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	00d9      	lsls	r1, r3, #3
 80019e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019ea:	00d0      	lsls	r0, r2, #3
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	eb12 0208 	adds.w	r2, r2, r8
 80019f4:	eb43 0309 	adc.w	r3, r3, r9
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	0259      	lsls	r1, r3, #9
 8001a02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a06:	0250      	lsls	r0, r2, #9
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	f7fe fc42 	bl	80002a0 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e04a      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	ea02 0400 	and.w	r4, r2, r0
 8001a3e:	ea03 0501 	and.w	r5, r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	014b      	lsls	r3, r1, #5
 8001a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a54:	0142      	lsls	r2, r0, #5
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	1b00      	subs	r0, r0, r4
 8001a5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	018b      	lsls	r3, r1, #6
 8001a6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a6e:	0182      	lsls	r2, r0, #6
 8001a70:	1a12      	subs	r2, r2, r0
 8001a72:	eb63 0301 	sbc.w	r3, r3, r1
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	00d9      	lsls	r1, r3, #3
 8001a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a84:	00d0      	lsls	r0, r2, #3
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	1912      	adds	r2, r2, r4
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	0299      	lsls	r1, r3, #10
 8001a9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a9e:	0290      	lsls	r0, r2, #10
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	f7fe fbf6 	bl	80002a0 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ada:	60bb      	str	r3, [r7, #8]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	68bb      	ldr	r3, [r7, #8]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	00f42400 	.word	0x00f42400
 8001af4:	007a1200 	.word	0x007a1200

08001af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b14:	f7ff fff0 	bl	8001af8 <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	0a9b      	lsrs	r3, r3, #10
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	080072e4 	.word	0x080072e4

08001b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	220f      	movs	r2, #15
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_RCC_GetClockConfig+0x60>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0207 	and.w	r2, r3, #7
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f839 	bl	8001c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 f9d8 	bl	8001f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d001      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e04e      	b.n	8001d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d022      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c92:	d01d      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d018      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00e      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d009      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x80>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d111      	bne.n	8001cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d010      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf2:	e007      	b.n	8001d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40000800 	.word	0x40000800
 8001d20:	40000c00 	.word	0x40000c00
 8001d24:	40010400 	.word	0x40010400
 8001d28:	40014000 	.word	0x40014000
 8001d2c:	40001800 	.word	0x40001800

08001d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0202 	mvn.w	r2, #2
 8001d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8ee 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8e0 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8f1 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0204 	mvn.w	r2, #4
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8c4 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8b6 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8c7 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0208 	mvn.w	r2, #8
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f89a 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f88c 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f89d 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d122      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d11b      	bne.n	8001e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0210 	mvn.w	r2, #16
 8001e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f870 	bl	8001f54 <HAL_TIM_IC_CaptureCallback>
 8001e74:	e005      	b.n	8001e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f862 	bl	8001f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f873 	bl	8001f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0201 	mvn.w	r2, #1
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fd06 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebe:	2b80      	cmp	r3, #128	; 0x80
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d107      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f902 	bl	80020e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f838 	bl	8001f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b20      	cmp	r3, #32
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0220 	mvn.w	r2, #32
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8cc 	bl	80020d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fae:	d00f      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	; (80020a8 <TIM_Base_SetConfig+0x118>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00b      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3c      	ldr	r2, [pc, #240]	; (80020ac <TIM_Base_SetConfig+0x11c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <TIM_Base_SetConfig+0x120>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0x40>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3a      	ldr	r2, [pc, #232]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d108      	bne.n	8001fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2f      	ldr	r2, [pc, #188]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d027      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <TIM_Base_SetConfig+0x118>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d023      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <TIM_Base_SetConfig+0x11c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d01f      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <TIM_Base_SetConfig+0x120>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d017      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <TIM_Base_SetConfig+0x128>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <TIM_Base_SetConfig+0x12c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00f      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <TIM_Base_SetConfig+0x130>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00b      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a25      	ldr	r2, [pc, #148]	; (80020c4 <TIM_Base_SetConfig+0x134>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a24      	ldr	r2, [pc, #144]	; (80020c8 <TIM_Base_SetConfig+0x138>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a23      	ldr	r2, [pc, #140]	; (80020cc <TIM_Base_SetConfig+0x13c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <TIM_Base_SetConfig+0x114>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0xf8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <TIM_Base_SetConfig+0x124>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d103      	bne.n	8002090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	615a      	str	r2, [r3, #20]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40000800 	.word	0x40000800
 80020b0:	40000c00 	.word	0x40000c00
 80020b4:	40010400 	.word	0x40010400
 80020b8:	40014000 	.word	0x40014000
 80020bc:	40014400 	.word	0x40014400
 80020c0:	40014800 	.word	0x40014800
 80020c4:	40001800 	.word	0x40001800
 80020c8:	40001c00 	.word	0x40001c00
 80020cc:	40002000 	.word	0x40002000

080020d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_GPIO_SetPinMode>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2103      	movs	r1, #3
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	401a      	ands	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	61bb      	str	r3, [r7, #24]
  return result;
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	431a      	orrs	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	601a      	str	r2, [r3, #0]
}
 800214a:	bf00      	nop
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <LL_GPIO_SetPinOutputType>:
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_GPIO_SetPinSpeed>:
{
 8002186:	b480      	push	{r7}
 8002188:	b089      	sub	sp, #36	; 0x24
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	613b      	str	r3, [r7, #16]
  return result;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2103      	movs	r1, #3
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	61bb      	str	r3, [r7, #24]
  return result;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	431a      	orrs	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	609a      	str	r2, [r3, #8]
}
 80021d8:	bf00      	nop
 80021da:	3724      	adds	r7, #36	; 0x24
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_GPIO_SetPinPull>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	613b      	str	r3, [r7, #16]
  return result;
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2103      	movs	r1, #3
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	401a      	ands	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	61bb      	str	r3, [r7, #24]
  return result;
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	60da      	str	r2, [r3, #12]
}
 8002236:	bf00      	nop
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_GPIO_SetAFPin_0_7>:
{
 8002242:	b480      	push	{r7}
 8002244:	b089      	sub	sp, #36	; 0x24
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1a      	ldr	r2, [r3, #32]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	613b      	str	r3, [r7, #16]
  return result;
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	210f      	movs	r1, #15
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	401a      	ands	r2, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	61bb      	str	r3, [r7, #24]
  return result;
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	431a      	orrs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	621a      	str	r2, [r3, #32]
}
 8002294:	bf00      	nop
 8002296:	3724      	adds	r7, #36	; 0x24
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_GPIO_SetAFPin_8_15>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	613b      	str	r3, [r7, #16]
  return result;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	210f      	movs	r1, #15
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	401a      	ands	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	61bb      	str	r3, [r7, #24]
  return result;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b088      	sub	sp, #32
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	613b      	str	r3, [r7, #16]
  return result;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800232c:	e050      	b.n	80023d0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d042      	beq.n	80023ca <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d003      	beq.n	8002354 <LL_GPIO_Init+0x52>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d10d      	bne.n	8002370 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	461a      	mov	r2, r3
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff12 	bl	8002186 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fef3 	bl	8002156 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	461a      	mov	r2, r3
 8002376:	69b9      	ldr	r1, [r7, #24]
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff33 	bl	80021e4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d11a      	bne.n	80023bc <LL_GPIO_Init+0xba>
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	60bb      	str	r3, [r7, #8]
  return result;
 8002392:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b07      	cmp	r3, #7
 800239c:	d807      	bhi.n	80023ae <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	461a      	mov	r2, r3
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff4b 	bl	8002242 <LL_GPIO_SetAFPin_0_7>
 80023ac:	e006      	b.n	80023bc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	461a      	mov	r2, r3
 80023b4:	69b9      	ldr	r1, [r7, #24]
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff72 	bl	80022a0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	461a      	mov	r2, r3
 80023c2:	69b9      	ldr	r1, [r7, #24]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fe97 	bl	80020f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1a7      	bne.n	800232e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <LL_RCC_GetSysClkSource+0x18>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800

08002404 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <LL_RCC_GetAHBPrescaler+0x18>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800

0800243c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <LL_RCC_PLL_GetMainSource+0x18>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800

08002474 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <LL_RCC_PLL_GetN+0x18>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	40023800 	.word	0x40023800

08002490 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <LL_RCC_PLL_GetP+0x18>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <LL_RCC_PLL_GetDivider+0x18>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80024d0:	f000 f820 	bl	8002514 <RCC_GetSystemClockFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f840 	bl	8002564 <RCC_GetHCLKClockFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f84e 	bl	8002590 <RCC_GetPCLK1ClockFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f85a 	bl	80025b8 <RCC_GetPCLK2ClockFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60da      	str	r2, [r3, #12]
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800251e:	f7ff ff63 	bl	80023e8 <LL_RCC_GetSysClkSource>
 8002522:	4603      	mov	r3, r0
 8002524:	2b08      	cmp	r3, #8
 8002526:	d00c      	beq.n	8002542 <RCC_GetSystemClockFreq+0x2e>
 8002528:	2b08      	cmp	r3, #8
 800252a:	d80f      	bhi.n	800254c <RCC_GetSystemClockFreq+0x38>
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <RCC_GetSystemClockFreq+0x22>
 8002530:	2b04      	cmp	r3, #4
 8002532:	d003      	beq.n	800253c <RCC_GetSystemClockFreq+0x28>
 8002534:	e00a      	b.n	800254c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <RCC_GetSystemClockFreq+0x48>)
 8002538:	607b      	str	r3, [r7, #4]
      break;
 800253a:	e00a      	b.n	8002552 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <RCC_GetSystemClockFreq+0x4c>)
 800253e:	607b      	str	r3, [r7, #4]
      break;
 8002540:	e007      	b.n	8002552 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002542:	2008      	movs	r0, #8
 8002544:	f000 f84c 	bl	80025e0 <RCC_PLL_GetFreqDomain_SYS>
 8002548:	6078      	str	r0, [r7, #4]
      break;
 800254a:	e002      	b.n	8002552 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <RCC_GetSystemClockFreq+0x48>)
 800254e:	607b      	str	r3, [r7, #4]
      break;
 8002550:	bf00      	nop
  }

  return frequency;
 8002552:	687b      	ldr	r3, [r7, #4]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	00f42400 	.word	0x00f42400
 8002560:	007a1200 	.word	0x007a1200

08002564 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800256c:	f7ff ff4a 	bl	8002404 <LL_RCC_GetAHBPrescaler>
 8002570:	4603      	mov	r3, r0
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <RCC_GetHCLKClockFreq+0x28>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	461a      	mov	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	40d3      	lsrs	r3, r2
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	080072d4 	.word	0x080072d4

08002590 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002598:	f7ff ff42 	bl	8002420 <LL_RCC_GetAPB1Prescaler>
 800259c:	4603      	mov	r3, r0
 800259e:	0a9b      	lsrs	r3, r3, #10
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <RCC_GetPCLK1ClockFreq+0x24>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	461a      	mov	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	40d3      	lsrs	r3, r2
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	080072e4 	.word	0x080072e4

080025b8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80025c0:	f7ff ff3c 	bl	800243c <LL_RCC_GetAPB2Prescaler>
 80025c4:	4603      	mov	r3, r0
 80025c6:	0b5b      	lsrs	r3, r3, #13
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <RCC_GetPCLK2ClockFreq+0x24>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	461a      	mov	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	40d3      	lsrs	r3, r2
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	080072e4 	.word	0x080072e4

080025e0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80025f4:	f7ff ff30 	bl	8002458 <LL_RCC_PLL_GetMainSource>
 80025f8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002606:	d003      	beq.n	8002610 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002608:	e005      	b.n	8002616 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800260c:	617b      	str	r3, [r7, #20]
      break;
 800260e:	e005      	b.n	800261c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002612:	617b      	str	r3, [r7, #20]
      break;
 8002614:	e002      	b.n	800261c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002618:	617b      	str	r3, [r7, #20]
      break;
 800261a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d113      	bne.n	800264a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002622:	f7ff ff43 	bl	80024ac <LL_RCC_PLL_GetDivider>
 8002626:	4602      	mov	r2, r0
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fbb3 f4f2 	udiv	r4, r3, r2
 800262e:	f7ff ff21 	bl	8002474 <LL_RCC_PLL_GetN>
 8002632:	4603      	mov	r3, r0
 8002634:	fb03 f404 	mul.w	r4, r3, r4
 8002638:	f7ff ff2a 	bl	8002490 <LL_RCC_PLL_GetP>
 800263c:	4603      	mov	r3, r0
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	3301      	adds	r3, #1
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fbb4 f3f3 	udiv	r3, r4, r3
 8002648:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800264a:	693b      	ldr	r3, [r7, #16]
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	00f42400 	.word	0x00f42400
 8002658:	007a1200 	.word	0x007a1200

0800265c <LL_TIM_SetPrescaler>:
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_TIM_SetAutoReload>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_TIM_SetRepetitionCounter>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	615a      	str	r2, [r3, #20]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3d      	ldr	r2, [pc, #244]	; (80027d8 <LL_TIM_Init+0x108>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d013      	beq.n	8002710 <LL_TIM_Init+0x40>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d00f      	beq.n	8002710 <LL_TIM_Init+0x40>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <LL_TIM_Init+0x10c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00b      	beq.n	8002710 <LL_TIM_Init+0x40>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a39      	ldr	r2, [pc, #228]	; (80027e0 <LL_TIM_Init+0x110>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <LL_TIM_Init+0x40>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a38      	ldr	r2, [pc, #224]	; (80027e4 <LL_TIM_Init+0x114>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d003      	beq.n	8002710 <LL_TIM_Init+0x40>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a37      	ldr	r2, [pc, #220]	; (80027e8 <LL_TIM_Init+0x118>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d106      	bne.n	800271e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a2d      	ldr	r2, [pc, #180]	; (80027d8 <LL_TIM_Init+0x108>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d02b      	beq.n	800277e <LL_TIM_Init+0xae>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d027      	beq.n	800277e <LL_TIM_Init+0xae>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <LL_TIM_Init+0x10c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d023      	beq.n	800277e <LL_TIM_Init+0xae>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <LL_TIM_Init+0x110>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <LL_TIM_Init+0xae>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <LL_TIM_Init+0x114>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01b      	beq.n	800277e <LL_TIM_Init+0xae>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <LL_TIM_Init+0x118>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d017      	beq.n	800277e <LL_TIM_Init+0xae>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a26      	ldr	r2, [pc, #152]	; (80027ec <LL_TIM_Init+0x11c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <LL_TIM_Init+0xae>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <LL_TIM_Init+0x120>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00f      	beq.n	800277e <LL_TIM_Init+0xae>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a24      	ldr	r2, [pc, #144]	; (80027f4 <LL_TIM_Init+0x124>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00b      	beq.n	800277e <LL_TIM_Init+0xae>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a23      	ldr	r2, [pc, #140]	; (80027f8 <LL_TIM_Init+0x128>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <LL_TIM_Init+0xae>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a22      	ldr	r2, [pc, #136]	; (80027fc <LL_TIM_Init+0x12c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <LL_TIM_Init+0xae>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <LL_TIM_Init+0x130>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d106      	bne.n	800278c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff6d 	bl	8002678 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff59 	bl	800265c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <LL_TIM_Init+0x108>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d003      	beq.n	80027ba <LL_TIM_Init+0xea>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <LL_TIM_Init+0x118>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d105      	bne.n	80027c6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff67 	bl	8002694 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff72 	bl	80026b0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800
 80027e4:	40000c00 	.word	0x40000c00
 80027e8:	40010400 	.word	0x40010400
 80027ec:	40014000 	.word	0x40014000
 80027f0:	40014400 	.word	0x40014400
 80027f4:	40014800 	.word	0x40014800
 80027f8:	40001800 	.word	0x40001800
 80027fc:	40001c00 	.word	0x40001c00
 8002800:	40002000 	.word	0x40002000

08002804 <LL_USART_IsEnabled>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	b2db      	uxtb	r3, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_USART_SetStopBitsLength>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	611a      	str	r2, [r3, #16]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_USART_SetHWFlowCtrl>:
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	615a      	str	r2, [r3, #20]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_USART_SetBaudRate>:
{
 8002878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287c:	b09f      	sub	sp, #124	; 0x7c
 800287e:	af00      	add	r7, sp, #0
 8002880:	6778      	str	r0, [r7, #116]	; 0x74
 8002882:	6739      	str	r1, [r7, #112]	; 0x70
 8002884:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002886:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288e:	f040 80bc 	bne.w	8002a0a <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002894:	461c      	mov	r4, r3
 8002896:	f04f 0500 	mov.w	r5, #0
 800289a:	4622      	mov	r2, r4
 800289c:	462b      	mov	r3, r5
 800289e:	eb12 0a02 	adds.w	sl, r2, r2
 80028a2:	eb43 0b03 	adc.w	fp, r3, r3
 80028a6:	4652      	mov	r2, sl
 80028a8:	465b      	mov	r3, fp
 80028aa:	1912      	adds	r2, r2, r4
 80028ac:	eb45 0303 	adc.w	r3, r5, r3
 80028b0:	f04f 0000 	mov.w	r0, #0
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	00d9      	lsls	r1, r3, #3
 80028ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028be:	00d0      	lsls	r0, r2, #3
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	1911      	adds	r1, r2, r4
 80028c6:	6639      	str	r1, [r7, #96]	; 0x60
 80028c8:	416b      	adcs	r3, r5
 80028ca:	667b      	str	r3, [r7, #100]	; 0x64
 80028cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ce:	461a      	mov	r2, r3
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	1891      	adds	r1, r2, r2
 80028d6:	6339      	str	r1, [r7, #48]	; 0x30
 80028d8:	415b      	adcs	r3, r3
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
 80028dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80028e4:	f7fd fcdc 	bl	80002a0 <__aeabi_uldivmod>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4ba9      	ldr	r3, [pc, #676]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 80028ee:	fba3 2302 	umull	r2, r3, r3, r2
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	b29e      	uxth	r6, r3
 80028fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028fc:	461c      	mov	r4, r3
 80028fe:	f04f 0500 	mov.w	r5, #0
 8002902:	4622      	mov	r2, r4
 8002904:	462b      	mov	r3, r5
 8002906:	1891      	adds	r1, r2, r2
 8002908:	62b9      	str	r1, [r7, #40]	; 0x28
 800290a:	415b      	adcs	r3, r3
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002912:	1912      	adds	r2, r2, r4
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	f04f 0000 	mov.w	r0, #0
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	00d9      	lsls	r1, r3, #3
 8002922:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002926:	00d0      	lsls	r0, r2, #3
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	1911      	adds	r1, r2, r4
 800292e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002930:	416b      	adcs	r3, r5
 8002932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002936:	461a      	mov	r2, r3
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	1891      	adds	r1, r2, r2
 800293e:	6239      	str	r1, [r7, #32]
 8002940:	415b      	adcs	r3, r3
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002948:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800294c:	f7fd fca8 	bl	80002a0 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4b8f      	ldr	r3, [pc, #572]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 8002956:	fba3 1302 	umull	r1, r3, r3, r2
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2164      	movs	r1, #100	; 0x64
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	3332      	adds	r3, #50	; 0x32
 8002968:	4a8a      	ldr	r2, [pc, #552]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	b29b      	uxth	r3, r3
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	b29b      	uxth	r3, r3
 8002976:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800297a:	b29b      	uxth	r3, r3
 800297c:	4433      	add	r3, r6
 800297e:	b29e      	uxth	r6, r3
 8002980:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002982:	4618      	mov	r0, r3
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	1894      	adds	r4, r2, r2
 800298e:	61bc      	str	r4, [r7, #24]
 8002990:	415b      	adcs	r3, r3
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002998:	1812      	adds	r2, r2, r0
 800299a:	eb41 0303 	adc.w	r3, r1, r3
 800299e:	f04f 0400 	mov.w	r4, #0
 80029a2:	f04f 0500 	mov.w	r5, #0
 80029a6:	00dd      	lsls	r5, r3, #3
 80029a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029ac:	00d4      	lsls	r4, r2, #3
 80029ae:	4622      	mov	r2, r4
 80029b0:	462b      	mov	r3, r5
 80029b2:	1814      	adds	r4, r2, r0
 80029b4:	653c      	str	r4, [r7, #80]	; 0x50
 80029b6:	414b      	adcs	r3, r1
 80029b8:	657b      	str	r3, [r7, #84]	; 0x54
 80029ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029bc:	461a      	mov	r2, r3
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	1891      	adds	r1, r2, r2
 80029c4:	6139      	str	r1, [r7, #16]
 80029c6:	415b      	adcs	r3, r3
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80029d2:	f7fd fc65 	bl	80002a0 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 80029dc:	fba3 1302 	umull	r1, r3, r3, r2
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	2164      	movs	r1, #100	; 0x64
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	3332      	adds	r3, #50	; 0x32
 80029ee:	4a69      	ldr	r2, [pc, #420]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4433      	add	r3, r6
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a06:	609a      	str	r2, [r3, #8]
}
 8002a08:	e0be      	b.n	8002b88 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	f04f 0500 	mov.w	r5, #0
 8002a12:	4622      	mov	r2, r4
 8002a14:	462b      	mov	r3, r5
 8002a16:	eb12 0802 	adds.w	r8, r2, r2
 8002a1a:	eb43 0903 	adc.w	r9, r3, r3
 8002a1e:	4642      	mov	r2, r8
 8002a20:	464b      	mov	r3, r9
 8002a22:	1912      	adds	r2, r2, r4
 8002a24:	eb45 0303 	adc.w	r3, r5, r3
 8002a28:	f04f 0000 	mov.w	r0, #0
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	00d9      	lsls	r1, r3, #3
 8002a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a36:	00d0      	lsls	r0, r2, #3
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	1911      	adds	r1, r2, r4
 8002a3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a40:	416b      	adcs	r3, r5
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a46:	4618      	mov	r0, r3
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	008b      	lsls	r3, r1, #2
 8002a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a5a:	0082      	lsls	r2, r0, #2
 8002a5c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a60:	f7fd fc1e 	bl	80002a0 <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 8002a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	b29e      	uxth	r6, r3
 8002a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	1894      	adds	r4, r2, r2
 8002a84:	60bc      	str	r4, [r7, #8]
 8002a86:	415b      	adcs	r3, r3
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8e:	1812      	adds	r2, r2, r0
 8002a90:	eb41 0303 	adc.w	r3, r1, r3
 8002a94:	f04f 0400 	mov.w	r4, #0
 8002a98:	f04f 0500 	mov.w	r5, #0
 8002a9c:	00dd      	lsls	r5, r3, #3
 8002a9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002aa2:	00d4      	lsls	r4, r2, #3
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	1814      	adds	r4, r2, r0
 8002aaa:	643c      	str	r4, [r7, #64]	; 0x40
 8002aac:	414b      	adcs	r3, r1
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	008b      	lsls	r3, r1, #2
 8002ac2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ac6:	0082      	lsls	r2, r0, #2
 8002ac8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002acc:	f7fd fbe8 	bl	80002a0 <__aeabi_uldivmod>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 8002ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2164      	movs	r1, #100	; 0x64
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	3332      	adds	r3, #50	; 0x32
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4433      	add	r3, r6
 8002afa:	b29e      	uxth	r6, r3
 8002afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002afe:	4618      	mov	r0, r3
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	1894      	adds	r4, r2, r2
 8002b0a:	603c      	str	r4, [r7, #0]
 8002b0c:	415b      	adcs	r3, r3
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b14:	1812      	adds	r2, r2, r0
 8002b16:	eb41 0303 	adc.w	r3, r1, r3
 8002b1a:	f04f 0400 	mov.w	r4, #0
 8002b1e:	f04f 0500 	mov.w	r5, #0
 8002b22:	00dd      	lsls	r5, r3, #3
 8002b24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b28:	00d4      	lsls	r4, r2, #3
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	1814      	adds	r4, r2, r0
 8002b30:	63bc      	str	r4, [r7, #56]	; 0x38
 8002b32:	414b      	adcs	r3, r1
 8002b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	008b      	lsls	r3, r1, #2
 8002b48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b4c:	0082      	lsls	r2, r0, #2
 8002b4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b52:	f7fd fba5 	bl	80002a0 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 8002b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	2164      	movs	r1, #100	; 0x64
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	3332      	adds	r3, #50	; 0x32
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <LL_USART_SetBaudRate+0x31c>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4433      	add	r3, r6
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b86:	609a      	str	r2, [r3, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	377c      	adds	r7, #124	; 0x7c
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b92:	bf00      	nop
 8002b94:	51eb851f 	.word	0x51eb851f

08002b98 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff fe2a 	bl	8002804 <LL_USART_IsEnabled>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d15e      	bne.n	8002c74 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bbe:	f023 030c 	bic.w	r3, r3, #12
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	6851      	ldr	r1, [r2, #4]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	68d2      	ldr	r2, [r2, #12]
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	6912      	ldr	r2, [r2, #16]
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	6992      	ldr	r2, [r2, #24]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fe21 	bl	800282c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fe2e 	bl	8002852 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fc64 	bl	80024c8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <LL_USART_Init+0xe8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d102      	bne.n	8002c0e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e021      	b.n	8002c52 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <LL_USART_Init+0xec>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d102      	bne.n	8002c1c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e01a      	b.n	8002c52 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a1a      	ldr	r2, [pc, #104]	; (8002c88 <LL_USART_Init+0xf0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d102      	bne.n	8002c2a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	e013      	b.n	8002c52 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <LL_USART_Init+0xf4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d102      	bne.n	8002c38 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	e00c      	b.n	8002c52 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <LL_USART_Init+0xf8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d102      	bne.n	8002c46 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	e005      	b.n	8002c52 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a12      	ldr	r2, [pc, #72]	; (8002c94 <LL_USART_Init+0xfc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69b9      	ldr	r1, [r7, #24]
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fe02 	bl	8002878 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40011000 	.word	0x40011000
 8002c84:	40004400 	.word	0x40004400
 8002c88:	40004800 	.word	0x40004800
 8002c8c:	40011400 	.word	0x40011400
 8002c90:	40004c00 	.word	0x40004c00
 8002c94:	40005000 	.word	0x40005000

08002c98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002caa:	2b84      	cmp	r3, #132	; 0x84
 8002cac:	d005      	beq.n	8002cba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002cae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3303      	adds	r3, #3
 8002cb8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ccc:	f001 f922 	bl	8003f14 <vTaskStartScheduler>
  
  return osOK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd8:	b089      	sub	sp, #36	; 0x24
 8002cda:	af04      	add	r7, sp, #16
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <osThreadCreate+0x54>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01c      	beq.n	8002d2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685c      	ldr	r4, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681d      	ldr	r5, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691e      	ldr	r6, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ffc8 	bl	8002c98 <makeFreeRtosPriority>
 8002d08:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d12:	9202      	str	r2, [sp, #8]
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	9100      	str	r1, [sp, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4632      	mov	r2, r6
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f000 ff30 	bl	8003b84 <xTaskCreateStatic>
 8002d24:	4603      	mov	r3, r0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e01c      	b.n	8002d64 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685c      	ldr	r4, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d36:	b29e      	uxth	r6, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ffaa 	bl	8002c98 <makeFreeRtosPriority>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	9200      	str	r2, [sp, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4632      	mov	r2, r6
 8002d52:	4629      	mov	r1, r5
 8002d54:	4620      	mov	r0, r4
 8002d56:	f000 ff72 	bl	8003c3e <xTaskCreate>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d001      	beq.n	8002d64 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e000      	b.n	8002d66 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d64:	68fb      	ldr	r3, [r7, #12]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d6e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <osDelay+0x16>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	e000      	b.n	8002d86 <osDelay+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 f890 	bl	8003eac <vTaskDelay>
  
  return osOK;
 8002d8c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002dba:	231c      	movs	r3, #28
 8002dbc:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b1c      	cmp	r3, #28
 8002dc2:	d00a      	beq.n	8002dda <xEventGroupCreateStatic+0x44>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	60fb      	str	r3, [r7, #12]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f808 	bl	8002e04 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2201      	movs	r2, #1
 8002df8:	761a      	strb	r2, [r3, #24]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002dfa:	697b      	ldr	r3, [r7, #20]
	}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f103 0208 	add.w	r2, r3, #8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f103 0208 	add.w	r2, r3, #8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f103 0208 	add.w	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	601a      	str	r2, [r3, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d103      	bne.n	8002ec6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e00c      	b.n	8002ee0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3308      	adds	r3, #8
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e002      	b.n	8002ed4 <vListInsert+0x2e>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d2f6      	bcs.n	8002ece <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6852      	ldr	r2, [r2, #4]
 8002f38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d103      	bne.n	8002f4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	1e5a      	subs	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <xQueueGenericReset+0x2a>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	60bb      	str	r3, [r7, #8]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f96:	f002 fa7d 	bl	8005494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	68f9      	ldr	r1, [r7, #12]
 8002fca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	441a      	add	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	22ff      	movs	r2, #255	; 0xff
 8002fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	22ff      	movs	r2, #255	; 0xff
 8002fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d114      	bne.n	8003016 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01a      	beq.n	800302a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3310      	adds	r3, #16
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 fa0f 	bl	800441c <xTaskRemoveFromEventList>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <xQueueGenericReset+0xcc>)
 8003006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	e009      	b.n	800302a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3310      	adds	r3, #16
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fef2 	bl	8002e04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3324      	adds	r3, #36	; 0x24
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff feed 	bl	8002e04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800302a:	f002 fa63 	bl	80054f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800302e:	2301      	movs	r3, #1
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	; 0x38
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <xQueueGenericCreateStatic+0x52>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <xQueueGenericCreateStatic+0x56>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <xQueueGenericCreateStatic+0x58>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	623b      	str	r3, [r7, #32]
}
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <xQueueGenericCreateStatic+0x7e>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <xQueueGenericCreateStatic+0x82>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueGenericCreateStatic+0x84>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	61fb      	str	r3, [r7, #28]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030da:	2348      	movs	r3, #72	; 0x48
 80030dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b48      	cmp	r3, #72	; 0x48
 80030e2:	d00a      	beq.n	80030fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	61bb      	str	r3, [r7, #24]
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00d      	beq.n	8003122 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800310e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f805 	bl	800312c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003124:	4618      	mov	r0, r3
 8003126:	3730      	adds	r7, #48	; 0x30
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d103      	bne.n	8003148 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e002      	b.n	800314e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800315a:	2101      	movs	r1, #1
 800315c:	69b8      	ldr	r0, [r7, #24]
 800315e:	f7ff ff05 	bl	8002f6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08e      	sub	sp, #56	; 0x38
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800317a:	2300      	movs	r3, #0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <xQueueGenericSend+0x32>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d103      	bne.n	80031ac <xQueueGenericSend+0x40>
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <xQueueGenericSend+0x44>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <xQueueGenericSend+0x46>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <xQueueGenericSend+0x60>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d103      	bne.n	80031da <xQueueGenericSend+0x6e>
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <xQueueGenericSend+0x72>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <xQueueGenericSend+0x74>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <xQueueGenericSend+0x8e>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	623b      	str	r3, [r7, #32]
}
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031fa:	f001 facb 	bl	8004794 <xTaskGetSchedulerState>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <xQueueGenericSend+0x9e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <xQueueGenericSend+0xa2>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <xQueueGenericSend+0xa4>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xQueueGenericSend+0xbe>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	61fb      	str	r3, [r7, #28]
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800322a:	f002 f933 	bl	8005494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <xQueueGenericSend+0xd4>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d129      	bne.n	8003294 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003246:	f000 fb2f 	bl	80038a8 <prvCopyDataToQueue>
 800324a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2b00      	cmp	r3, #0
 8003252:	d010      	beq.n	8003276 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	3324      	adds	r3, #36	; 0x24
 8003258:	4618      	mov	r0, r3
 800325a:	f001 f8df 	bl	800441c <xTaskRemoveFromEventList>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003264:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <xQueueGenericSend+0x1f8>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	e00a      	b.n	800328c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800327c:	4b39      	ldr	r3, [pc, #228]	; (8003364 <xQueueGenericSend+0x1f8>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800328c:	f002 f932 	bl	80054f4 <vPortExitCritical>
				return pdPASS;
 8003290:	2301      	movs	r3, #1
 8003292:	e063      	b.n	800335c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800329a:	f002 f92b 	bl	80054f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	e05c      	b.n	800335c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f917 	bl	80044e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032b2:	2301      	movs	r3, #1
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032b6:	f002 f91d 	bl	80054f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ba:	f000 fe91 	bl	8003fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032be:	f002 f8e9 	bl	8005494 <vPortEnterCritical>
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d103      	bne.n	80032d8 <xQueueGenericSend+0x16c>
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032de:	b25b      	sxtb	r3, r3
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d103      	bne.n	80032ee <xQueueGenericSend+0x182>
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032ee:	f002 f901 	bl	80054f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032f2:	1d3a      	adds	r2, r7, #4
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 f906 	bl	800450c <xTaskCheckForTimeOut>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d124      	bne.n	8003350 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003308:	f000 fbc6 	bl	8003a98 <prvIsQueueFull>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d018      	beq.n	8003344 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	3310      	adds	r3, #16
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f001 f82e 	bl	800437c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003322:	f000 fb51 	bl	80039c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003326:	f000 fe69 	bl	8003ffc <xTaskResumeAll>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	f47f af7c 	bne.w	800322a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <xQueueGenericSend+0x1f8>)
 8003334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	e772      	b.n	800322a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003346:	f000 fb3f 	bl	80039c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800334a:	f000 fe57 	bl	8003ffc <xTaskResumeAll>
 800334e:	e76c      	b.n	800322a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003352:	f000 fb39 	bl	80039c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003356:	f000 fe51 	bl	8003ffc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800335a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800335c:	4618      	mov	r0, r3
 800335e:	3738      	adds	r7, #56	; 0x38
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b090      	sub	sp, #64	; 0x40
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <xQueueGenericSendFromISR+0x3c>
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <xQueueGenericSendFromISR+0x40>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <xQueueGenericSendFromISR+0x42>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033c0:	bf00      	nop
 80033c2:	e7fe      	b.n	80033c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d103      	bne.n	80033d2 <xQueueGenericSendFromISR+0x6a>
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <xQueueGenericSendFromISR+0x6e>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <xQueueGenericSendFromISR+0x70>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10a      	bne.n	80033f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	623b      	str	r3, [r7, #32]
}
 80033ee:	bf00      	nop
 80033f0:	e7fe      	b.n	80033f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033f2:	f002 f931 	bl	8005658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033f6:	f3ef 8211 	mrs	r2, BASEPRI
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	61fa      	str	r2, [r7, #28]
 800340c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800340e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <xQueueGenericSendFromISR+0xbc>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d12f      	bne.n	8003484 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800342a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800343a:	f000 fa35 	bl	80038a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800343e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d112      	bne.n	800346e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d016      	beq.n	800347e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	3324      	adds	r3, #36	; 0x24
 8003454:	4618      	mov	r0, r3
 8003456:	f000 ffe1 	bl	800441c <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800346e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003472:	3301      	adds	r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	b25a      	sxtb	r2, r3
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800347e:	2301      	movs	r3, #1
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003482:	e001      	b.n	8003488 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003484:	2300      	movs	r3, #0
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003492:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003496:	4618      	mov	r0, r3
 8003498:	3740      	adds	r7, #64	; 0x40
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	; 0x30
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <xQueueReceive+0x30>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	623b      	str	r3, [r7, #32]
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <xQueueReceive+0x3e>
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <xQueueReceive+0x42>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueReceive+0x44>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xQueueReceive+0x5e>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61fb      	str	r3, [r7, #28]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034fe:	f001 f949 	bl	8004794 <xTaskGetSchedulerState>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <xQueueReceive+0x6e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <xQueueReceive+0x72>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <xQueueReceive+0x74>
 8003512:	2300      	movs	r3, #0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xQueueReceive+0x8e>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	61bb      	str	r3, [r7, #24]
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800352e:	f001 ffb1 	bl	8005494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01f      	beq.n	800357e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800353e:	68b9      	ldr	r1, [r7, #8]
 8003540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003542:	f000 fa1b 	bl	800397c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	1e5a      	subs	r2, r3, #1
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00f      	beq.n	8003576 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	3310      	adds	r3, #16
 800355a:	4618      	mov	r0, r3
 800355c:	f000 ff5e 	bl	800441c <xTaskRemoveFromEventList>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <xQueueReceive+0x1bc>)
 8003568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003576:	f001 ffbd 	bl	80054f4 <vPortExitCritical>
				return pdPASS;
 800357a:	2301      	movs	r3, #1
 800357c:	e069      	b.n	8003652 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003584:	f001 ffb6 	bl	80054f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003588:	2300      	movs	r3, #0
 800358a:	e062      	b.n	8003652 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003592:	f107 0310 	add.w	r3, r7, #16
 8003596:	4618      	mov	r0, r3
 8003598:	f000 ffa2 	bl	80044e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800359c:	2301      	movs	r3, #1
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035a0:	f001 ffa8 	bl	80054f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035a4:	f000 fd1c 	bl	8003fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035a8:	f001 ff74 	bl	8005494 <vPortEnterCritical>
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035b2:	b25b      	sxtb	r3, r3
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d103      	bne.n	80035c2 <xQueueReceive+0x122>
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035c8:	b25b      	sxtb	r3, r3
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d103      	bne.n	80035d8 <xQueueReceive+0x138>
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d8:	f001 ff8c 	bl	80054f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035dc:	1d3a      	adds	r2, r7, #4
 80035de:	f107 0310 	add.w	r3, r7, #16
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 ff91 	bl	800450c <xTaskCheckForTimeOut>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d123      	bne.n	8003638 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035f2:	f000 fa3b 	bl	8003a6c <prvIsQueueEmpty>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d017      	beq.n	800362c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f000 feb9 	bl	800437c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800360a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800360c:	f000 f9dc 	bl	80039c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003610:	f000 fcf4 	bl	8003ffc <xTaskResumeAll>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d189      	bne.n	800352e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <xQueueReceive+0x1bc>)
 800361c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	e780      	b.n	800352e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800362c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362e:	f000 f9cb 	bl	80039c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003632:	f000 fce3 	bl	8003ffc <xTaskResumeAll>
 8003636:	e77a      	b.n	800352e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800363a:	f000 f9c5 	bl	80039c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800363e:	f000 fcdd 	bl	8003ffc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003644:	f000 fa12 	bl	8003a6c <prvIsQueueEmpty>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f43f af6f 	beq.w	800352e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003650:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003652:	4618      	mov	r0, r3
 8003654:	3730      	adds	r7, #48	; 0x30
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08e      	sub	sp, #56	; 0x38
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800366a:	2300      	movs	r3, #0
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003672:	2300      	movs	r3, #0
 8003674:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	623b      	str	r3, [r7, #32]
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	61fb      	str	r3, [r7, #28]
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036b0:	f001 f870 	bl	8004794 <xTaskGetSchedulerState>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <xQueueSemaphoreTake+0x60>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <xQueueSemaphoreTake+0x64>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <xQueueSemaphoreTake+0x66>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	61bb      	str	r3, [r7, #24]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036e0:	f001 fed8 	bl	8005494 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d024      	beq.n	800373a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003700:	f001 f9f0 	bl	8004ae4 <pvTaskIncrementMutexHeldCount>
 8003704:	4602      	mov	r2, r0
 8003706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003708:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800370a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00f      	beq.n	8003732 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003714:	3310      	adds	r3, #16
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fe80 	bl	800441c <xTaskRemoveFromEventList>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003722:	4b54      	ldr	r3, [pc, #336]	; (8003874 <xQueueSemaphoreTake+0x214>)
 8003724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003732:	f001 fedf 	bl	80054f4 <vPortExitCritical>
				return pdPASS;
 8003736:	2301      	movs	r3, #1
 8003738:	e097      	b.n	800386a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d111      	bne.n	8003764 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	617b      	str	r3, [r7, #20]
}
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800375c:	f001 feca 	bl	80054f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003760:	2300      	movs	r3, #0
 8003762:	e082      	b.n	800386a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	4618      	mov	r0, r3
 8003770:	f000 feb6 	bl	80044e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003778:	f001 febc 	bl	80054f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800377c:	f000 fc30 	bl	8003fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003780:	f001 fe88 	bl	8005494 <vPortEnterCritical>
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800378a:	b25b      	sxtb	r3, r3
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d103      	bne.n	800379a <xQueueSemaphoreTake+0x13a>
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037a0:	b25b      	sxtb	r3, r3
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a6:	d103      	bne.n	80037b0 <xQueueSemaphoreTake+0x150>
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037b0:	f001 fea0 	bl	80054f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037b4:	463a      	mov	r2, r7
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fea5 	bl	800450c <xTaskCheckForTimeOut>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d132      	bne.n	800382e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037ca:	f000 f94f 	bl	8003a6c <prvIsQueueEmpty>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d026      	beq.n	8003822 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80037dc:	f001 fe5a 	bl	8005494 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fff3 	bl	80047d0 <xTaskPriorityInherit>
 80037ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80037ec:	f001 fe82 	bl	80054f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	3324      	adds	r3, #36	; 0x24
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fdbf 	bl	800437c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003800:	f000 f8e2 	bl	80039c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003804:	f000 fbfa 	bl	8003ffc <xTaskResumeAll>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	f47f af68 	bne.w	80036e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <xQueueSemaphoreTake+0x214>)
 8003812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	e75e      	b.n	80036e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003824:	f000 f8d0 	bl	80039c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003828:	f000 fbe8 	bl	8003ffc <xTaskResumeAll>
 800382c:	e758      	b.n	80036e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800382e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003830:	f000 f8ca 	bl	80039c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003834:	f000 fbe2 	bl	8003ffc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800383a:	f000 f917 	bl	8003a6c <prvIsQueueEmpty>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	f43f af4d 	beq.w	80036e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00d      	beq.n	8003868 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800384c:	f001 fe22 	bl	8005494 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003852:	f000 f811 	bl	8003878 <prvGetDisinheritPriorityAfterTimeout>
 8003856:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f8b2 	bl	80049c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003864:	f001 fe46 	bl	80054f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800386a:	4618      	mov	r0, r3
 800386c:	3738      	adds	r7, #56	; 0x38
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	e000ed04 	.word	0xe000ed04

08003878 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e001      	b.n	800389a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800389a:	68fb      	ldr	r3, [r7, #12]
	}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d14d      	bne.n	800396a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fff2 	bl	80048bc <xTaskPriorityDisinherit>
 80038d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	e043      	b.n	800396a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d119      	bne.n	800391c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6858      	ldr	r0, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	461a      	mov	r2, r3
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	f002 ffa8 	bl	8006848 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	441a      	add	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	d32b      	bcc.n	800396a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	e026      	b.n	800396a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68d8      	ldr	r0, [r3, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	461a      	mov	r2, r3
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	f002 ff8e 	bl	8006848 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	425b      	negs	r3, r3
 8003936:	441a      	add	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d207      	bcs.n	8003958 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	425b      	negs	r3, r3
 8003952:	441a      	add	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d105      	bne.n	800396a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	3b01      	subs	r3, #1
 8003968:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003972:	697b      	ldr	r3, [r7, #20]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d018      	beq.n	80039c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	441a      	add	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d303      	bcc.n	80039b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68d9      	ldr	r1, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	461a      	mov	r2, r3
 80039ba:	6838      	ldr	r0, [r7, #0]
 80039bc:	f002 ff44 	bl	8006848 <memcpy>
	}
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039d0:	f001 fd60 	bl	8005494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039dc:	e011      	b.n	8003a02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d012      	beq.n	8003a0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3324      	adds	r3, #36	; 0x24
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fd16 	bl	800441c <xTaskRemoveFromEventList>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039f6:	f000 fdeb 	bl	80045d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	dce9      	bgt.n	80039de <prvUnlockQueue+0x16>
 8003a0a:	e000      	b.n	8003a0e <prvUnlockQueue+0x46>
					break;
 8003a0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	22ff      	movs	r2, #255	; 0xff
 8003a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a16:	f001 fd6d 	bl	80054f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a1a:	f001 fd3b 	bl	8005494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a26:	e011      	b.n	8003a4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d012      	beq.n	8003a56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3310      	adds	r3, #16
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fcf1 	bl	800441c <xTaskRemoveFromEventList>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a40:	f000 fdc6 	bl	80045d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a44:	7bbb      	ldrb	r3, [r7, #14]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	dce9      	bgt.n	8003a28 <prvUnlockQueue+0x60>
 8003a54:	e000      	b.n	8003a58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a60:	f001 fd48 	bl	80054f4 <vPortExitCritical>
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a74:	f001 fd0e 	bl	8005494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a80:	2301      	movs	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e001      	b.n	8003a8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a8a:	f001 fd33 	bl	80054f4 <vPortExitCritical>

	return xReturn;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aa0:	f001 fcf8 	bl	8005494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d102      	bne.n	8003ab6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e001      	b.n	8003aba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aba:	f001 fd1b 	bl	80054f4 <vPortExitCritical>

	return xReturn;
 8003abe:	68fb      	ldr	r3, [r7, #12]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	e014      	b.n	8003b02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ad8:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <vQueueAddToRegistry+0x50>)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10b      	bne.n	8003afc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ae4:	490c      	ldr	r1, [pc, #48]	; (8003b18 <vQueueAddToRegistry+0x50>)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <vQueueAddToRegistry+0x50>)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003afa:	e006      	b.n	8003b0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b07      	cmp	r3, #7
 8003b06:	d9e7      	bls.n	8003ad8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20004b08 	.word	0x20004b08

08003b1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b2c:	f001 fcb2 	bl	8005494 <vPortEnterCritical>
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d103      	bne.n	8003b46 <vQueueWaitForMessageRestricted+0x2a>
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d103      	bne.n	8003b5c <vQueueWaitForMessageRestricted+0x40>
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b5c:	f001 fcca 	bl	80054f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fc27 	bl	80043c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	f7ff ff26 	bl	80039c8 <prvUnlockQueue>
	}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08e      	sub	sp, #56	; 0x38
 8003b88:	af04      	add	r7, sp, #16
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	623b      	str	r3, [r7, #32]
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xTaskCreateStatic+0x46>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	61fb      	str	r3, [r7, #28]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bca:	2354      	movs	r3, #84	; 0x54
 8003bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b54      	cmp	r3, #84	; 0x54
 8003bd2:	d00a      	beq.n	8003bea <xTaskCreateStatic+0x66>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	61bb      	str	r3, [r7, #24]
}
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01e      	beq.n	8003c30 <xTaskCreateStatic+0xac>
 8003bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9303      	str	r3, [sp, #12]
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	9302      	str	r3, [sp, #8]
 8003c12:	f107 0314 	add.w	r3, r7, #20
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f850 	bl	8003cc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c2a:	f000 f8d5 	bl	8003dd8 <prvAddNewTaskToReadyList>
 8003c2e:	e001      	b.n	8003c34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c34:	697b      	ldr	r3, [r7, #20]
	}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b08c      	sub	sp, #48	; 0x30
 8003c42:	af04      	add	r7, sp, #16
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 fd40 	bl	80056d8 <pvPortMalloc>
 8003c58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c60:	2054      	movs	r0, #84	; 0x54
 8003c62:	f001 fd39 	bl	80056d8 <pvPortMalloc>
 8003c66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
 8003c74:	e005      	b.n	8003c82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c76:	6978      	ldr	r0, [r7, #20]
 8003c78:	f001 fdfa 	bl	8005870 <vPortFree>
 8003c7c:	e001      	b.n	8003c82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d017      	beq.n	8003cb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	2300      	movs	r3, #0
 8003c94:	9303      	str	r3, [sp, #12]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	9302      	str	r3, [sp, #8]
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f80e 	bl	8003cc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cac:	69f8      	ldr	r0, [r7, #28]
 8003cae:	f000 f893 	bl	8003dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	e002      	b.n	8003cbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cbe:	69bb      	ldr	r3, [r7, #24]
	}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f023 0307 	bic.w	r3, r3, #7
 8003cee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	617b      	str	r3, [r7, #20]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01f      	beq.n	8003d56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	e012      	b.n	8003d42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	7819      	ldrb	r1, [r3, #0]
 8003d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3334      	adds	r3, #52	; 0x34
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	d9e9      	bls.n	8003d1c <prvInitialiseNewTask+0x54>
 8003d48:	e000      	b.n	8003d4c <prvInitialiseNewTask+0x84>
			{
				break;
 8003d4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d54:	e003      	b.n	8003d5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	2b06      	cmp	r3, #6
 8003d62:	d901      	bls.n	8003d68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d64:	2306      	movs	r3, #6
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	2200      	movs	r2, #0
 8003d78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff f860 	bl	8002e44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	3318      	adds	r3, #24
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff f85b 	bl	8002e44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	f1c3 0207 	rsb	r2, r3, #7
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	2200      	movs	r2, #0
 8003da8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	69b8      	ldr	r0, [r7, #24]
 8003db8:	f001 fa40 	bl	800523c <pxPortInitialiseStack>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dce:	bf00      	nop
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003de0:	f001 fb58 	bl	8005494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <prvAddNewTaskToReadyList+0xb8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <prvAddNewTaskToReadyList+0xb8>)
 8003dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dee:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003df6:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <prvAddNewTaskToReadyList+0xb8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d110      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e04:	f000 fc08 	bl	8004618 <prvInitialiseTaskLists>
 8003e08:	e00d      	b.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <prvAddNewTaskToReadyList+0xc0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d802      	bhi.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e20:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003e2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <prvAddNewTaskToReadyList+0xcc>)
 8003e50:	441a      	add	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f7ff f800 	bl	8002e5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e5e:	f001 fb49 	bl	80054f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <prvAddNewTaskToReadyList+0xc0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d207      	bcs.n	8003e88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000840 	.word	0x20000840
 8003e94:	20000740 	.word	0x20000740
 8003e98:	2000084c 	.word	0x2000084c
 8003e9c:	2000085c 	.word	0x2000085c
 8003ea0:	20000848 	.word	0x20000848
 8003ea4:	20000744 	.word	0x20000744
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <vTaskDelay+0x60>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <vTaskDelay+0x30>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60bb      	str	r3, [r7, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003edc:	f000 f880 	bl	8003fe0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fe12 	bl	8004b0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ee8:	f000 f888 	bl	8003ffc <xTaskResumeAll>
 8003eec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <vTaskDelay+0x64>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000868 	.word	0x20000868
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f22:	463a      	mov	r2, r7
 8003f24:	1d39      	adds	r1, r7, #4
 8003f26:	f107 0308 	add.w	r3, r7, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc fb34 	bl	8000598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	9202      	str	r2, [sp, #8]
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	460a      	mov	r2, r1
 8003f42:	4921      	ldr	r1, [pc, #132]	; (8003fc8 <vTaskStartScheduler+0xb4>)
 8003f44:	4821      	ldr	r0, [pc, #132]	; (8003fcc <vTaskStartScheduler+0xb8>)
 8003f46:	f7ff fe1d 	bl	8003b84 <xTaskCreateStatic>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <vTaskStartScheduler+0xbc>)
 8003f4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <vTaskStartScheduler+0xbc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e001      	b.n	8003f62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d102      	bne.n	8003f6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f68:	f000 fe36 	bl	8004bd8 <xTimerCreateTimerTask>
 8003f6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d116      	bne.n	8003fa2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	613b      	str	r3, [r7, #16]
}
 8003f86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <vTaskStartScheduler+0xc0>)
 8003f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <vTaskStartScheduler+0xc4>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <vTaskStartScheduler+0xc8>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f9c:	f001 f9d8 	bl	8005350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fa0:	e00e      	b.n	8003fc0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d10a      	bne.n	8003fc0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	60fb      	str	r3, [r7, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	e7fe      	b.n	8003fbe <vTaskStartScheduler+0xaa>
}
 8003fc0:	bf00      	nop
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	080071c8 	.word	0x080071c8
 8003fcc:	080045e9 	.word	0x080045e9
 8003fd0:	20000864 	.word	0x20000864
 8003fd4:	20000860 	.word	0x20000860
 8003fd8:	2000084c 	.word	0x2000084c
 8003fdc:	20000844 	.word	0x20000844

08003fe0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <vTaskSuspendAll+0x18>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	4a03      	ldr	r2, [pc, #12]	; (8003ff8 <vTaskSuspendAll+0x18>)
 8003fec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	20000868 	.word	0x20000868

08003ffc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800400a:	4b41      	ldr	r3, [pc, #260]	; (8004110 <xTaskResumeAll+0x114>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <xTaskResumeAll+0x2c>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	603b      	str	r3, [r7, #0]
}
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004028:	f001 fa34 	bl	8005494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800402c:	4b38      	ldr	r3, [pc, #224]	; (8004110 <xTaskResumeAll+0x114>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	4a37      	ldr	r2, [pc, #220]	; (8004110 <xTaskResumeAll+0x114>)
 8004034:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <xTaskResumeAll+0x114>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d161      	bne.n	8004102 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800403e:	4b35      	ldr	r3, [pc, #212]	; (8004114 <xTaskResumeAll+0x118>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d05d      	beq.n	8004102 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004046:	e02e      	b.n	80040a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004048:	4b33      	ldr	r3, [pc, #204]	; (8004118 <xTaskResumeAll+0x11c>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3318      	adds	r3, #24
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe ff5f 	bl	8002f18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe ff5a 	bl	8002f18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	2201      	movs	r2, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	4b2b      	ldr	r3, [pc, #172]	; (800411c <xTaskResumeAll+0x120>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4313      	orrs	r3, r2
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <xTaskResumeAll+0x120>)
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4a27      	ldr	r2, [pc, #156]	; (8004120 <xTaskResumeAll+0x124>)
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3304      	adds	r3, #4
 800408a:	4619      	mov	r1, r3
 800408c:	4610      	mov	r0, r2
 800408e:	f7fe fee6 	bl	8002e5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	4b23      	ldr	r3, [pc, #140]	; (8004124 <xTaskResumeAll+0x128>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <xTaskResumeAll+0x12c>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a6:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <xTaskResumeAll+0x11c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1cc      	bne.n	8004048 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040b4:	f000 fb4e 	bl	8004754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <xTaskResumeAll+0x130>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040c4:	f000 f846 	bl	8004154 <xTaskIncrementTick>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <xTaskResumeAll+0x12c>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f1      	bne.n	80040c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <xTaskResumeAll+0x130>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <xTaskResumeAll+0x12c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <xTaskResumeAll+0x134>)
 80040f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004102:	f001 f9f7 	bl	80054f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004106:	68bb      	ldr	r3, [r7, #8]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000868 	.word	0x20000868
 8004114:	20000840 	.word	0x20000840
 8004118:	20000800 	.word	0x20000800
 800411c:	20000848 	.word	0x20000848
 8004120:	20000744 	.word	0x20000744
 8004124:	20000740 	.word	0x20000740
 8004128:	20000854 	.word	0x20000854
 800412c:	20000850 	.word	0x20000850
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <xTaskGetTickCount+0x1c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004140:	687b      	ldr	r3, [r7, #4]
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000844 	.word	0x20000844

08004154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800415e:	4b4e      	ldr	r3, [pc, #312]	; (8004298 <xTaskIncrementTick+0x144>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 808e 	bne.w	8004284 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004168:	4b4c      	ldr	r3, [pc, #304]	; (800429c <xTaskIncrementTick+0x148>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004170:	4a4a      	ldr	r2, [pc, #296]	; (800429c <xTaskIncrementTick+0x148>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d120      	bne.n	80041be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800417c:	4b48      	ldr	r3, [pc, #288]	; (80042a0 <xTaskIncrementTick+0x14c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <xTaskIncrementTick+0x48>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	603b      	str	r3, [r7, #0]
}
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xTaskIncrementTick+0x46>
 800419c:	4b40      	ldr	r3, [pc, #256]	; (80042a0 <xTaskIncrementTick+0x14c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <xTaskIncrementTick+0x150>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a3e      	ldr	r2, [pc, #248]	; (80042a0 <xTaskIncrementTick+0x14c>)
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4a3e      	ldr	r2, [pc, #248]	; (80042a4 <xTaskIncrementTick+0x150>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <xTaskIncrementTick+0x154>)
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	f000 facb 	bl	8004754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <xTaskIncrementTick+0x158>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d348      	bcc.n	800425a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c8:	4b35      	ldr	r3, [pc, #212]	; (80042a0 <xTaskIncrementTick+0x14c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <xTaskIncrementTick+0x158>)
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	601a      	str	r2, [r3, #0]
					break;
 80041da:	e03e      	b.n	800425a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041dc:	4b30      	ldr	r3, [pc, #192]	; (80042a0 <xTaskIncrementTick+0x14c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d203      	bcs.n	80041fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041f4:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <xTaskIncrementTick+0x158>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041fa:	e02e      	b.n	800425a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	3304      	adds	r3, #4
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe fe89 	bl	8002f18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3318      	adds	r3, #24
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fe80 	bl	8002f18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	2201      	movs	r2, #1
 800421e:	409a      	lsls	r2, r3
 8004220:	4b23      	ldr	r3, [pc, #140]	; (80042b0 <xTaskIncrementTick+0x15c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4313      	orrs	r3, r2
 8004226:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <xTaskIncrementTick+0x15c>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <xTaskIncrementTick+0x160>)
 8004238:	441a      	add	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f7fe fe0c 	bl	8002e5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424a:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <xTaskIncrementTick+0x164>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	429a      	cmp	r2, r3
 8004252:	d3b9      	bcc.n	80041c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004258:	e7b6      	b.n	80041c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800425a:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <xTaskIncrementTick+0x164>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	4914      	ldr	r1, [pc, #80]	; (80042b4 <xTaskIncrementTick+0x160>)
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d901      	bls.n	8004276 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <xTaskIncrementTick+0x168>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800427e:	2301      	movs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e004      	b.n	800428e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <xTaskIncrementTick+0x16c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	4a0d      	ldr	r2, [pc, #52]	; (80042c0 <xTaskIncrementTick+0x16c>)
 800428c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800428e:	697b      	ldr	r3, [r7, #20]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000868 	.word	0x20000868
 800429c:	20000844 	.word	0x20000844
 80042a0:	200007f8 	.word	0x200007f8
 80042a4:	200007fc 	.word	0x200007fc
 80042a8:	20000858 	.word	0x20000858
 80042ac:	20000860 	.word	0x20000860
 80042b0:	20000848 	.word	0x20000848
 80042b4:	20000744 	.word	0x20000744
 80042b8:	20000740 	.word	0x20000740
 80042bc:	20000854 	.word	0x20000854
 80042c0:	20000850 	.word	0x20000850

080042c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ca:	4b27      	ldr	r3, [pc, #156]	; (8004368 <vTaskSwitchContext+0xa4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <vTaskSwitchContext+0xa8>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042d8:	e03f      	b.n	800435a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80042da:	4b24      	ldr	r3, [pc, #144]	; (800436c <vTaskSwitchContext+0xa8>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e0:	4b23      	ldr	r3, [pc, #140]	; (8004370 <vTaskSwitchContext+0xac>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042ee:	7afb      	ldrb	r3, [r7, #11]
 80042f0:	f1c3 031f 	rsb	r3, r3, #31
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	491f      	ldr	r1, [pc, #124]	; (8004374 <vTaskSwitchContext+0xb0>)
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <vTaskSwitchContext+0x5c>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
}
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <vTaskSwitchContext+0x5a>
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <vTaskSwitchContext+0xb0>)
 800432c:	4413      	add	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3308      	adds	r3, #8
 8004342:	429a      	cmp	r2, r3
 8004344:	d104      	bne.n	8004350 <vTaskSwitchContext+0x8c>
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <vTaskSwitchContext+0xb4>)
 8004358:	6013      	str	r3, [r2, #0]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000868 	.word	0x20000868
 800436c:	20000854 	.word	0x20000854
 8004370:	20000848 	.word	0x20000848
 8004374:	20000744 	.word	0x20000744
 8004378:	20000740 	.word	0x20000740

0800437c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <vTaskPlaceOnEventList+0x44>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3318      	adds	r3, #24
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fe fd7b 	bl	8002ea6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043b0:	2101      	movs	r1, #1
 80043b2:	6838      	ldr	r0, [r7, #0]
 80043b4:	f000 fbaa 	bl	8004b0c <prvAddCurrentTaskToDelayedList>
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000740 	.word	0x20000740

080043c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	617b      	str	r3, [r7, #20]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <vTaskPlaceOnEventListRestricted+0x54>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3318      	adds	r3, #24
 80043f2:	4619      	mov	r1, r3
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7fe fd32 	bl	8002e5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
 8004404:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	68b8      	ldr	r0, [r7, #8]
 800440a:	f000 fb7f 	bl	8004b0c <prvAddCurrentTaskToDelayedList>
	}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000740 	.word	0x20000740

0800441c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60fb      	str	r3, [r7, #12]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	3318      	adds	r3, #24
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fd63 	bl	8002f18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <xTaskRemoveFromEventList+0xac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d11c      	bne.n	8004494 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3304      	adds	r3, #4
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fd5a 	bl	8002f18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	4b17      	ldr	r3, [pc, #92]	; (80044cc <xTaskRemoveFromEventList+0xb0>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <xTaskRemoveFromEventList+0xb0>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <xTaskRemoveFromEventList+0xb4>)
 8004484:	441a      	add	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7fe fce6 	bl	8002e5e <vListInsertEnd>
 8004492:	e005      	b.n	80044a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	3318      	adds	r3, #24
 8004498:	4619      	mov	r1, r3
 800449a:	480e      	ldr	r0, [pc, #56]	; (80044d4 <xTaskRemoveFromEventList+0xb8>)
 800449c:	f7fe fcdf 	bl	8002e5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <xTaskRemoveFromEventList+0xbc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d905      	bls.n	80044ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <xTaskRemoveFromEventList+0xc0>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e001      	b.n	80044be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044be:	697b      	ldr	r3, [r7, #20]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000868 	.word	0x20000868
 80044cc:	20000848 	.word	0x20000848
 80044d0:	20000744 	.word	0x20000744
 80044d4:	20000800 	.word	0x20000800
 80044d8:	20000740 	.word	0x20000740
 80044dc:	20000854 	.word	0x20000854

080044e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <vTaskInternalSetTimeOutState+0x24>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <vTaskInternalSetTimeOutState+0x28>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	605a      	str	r2, [r3, #4]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	20000858 	.word	0x20000858
 8004508:	20000844 	.word	0x20000844

0800450c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	613b      	str	r3, [r7, #16]
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	60fb      	str	r3, [r7, #12]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800454e:	f000 ffa1 	bl	8005494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <xTaskCheckForTimeOut+0xbc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d102      	bne.n	8004572 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e023      	b.n	80045ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <xTaskCheckForTimeOut+0xc0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d007      	beq.n	800458e <xTaskCheckForTimeOut+0x82>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	429a      	cmp	r2, r3
 8004586:	d302      	bcc.n	800458e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	e015      	b.n	80045ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	d20b      	bcs.n	80045b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1ad2      	subs	r2, r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff9b 	bl	80044e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	e004      	b.n	80045ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045ba:	f000 ff9b 	bl	80054f4 <vPortExitCritical>

	return xReturn;
 80045be:	69fb      	ldr	r3, [r7, #28]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000844 	.word	0x20000844
 80045cc:	20000858 	.word	0x20000858

080045d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <vTaskMissedYield+0x14>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
}
 80045da:	bf00      	nop
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	20000854 	.word	0x20000854

080045e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045f0:	f000 f852 	bl	8004698 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <prvIdleTask+0x28>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d9f9      	bls.n	80045f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <prvIdleTask+0x2c>)
 80045fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800460c:	e7f0      	b.n	80045f0 <prvIdleTask+0x8>
 800460e:	bf00      	nop
 8004610:	20000744 	.word	0x20000744
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	e00c      	b.n	800463e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4a12      	ldr	r2, [pc, #72]	; (8004678 <prvInitialiseTaskLists+0x60>)
 8004630:	4413      	add	r3, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fbe6 	bl	8002e04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3301      	adds	r3, #1
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b06      	cmp	r3, #6
 8004642:	d9ef      	bls.n	8004624 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004644:	480d      	ldr	r0, [pc, #52]	; (800467c <prvInitialiseTaskLists+0x64>)
 8004646:	f7fe fbdd 	bl	8002e04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800464a:	480d      	ldr	r0, [pc, #52]	; (8004680 <prvInitialiseTaskLists+0x68>)
 800464c:	f7fe fbda 	bl	8002e04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004650:	480c      	ldr	r0, [pc, #48]	; (8004684 <prvInitialiseTaskLists+0x6c>)
 8004652:	f7fe fbd7 	bl	8002e04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004656:	480c      	ldr	r0, [pc, #48]	; (8004688 <prvInitialiseTaskLists+0x70>)
 8004658:	f7fe fbd4 	bl	8002e04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800465c:	480b      	ldr	r0, [pc, #44]	; (800468c <prvInitialiseTaskLists+0x74>)
 800465e:	f7fe fbd1 	bl	8002e04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <prvInitialiseTaskLists+0x78>)
 8004664:	4a05      	ldr	r2, [pc, #20]	; (800467c <prvInitialiseTaskLists+0x64>)
 8004666:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <prvInitialiseTaskLists+0x7c>)
 800466a:	4a05      	ldr	r2, [pc, #20]	; (8004680 <prvInitialiseTaskLists+0x68>)
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20000744 	.word	0x20000744
 800467c:	200007d0 	.word	0x200007d0
 8004680:	200007e4 	.word	0x200007e4
 8004684:	20000800 	.word	0x20000800
 8004688:	20000814 	.word	0x20000814
 800468c:	2000082c 	.word	0x2000082c
 8004690:	200007f8 	.word	0x200007f8
 8004694:	200007fc 	.word	0x200007fc

08004698 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800469e:	e019      	b.n	80046d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046a0:	f000 fef8 	bl	8005494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a4:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <prvCheckTasksWaitingTermination+0x50>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe fc31 	bl	8002f18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <prvCheckTasksWaitingTermination+0x54>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <prvCheckTasksWaitingTermination+0x54>)
 80046be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <prvCheckTasksWaitingTermination+0x58>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3b01      	subs	r3, #1
 80046c6:	4a0a      	ldr	r2, [pc, #40]	; (80046f0 <prvCheckTasksWaitingTermination+0x58>)
 80046c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046ca:	f000 ff13 	bl	80054f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f810 	bl	80046f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <prvCheckTasksWaitingTermination+0x58>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e1      	bne.n	80046a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000814 	.word	0x20000814
 80046ec:	20000840 	.word	0x20000840
 80046f0:	20000828 	.word	0x20000828

080046f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	4618      	mov	r0, r3
 800470c:	f001 f8b0 	bl	8005870 <vPortFree>
				vPortFree( pxTCB );
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 f8ad 	bl	8005870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004716:	e018      	b.n	800474a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800471e:	2b01      	cmp	r3, #1
 8004720:	d103      	bne.n	800472a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f001 f8a4 	bl	8005870 <vPortFree>
	}
 8004728:	e00f      	b.n	800474a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004730:	2b02      	cmp	r3, #2
 8004732:	d00a      	beq.n	800474a <prvDeleteTCB+0x56>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	60fb      	str	r3, [r7, #12]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <prvDeleteTCB+0x54>
	}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800475a:	4b0c      	ldr	r3, [pc, #48]	; (800478c <prvResetNextTaskUnblockTime+0x38>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d104      	bne.n	800476e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004764:	4b0a      	ldr	r3, [pc, #40]	; (8004790 <prvResetNextTaskUnblockTime+0x3c>)
 8004766:	f04f 32ff 	mov.w	r2, #4294967295
 800476a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800476c:	e008      	b.n	8004780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476e:	4b07      	ldr	r3, [pc, #28]	; (800478c <prvResetNextTaskUnblockTime+0x38>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <prvResetNextTaskUnblockTime+0x3c>)
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	200007f8 	.word	0x200007f8
 8004790:	20000860 	.word	0x20000860

08004794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <xTaskGetSchedulerState+0x34>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047a2:	2301      	movs	r3, #1
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	e008      	b.n	80047ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047a8:	4b08      	ldr	r3, [pc, #32]	; (80047cc <xTaskGetSchedulerState+0x38>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047b0:	2302      	movs	r3, #2
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	e001      	b.n	80047ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047b6:	2300      	movs	r3, #0
 80047b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047ba:	687b      	ldr	r3, [r7, #4]
	}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	2000084c 	.word	0x2000084c
 80047cc:	20000868 	.word	0x20000868

080047d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d05e      	beq.n	80048a4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <xTaskPriorityInherit+0xe0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d24e      	bcs.n	8004892 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	db06      	blt.n	800480a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047fc:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <xTaskPriorityInherit+0xe0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	f1c3 0207 	rsb	r2, r3, #7
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6959      	ldr	r1, [r3, #20]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <xTaskPriorityInherit+0xe4>)
 800481c:	4413      	add	r3, r2
 800481e:	4299      	cmp	r1, r3
 8004820:	d12f      	bne.n	8004882 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	3304      	adds	r3, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fb76 	bl	8002f18 <uxListRemove>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	2201      	movs	r2, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43da      	mvns	r2, r3
 800483e:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <xTaskPriorityInherit+0xe8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4013      	ands	r3, r2
 8004844:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <xTaskPriorityInherit+0xe8>)
 8004846:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <xTaskPriorityInherit+0xe0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	2201      	movs	r2, #1
 8004858:	409a      	lsls	r2, r3
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <xTaskPriorityInherit+0xe8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <xTaskPriorityInherit+0xe8>)
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <xTaskPriorityInherit+0xe4>)
 8004872:	441a      	add	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f7fe faef 	bl	8002e5e <vListInsertEnd>
 8004880:	e004      	b.n	800488c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <xTaskPriorityInherit+0xe0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e008      	b.n	80048a4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <xTaskPriorityInherit+0xe0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	429a      	cmp	r2, r3
 800489e:	d201      	bcs.n	80048a4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80048a0:	2301      	movs	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048a4:	68fb      	ldr	r3, [r7, #12]
	}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000740 	.word	0x20000740
 80048b4:	20000744 	.word	0x20000744
 80048b8:	20000848 	.word	0x20000848

080048bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d06e      	beq.n	80049b0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048d2:	4b3a      	ldr	r3, [pc, #232]	; (80049bc <xTaskPriorityDisinherit+0x100>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d00a      	beq.n	80048f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	60fb      	str	r3, [r7, #12]
}
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60bb      	str	r3, [r7, #8]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004914:	1e5a      	subs	r2, r3, #1
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	429a      	cmp	r2, r3
 8004924:	d044      	beq.n	80049b0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	2b00      	cmp	r3, #0
 800492c:	d140      	bne.n	80049b0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	3304      	adds	r3, #4
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe faf0 	bl	8002f18 <uxListRemove>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d115      	bne.n	800496a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	491f      	ldr	r1, [pc, #124]	; (80049c0 <xTaskPriorityDisinherit+0x104>)
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10a      	bne.n	800496a <xTaskPriorityDisinherit+0xae>
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	2201      	movs	r2, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43da      	mvns	r2, r3
 8004960:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <xTaskPriorityDisinherit+0x108>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4013      	ands	r3, r2
 8004966:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <xTaskPriorityDisinherit+0x108>)
 8004968:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	f1c3 0207 	rsb	r2, r3, #7
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	2201      	movs	r2, #1
 8004984:	409a      	lsls	r2, r3
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <xTaskPriorityDisinherit+0x108>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	4a0d      	ldr	r2, [pc, #52]	; (80049c4 <xTaskPriorityDisinherit+0x108>)
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <xTaskPriorityDisinherit+0x104>)
 800499e:	441a      	add	r2, r3
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fe fa59 	bl	8002e5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049b0:	697b      	ldr	r3, [r7, #20]
	}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000740 	.word	0x20000740
 80049c0:	20000744 	.word	0x20000744
 80049c4:	20000848 	.word	0x20000848

080049c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80049d6:	2301      	movs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d077      	beq.n	8004ad0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d902      	bls.n	8004a0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	e002      	b.n	8004a14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d058      	beq.n	8004ad0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d153      	bne.n	8004ad0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004a28:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d10a      	bne.n	8004a48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	60bb      	str	r3, [r7, #8]
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	db04      	blt.n	8004a66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f1c3 0207 	rsb	r2, r3, #7
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004a76:	4413      	add	r3, r2
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d129      	bne.n	8004ad0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fa49 	bl	8002f18 <uxListRemove>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	2201      	movs	r2, #1
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43da      	mvns	r2, r3
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004aa0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4a06      	ldr	r2, [pc, #24]	; (8004adc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004ac2:	441a      	add	r2, r3
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f7fe f9c7 	bl	8002e5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ad0:	bf00      	nop
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000740 	.word	0x20000740
 8004adc:	20000744 	.word	0x20000744
 8004ae0:	20000848 	.word	0x20000848

08004ae4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004af6:	3201      	adds	r2, #1
 8004af8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004afa:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <pvTaskIncrementMutexHeldCount+0x24>)
 8004afc:	681b      	ldr	r3, [r3, #0]
	}
 8004afe:	4618      	mov	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000740 	.word	0x20000740

08004b0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b16:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe f9f8 	bl	8002f18 <uxListRemove>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b2e:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	2201      	movs	r2, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4013      	ands	r3, r2
 8004b42:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d10a      	bne.n	8004b64 <prvAddCurrentTaskToDelayedList+0x58>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b54:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	481a      	ldr	r0, [pc, #104]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b5e:	f7fe f97e 	bl	8002e5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b62:	e026      	b.n	8004bb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4413      	add	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b6c:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d209      	bcs.n	8004b90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fe f98c 	bl	8002ea6 <vListInsert>
}
 8004b8e:	e010      	b.n	8004bb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7fe f982 	bl	8002ea6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d202      	bcs.n	8004bb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6013      	str	r3, [r2, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000844 	.word	0x20000844
 8004bc0:	20000740 	.word	0x20000740
 8004bc4:	20000848 	.word	0x20000848
 8004bc8:	2000082c 	.word	0x2000082c
 8004bcc:	200007fc 	.word	0x200007fc
 8004bd0:	200007f8 	.word	0x200007f8
 8004bd4:	20000860 	.word	0x20000860

08004bd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004be2:	f000 faeb 	bl	80051bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <xTimerCreateTimerTask+0x80>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d021      	beq.n	8004c32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004bf6:	1d3a      	adds	r2, r7, #4
 8004bf8:	f107 0108 	add.w	r1, r7, #8
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fb fce3 	bl	80005cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	9202      	str	r2, [sp, #8]
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	2302      	movs	r3, #2
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	460a      	mov	r2, r1
 8004c18:	4910      	ldr	r1, [pc, #64]	; (8004c5c <xTimerCreateTimerTask+0x84>)
 8004c1a:	4811      	ldr	r0, [pc, #68]	; (8004c60 <xTimerCreateTimerTask+0x88>)
 8004c1c:	f7fe ffb2 	bl	8003b84 <xTaskCreateStatic>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <xTimerCreateTimerTask+0x8c>)
 8004c24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c26:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <xTimerCreateTimerTask+0x8c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	613b      	str	r3, [r7, #16]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c4e:	697b      	ldr	r3, [r7, #20]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	2000089c 	.word	0x2000089c
 8004c5c:	080071d0 	.word	0x080071d0
 8004c60:	08004d9d 	.word	0x08004d9d
 8004c64:	200008a0 	.word	0x200008a0

08004c68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	623b      	str	r3, [r7, #32]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <xTimerGenericCommand+0x98>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d02a      	beq.n	8004cf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b05      	cmp	r3, #5
 8004cae:	dc18      	bgt.n	8004ce2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cb0:	f7ff fd70 	bl	8004794 <xTaskGetSchedulerState>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d109      	bne.n	8004cce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <xTimerGenericCommand+0x98>)
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	f107 0114 	add.w	r1, r7, #20
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc6:	f7fe fa51 	bl	800316c <xQueueGenericSend>
 8004cca:	6278      	str	r0, [r7, #36]	; 0x24
 8004ccc:	e012      	b.n	8004cf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cce:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <xTimerGenericCommand+0x98>)
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	f107 0114 	add.w	r1, r7, #20
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f7fe fa47 	bl	800316c <xQueueGenericSend>
 8004cde:	6278      	str	r0, [r7, #36]	; 0x24
 8004ce0:	e008      	b.n	8004cf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ce2:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <xTimerGenericCommand+0x98>)
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	f107 0114 	add.w	r1, r7, #20
 8004cea:	2300      	movs	r3, #0
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	f7fe fb3b 	bl	8003368 <xQueueGenericSendFromISR>
 8004cf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3728      	adds	r7, #40	; 0x28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	2000089c 	.word	0x2000089c

08004d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0e:	4b22      	ldr	r3, [pc, #136]	; (8004d98 <prvProcessExpiredTimer+0x94>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fe f8fb 	bl	8002f18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d022      	beq.n	8004d76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	699a      	ldr	r2, [r3, #24]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	18d1      	adds	r1, r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	6978      	ldr	r0, [r7, #20]
 8004d3e:	f000 f8d1 	bl	8004ee4 <prvInsertTimerInActiveList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01f      	beq.n	8004d88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	2100      	movs	r1, #0
 8004d52:	6978      	ldr	r0, [r7, #20]
 8004d54:	f7ff ff88 	bl	8004c68 <xTimerGenericCommand>
 8004d58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d113      	bne.n	8004d88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	6978      	ldr	r0, [r7, #20]
 8004d8e:	4798      	blx	r3
}
 8004d90:	bf00      	nop
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000894 	.word	0x20000894

08004d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004da4:	f107 0308 	add.w	r3, r7, #8
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f857 	bl	8004e5c <prvGetNextExpireTime>
 8004dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4619      	mov	r1, r3
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f803 	bl	8004dc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dba:	f000 f8d5 	bl	8004f68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dbe:	e7f1      	b.n	8004da4 <prvTimerTask+0x8>

08004dc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dca:	f7ff f909 	bl	8003fe0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dce:	f107 0308 	add.w	r3, r7, #8
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f866 	bl	8004ea4 <prvSampleTimeNow>
 8004dd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d130      	bne.n	8004e42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <prvProcessTimerOrBlockTask+0x3c>
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d806      	bhi.n	8004dfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dee:	f7ff f905 	bl	8003ffc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff85 	bl	8004d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004dfa:	e024      	b.n	8004e46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <prvProcessTimerOrBlockTask+0x90>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <prvProcessTimerOrBlockTask+0x50>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <prvProcessTimerOrBlockTask+0x52>
 8004e10:	2300      	movs	r3, #0
 8004e12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <prvProcessTimerOrBlockTask+0x94>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4619      	mov	r1, r3
 8004e22:	f7fe fe7b 	bl	8003b1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e26:	f7ff f8e9 	bl	8003ffc <xTaskResumeAll>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e30:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <prvProcessTimerOrBlockTask+0x98>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
}
 8004e40:	e001      	b.n	8004e46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e42:	f7ff f8db 	bl	8003ffc <xTaskResumeAll>
}
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000898 	.word	0x20000898
 8004e54:	2000089c 	.word	0x2000089c
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <prvGetNextExpireTime+0x44>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <prvGetNextExpireTime+0x16>
 8004e6e:	2201      	movs	r2, #1
 8004e70:	e000      	b.n	8004e74 <prvGetNextExpireTime+0x18>
 8004e72:	2200      	movs	r2, #0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <prvGetNextExpireTime+0x44>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	e001      	b.n	8004e90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e90:	68fb      	ldr	r3, [r7, #12]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000894 	.word	0x20000894

08004ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004eac:	f7ff f942 	bl	8004134 <xTaskGetTickCount>
 8004eb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <prvSampleTimeNow+0x3c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d205      	bcs.n	8004ec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ebc:	f000 f91a 	bl	80050f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ece:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <prvSampleTimeNow+0x3c>)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200008a4 	.word	0x200008a4

08004ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d812      	bhi.n	8004f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e01b      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <prvInsertTimerInActiveList+0x7c>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fd ffbc 	bl	8002ea6 <vListInsert>
 8004f2e:	e012      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d206      	bcs.n	8004f46 <prvInsertTimerInActiveList+0x62>
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d302      	bcc.n	8004f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e007      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvInsertTimerInActiveList+0x80>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f7fd ffa8 	bl	8002ea6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000898 	.word	0x20000898
 8004f64:	20000894 	.word	0x20000894

08004f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08c      	sub	sp, #48	; 0x30
 8004f6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f6e:	e0ae      	b.n	80050ce <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f2c0 80aa 	blt.w	80050cc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	3304      	adds	r3, #4
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fd ffc5 	bl	8002f18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff87 	bl	8004ea4 <prvSampleTimeNow>
 8004f96:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b09      	cmp	r3, #9
 8004f9c:	f200 8097 	bhi.w	80050ce <prvProcessReceivedCommands+0x166>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <prvProcessReceivedCommands+0x40>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fd1 	.word	0x08004fd1
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fd1 	.word	0x08004fd1
 8004fb4:	08005045 	.word	0x08005045
 8004fb8:	08005059 	.word	0x08005059
 8004fbc:	080050a3 	.word	0x080050a3
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fd1 	.word	0x08004fd1
 8004fc8:	08005045 	.word	0x08005045
 8004fcc:	08005059 	.word	0x08005059
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	18d1      	adds	r1, r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ff0:	f7ff ff78 	bl	8004ee4 <prvInsertTimerInActiveList>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d069      	beq.n	80050ce <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d05e      	beq.n	80050ce <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	441a      	add	r2, r3
 8005018:	2300      	movs	r3, #0
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2300      	movs	r3, #0
 800501e:	2100      	movs	r1, #0
 8005020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005022:	f7ff fe21 	bl	8004c68 <xTimerGenericCommand>
 8005026:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d14f      	bne.n	80050ce <prvProcessReceivedCommands+0x166>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	61bb      	str	r3, [r7, #24]
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	b2da      	uxtb	r2, r3
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005056:	e03a      	b.n	80050ce <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	b2da      	uxtb	r2, r3
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	617b      	str	r3, [r7, #20]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	18d1      	adds	r1, r2, r3
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800509c:	f7ff ff22 	bl	8004ee4 <prvInsertTimerInActiveList>
					break;
 80050a0:	e015      	b.n	80050ce <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d103      	bne.n	80050b8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80050b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050b2:	f000 fbdd 	bl	8005870 <vPortFree>
 80050b6:	e00a      	b.n	80050ce <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050ca:	e000      	b.n	80050ce <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80050cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <prvProcessReceivedCommands+0x188>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f107 0108 	add.w	r1, r7, #8
 80050d6:	2200      	movs	r2, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe f9e1 	bl	80034a0 <xQueueReceive>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f47f af45 	bne.w	8004f70 <prvProcessReceivedCommands+0x8>
	}
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	3728      	adds	r7, #40	; 0x28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2000089c 	.word	0x2000089c

080050f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050fa:	e048      	b.n	800518e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050fc:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <prvSwitchTimerLists+0xc0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005106:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <prvSwitchTimerLists+0xc0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3304      	adds	r3, #4
 8005114:	4618      	mov	r0, r3
 8005116:	f7fd feff 	bl	8002f18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02e      	beq.n	800518e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	d90e      	bls.n	8005160 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800514e:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <prvSwitchTimerLists+0xc0>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f7fd fea4 	bl	8002ea6 <vListInsert>
 800515e:	e016      	b.n	800518e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2300      	movs	r3, #0
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	2100      	movs	r1, #0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fd7c 	bl	8004c68 <xTimerGenericCommand>
 8005170:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	603b      	str	r3, [r7, #0]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <prvSwitchTimerLists+0xc0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1b1      	bne.n	80050fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <prvSwitchTimerLists+0xc0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <prvSwitchTimerLists+0xc4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a04      	ldr	r2, [pc, #16]	; (80051b4 <prvSwitchTimerLists+0xc0>)
 80051a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051a6:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <prvSwitchTimerLists+0xc4>)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	6013      	str	r3, [r2, #0]
}
 80051ac:	bf00      	nop
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000894 	.word	0x20000894
 80051b8:	20000898 	.word	0x20000898

080051bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051c2:	f000 f967 	bl	8005494 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <prvCheckForValidListAndQueue+0x60>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d120      	bne.n	8005210 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80051ce:	4814      	ldr	r0, [pc, #80]	; (8005220 <prvCheckForValidListAndQueue+0x64>)
 80051d0:	f7fd fe18 	bl	8002e04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051d4:	4813      	ldr	r0, [pc, #76]	; (8005224 <prvCheckForValidListAndQueue+0x68>)
 80051d6:	f7fd fe15 	bl	8002e04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <prvCheckForValidListAndQueue+0x6c>)
 80051dc:	4a10      	ldr	r2, [pc, #64]	; (8005220 <prvCheckForValidListAndQueue+0x64>)
 80051de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051e0:	4b12      	ldr	r3, [pc, #72]	; (800522c <prvCheckForValidListAndQueue+0x70>)
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <prvCheckForValidListAndQueue+0x68>)
 80051e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051e6:	2300      	movs	r3, #0
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	4b11      	ldr	r3, [pc, #68]	; (8005230 <prvCheckForValidListAndQueue+0x74>)
 80051ec:	4a11      	ldr	r2, [pc, #68]	; (8005234 <prvCheckForValidListAndQueue+0x78>)
 80051ee:	210c      	movs	r1, #12
 80051f0:	200a      	movs	r0, #10
 80051f2:	f7fd ff23 	bl	800303c <xQueueGenericCreateStatic>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <prvCheckForValidListAndQueue+0x60>)
 80051fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051fc:	4b07      	ldr	r3, [pc, #28]	; (800521c <prvCheckForValidListAndQueue+0x60>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <prvCheckForValidListAndQueue+0x60>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	490b      	ldr	r1, [pc, #44]	; (8005238 <prvCheckForValidListAndQueue+0x7c>)
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fc5c 	bl	8003ac8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005210:	f000 f970 	bl	80054f4 <vPortExitCritical>
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	2000089c 	.word	0x2000089c
 8005220:	2000086c 	.word	0x2000086c
 8005224:	20000880 	.word	0x20000880
 8005228:	20000894 	.word	0x20000894
 800522c:	20000898 	.word	0x20000898
 8005230:	20000920 	.word	0x20000920
 8005234:	200008a8 	.word	0x200008a8
 8005238:	080071d8 	.word	0x080071d8

0800523c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3b04      	subs	r3, #4
 800524c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3b04      	subs	r3, #4
 800525a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	3b04      	subs	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800526c:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <pxPortInitialiseStack+0x64>)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3b14      	subs	r3, #20
 8005276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b04      	subs	r3, #4
 8005282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f06f 0202 	mvn.w	r2, #2
 800528a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3b20      	subs	r3, #32
 8005290:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005292:	68fb      	ldr	r3, [r7, #12]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	080052a5 	.word	0x080052a5

080052a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <prvTaskExitError+0x54>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d00a      	beq.n	80052ce <prvTaskExitError+0x2a>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <prvTaskExitError+0x28>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	60bb      	str	r3, [r7, #8]
}
 80052e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052e2:	bf00      	nop
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0fc      	beq.n	80052e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	2000000c 	.word	0x2000000c
 80052fc:	00000000 	.word	0x00000000

08005300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <pxCurrentTCBConst2>)
 8005302:	6819      	ldr	r1, [r3, #0]
 8005304:	6808      	ldr	r0, [r1, #0]
 8005306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530a:	f380 8809 	msr	PSP, r0
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f380 8811 	msr	BASEPRI, r0
 800531a:	4770      	bx	lr
 800531c:	f3af 8000 	nop.w

08005320 <pxCurrentTCBConst2>:
 8005320:	20000740 	.word	0x20000740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005324:	bf00      	nop
 8005326:	bf00      	nop

08005328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005328:	4808      	ldr	r0, [pc, #32]	; (800534c <prvPortStartFirstTask+0x24>)
 800532a:	6800      	ldr	r0, [r0, #0]
 800532c:	6800      	ldr	r0, [r0, #0]
 800532e:	f380 8808 	msr	MSP, r0
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8814 	msr	CONTROL, r0
 800533a:	b662      	cpsie	i
 800533c:	b661      	cpsie	f
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	df00      	svc	0
 8005348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800534a:	bf00      	nop
 800534c:	e000ed08 	.word	0xe000ed08

08005350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005356:	4b46      	ldr	r3, [pc, #280]	; (8005470 <xPortStartScheduler+0x120>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a46      	ldr	r2, [pc, #280]	; (8005474 <xPortStartScheduler+0x124>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d10a      	bne.n	8005376 <xPortStartScheduler+0x26>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005376:	4b3e      	ldr	r3, [pc, #248]	; (8005470 <xPortStartScheduler+0x120>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a3f      	ldr	r2, [pc, #252]	; (8005478 <xPortStartScheduler+0x128>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10a      	bne.n	8005396 <xPortStartScheduler+0x46>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	60fb      	str	r3, [r7, #12]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005396:	4b39      	ldr	r3, [pc, #228]	; (800547c <xPortStartScheduler+0x12c>)
 8005398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	22ff      	movs	r2, #255	; 0xff
 80053a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4b31      	ldr	r3, [pc, #196]	; (8005480 <xPortStartScheduler+0x130>)
 80053bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053be:	4b31      	ldr	r3, [pc, #196]	; (8005484 <xPortStartScheduler+0x134>)
 80053c0:	2207      	movs	r2, #7
 80053c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053c4:	e009      	b.n	80053da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80053c6:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <xPortStartScheduler+0x134>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	4a2d      	ldr	r2, [pc, #180]	; (8005484 <xPortStartScheduler+0x134>)
 80053ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d0ef      	beq.n	80053c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053e6:	4b27      	ldr	r3, [pc, #156]	; (8005484 <xPortStartScheduler+0x134>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1c3 0307 	rsb	r3, r3, #7
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d00a      	beq.n	8005408 <xPortStartScheduler+0xb8>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60bb      	str	r3, [r7, #8]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005408:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <xPortStartScheduler+0x134>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <xPortStartScheduler+0x134>)
 8005410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005412:	4b1c      	ldr	r3, [pc, #112]	; (8005484 <xPortStartScheduler+0x134>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <xPortStartScheduler+0x134>)
 800541c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005426:	4b18      	ldr	r3, [pc, #96]	; (8005488 <xPortStartScheduler+0x138>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <xPortStartScheduler+0x138>)
 800542c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <xPortStartScheduler+0x138>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a14      	ldr	r2, [pc, #80]	; (8005488 <xPortStartScheduler+0x138>)
 8005438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800543c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800543e:	f000 f8dd 	bl	80055fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <xPortStartScheduler+0x13c>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005448:	f000 f8fc 	bl	8005644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800544c:	4b10      	ldr	r3, [pc, #64]	; (8005490 <xPortStartScheduler+0x140>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0f      	ldr	r2, [pc, #60]	; (8005490 <xPortStartScheduler+0x140>)
 8005452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005458:	f7ff ff66 	bl	8005328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800545c:	f7fe ff32 	bl	80042c4 <vTaskSwitchContext>
	prvTaskExitError();
 8005460:	f7ff ff20 	bl	80052a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	e000ed00 	.word	0xe000ed00
 8005474:	410fc271 	.word	0x410fc271
 8005478:	410fc270 	.word	0x410fc270
 800547c:	e000e400 	.word	0xe000e400
 8005480:	20000968 	.word	0x20000968
 8005484:	2000096c 	.word	0x2000096c
 8005488:	e000ed20 	.word	0xe000ed20
 800548c:	2000000c 	.word	0x2000000c
 8005490:	e000ef34 	.word	0xe000ef34

08005494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	607b      	str	r3, [r7, #4]
}
 80054ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <vPortEnterCritical+0x58>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	4a0d      	ldr	r2, [pc, #52]	; (80054ec <vPortEnterCritical+0x58>)
 80054b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <vPortEnterCritical+0x58>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10f      	bne.n	80054e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <vPortEnterCritical+0x5c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	603b      	str	r3, [r7, #0]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <vPortEnterCritical+0x4a>
	}
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	2000000c 	.word	0x2000000c
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <vPortExitCritical+0x50>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <vPortExitCritical+0x24>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	607b      	str	r3, [r7, #4]
}
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <vPortExitCritical+0x50>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3b01      	subs	r3, #1
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <vPortExitCritical+0x50>)
 8005520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <vPortExitCritical+0x50>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <vPortExitCritical+0x42>
 800552a:	2300      	movs	r3, #0
 800552c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f383 8811 	msr	BASEPRI, r3
}
 8005534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	2000000c 	.word	0x2000000c
	...

08005550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005550:	f3ef 8009 	mrs	r0, PSP
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <pxCurrentTCBConst>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	f01e 0f10 	tst.w	lr, #16
 8005560:	bf08      	it	eq
 8005562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556a:	6010      	str	r0, [r2, #0]
 800556c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005574:	f380 8811 	msr	BASEPRI, r0
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f7fe fea0 	bl	80042c4 <vTaskSwitchContext>
 8005584:	f04f 0000 	mov.w	r0, #0
 8005588:	f380 8811 	msr	BASEPRI, r0
 800558c:	bc09      	pop	{r0, r3}
 800558e:	6819      	ldr	r1, [r3, #0]
 8005590:	6808      	ldr	r0, [r1, #0]
 8005592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005596:	f01e 0f10 	tst.w	lr, #16
 800559a:	bf08      	it	eq
 800559c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055a0:	f380 8809 	msr	PSP, r0
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w

080055b0 <pxCurrentTCBConst>:
 80055b0:	20000740 	.word	0x20000740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop

080055b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	607b      	str	r3, [r7, #4]
}
 80055d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055d2:	f7fe fdbf 	bl	8004154 <xTaskIncrementTick>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <SysTick_Handler+0x40>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	f383 8811 	msr	BASEPRI, r3
}
 80055ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <vPortSetupTimerInterrupt+0x34>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <vPortSetupTimerInterrupt+0x38>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <vPortSetupTimerInterrupt+0x3c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a0a      	ldr	r2, [pc, #40]	; (800563c <vPortSetupTimerInterrupt+0x40>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	099b      	lsrs	r3, r3, #6
 8005618:	4a09      	ldr	r2, [pc, #36]	; (8005640 <vPortSetupTimerInterrupt+0x44>)
 800561a:	3b01      	subs	r3, #1
 800561c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <vPortSetupTimerInterrupt+0x34>)
 8005620:	2207      	movs	r2, #7
 8005622:	601a      	str	r2, [r3, #0]
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	e000e010 	.word	0xe000e010
 8005634:	e000e018 	.word	0xe000e018
 8005638:	20000000 	.word	0x20000000
 800563c:	10624dd3 	.word	0x10624dd3
 8005640:	e000e014 	.word	0xe000e014

08005644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005654 <vPortEnableVFP+0x10>
 8005648:	6801      	ldr	r1, [r0, #0]
 800564a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800564e:	6001      	str	r1, [r0, #0]
 8005650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005652:	bf00      	nop
 8005654:	e000ed88 	.word	0xe000ed88

08005658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800565e:	f3ef 8305 	mrs	r3, IPSR
 8005662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b0f      	cmp	r3, #15
 8005668:	d914      	bls.n	8005694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <vPortValidateInterruptPriority+0x70>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005674:	4b15      	ldr	r3, [pc, #84]	; (80056cc <vPortValidateInterruptPriority+0x74>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	7afa      	ldrb	r2, [r7, #11]
 800567a:	429a      	cmp	r2, r3
 800567c:	d20a      	bcs.n	8005694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
}
 8005690:	bf00      	nop
 8005692:	e7fe      	b.n	8005692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <vPortValidateInterruptPriority+0x78>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800569c:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <vPortValidateInterruptPriority+0x7c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d90a      	bls.n	80056ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	603b      	str	r3, [r7, #0]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <vPortValidateInterruptPriority+0x60>
	}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	e000e3f0 	.word	0xe000e3f0
 80056cc:	20000968 	.word	0x20000968
 80056d0:	e000ed0c 	.word	0xe000ed0c
 80056d4:	2000096c 	.word	0x2000096c

080056d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056e4:	f7fe fc7c 	bl	8003fe0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056e8:	4b5b      	ldr	r3, [pc, #364]	; (8005858 <pvPortMalloc+0x180>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056f0:	f000 f920 	bl	8005934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056f4:	4b59      	ldr	r3, [pc, #356]	; (800585c <pvPortMalloc+0x184>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f040 8093 	bne.w	8005828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01d      	beq.n	8005744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005708:	2208      	movs	r2, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4413      	add	r3, r2
 800570e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	2b00      	cmp	r3, #0
 8005718:	d014      	beq.n	8005744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f023 0307 	bic.w	r3, r3, #7
 8005720:	3308      	adds	r3, #8
 8005722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <pvPortMalloc+0x6c>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	617b      	str	r3, [r7, #20]
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d06e      	beq.n	8005828 <pvPortMalloc+0x150>
 800574a:	4b45      	ldr	r3, [pc, #276]	; (8005860 <pvPortMalloc+0x188>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d869      	bhi.n	8005828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005754:	4b43      	ldr	r3, [pc, #268]	; (8005864 <pvPortMalloc+0x18c>)
 8005756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005758:	4b42      	ldr	r3, [pc, #264]	; (8005864 <pvPortMalloc+0x18c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800575e:	e004      	b.n	800576a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d903      	bls.n	800577c <pvPortMalloc+0xa4>
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f1      	bne.n	8005760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800577c:	4b36      	ldr	r3, [pc, #216]	; (8005858 <pvPortMalloc+0x180>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	429a      	cmp	r2, r3
 8005784:	d050      	beq.n	8005828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2208      	movs	r2, #8
 800578c:	4413      	add	r3, r2
 800578e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	2308      	movs	r3, #8
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d91f      	bls.n	80057e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <pvPortMalloc+0xf8>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	613b      	str	r3, [r7, #16]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	1ad2      	subs	r2, r2, r3
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057e2:	69b8      	ldr	r0, [r7, #24]
 80057e4:	f000 f908 	bl	80059f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <pvPortMalloc+0x188>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	4a1b      	ldr	r2, [pc, #108]	; (8005860 <pvPortMalloc+0x188>)
 80057f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057f6:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <pvPortMalloc+0x188>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <pvPortMalloc+0x190>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d203      	bcs.n	800580a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005802:	4b17      	ldr	r3, [pc, #92]	; (8005860 <pvPortMalloc+0x188>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a18      	ldr	r2, [pc, #96]	; (8005868 <pvPortMalloc+0x190>)
 8005808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <pvPortMalloc+0x184>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	431a      	orrs	r2, r3
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <pvPortMalloc+0x194>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	4a11      	ldr	r2, [pc, #68]	; (800586c <pvPortMalloc+0x194>)
 8005826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005828:	f7fe fbe8 	bl	8003ffc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <pvPortMalloc+0x174>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60fb      	str	r3, [r7, #12]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <pvPortMalloc+0x172>
	return pvReturn;
 800584c:	69fb      	ldr	r3, [r7, #28]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3728      	adds	r7, #40	; 0x28
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20004578 	.word	0x20004578
 800585c:	2000458c 	.word	0x2000458c
 8005860:	2000457c 	.word	0x2000457c
 8005864:	20004570 	.word	0x20004570
 8005868:	20004580 	.word	0x20004580
 800586c:	20004584 	.word	0x20004584

08005870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04d      	beq.n	800591e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005882:	2308      	movs	r3, #8
 8005884:	425b      	negs	r3, r3
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4413      	add	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	4b24      	ldr	r3, [pc, #144]	; (8005928 <vPortFree+0xb8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4013      	ands	r3, r2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <vPortFree+0x44>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60fb      	str	r3, [r7, #12]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <vPortFree+0x62>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60bb      	str	r3, [r7, #8]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <vPortFree+0xb8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01e      	beq.n	800591e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d11a      	bne.n	800591e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <vPortFree+0xb8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058f8:	f7fe fb72 	bl	8003fe0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <vPortFree+0xbc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4413      	add	r3, r2
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <vPortFree+0xbc>)
 8005908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800590a:	6938      	ldr	r0, [r7, #16]
 800590c:	f000 f874 	bl	80059f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <vPortFree+0xc0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a06      	ldr	r2, [pc, #24]	; (8005930 <vPortFree+0xc0>)
 8005918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800591a:	f7fe fb6f 	bl	8003ffc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800591e:	bf00      	nop
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	2000458c 	.word	0x2000458c
 800592c:	2000457c 	.word	0x2000457c
 8005930:	20004588 	.word	0x20004588

08005934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800593a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800593e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005940:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <prvHeapInit+0xac>)
 8005942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00c      	beq.n	8005968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3307      	adds	r3, #7
 8005952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0307 	bic.w	r3, r3, #7
 800595a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <prvHeapInit+0xac>)
 8005964:	4413      	add	r3, r2
 8005966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800596c:	4a1d      	ldr	r2, [pc, #116]	; (80059e4 <prvHeapInit+0xb0>)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <prvHeapInit+0xb0>)
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4413      	add	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005980:	2208      	movs	r2, #8
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <prvHeapInit+0xb4>)
 8005994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005996:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <prvHeapInit+0xb4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <prvHeapInit+0xb4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <prvHeapInit+0xb4>)
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4a0a      	ldr	r2, [pc, #40]	; (80059ec <prvHeapInit+0xb8>)
 80059c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	4a09      	ldr	r2, [pc, #36]	; (80059f0 <prvHeapInit+0xbc>)
 80059ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <prvHeapInit+0xc0>)
 80059ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	20000970 	.word	0x20000970
 80059e4:	20004570 	.word	0x20004570
 80059e8:	20004578 	.word	0x20004578
 80059ec:	20004580 	.word	0x20004580
 80059f0:	2000457c 	.word	0x2000457c
 80059f4:	2000458c 	.word	0x2000458c

080059f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a00:	4b28      	ldr	r3, [pc, #160]	; (8005aa4 <prvInsertBlockIntoFreeList+0xac>)
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e002      	b.n	8005a0c <prvInsertBlockIntoFreeList+0x14>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d8f7      	bhi.n	8005a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d108      	bne.n	8005a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d118      	bne.n	8005a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b15      	ldr	r3, [pc, #84]	; (8005aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d00d      	beq.n	8005a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	e008      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a76:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e003      	b.n	8005a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d002      	beq.n	8005a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20004570 	.word	0x20004570
 8005aa8:	20004578 	.word	0x20004578

08005aac <ELClient_Init>:

static void __ProtoCompletedCb(void);

/* ===== Initialization ======== */
void ELClient_Init() 
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af02      	add	r7, sp, #8
  _proto.buf = _protoBuf;
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <ELClient_Init+0x44>)
 8005ab4:	4a0f      	ldr	r2, [pc, #60]	; (8005af4 <ELClient_Init+0x48>)
 8005ab6:	601a      	str	r2, [r3, #0]
  _proto.bufSize = sizeof(_protoBuf);
 8005ab8:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <ELClient_Init+0x44>)
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	809a      	strh	r2, [r3, #4]
  _proto.dataLen = 0;
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <ELClient_Init+0x44>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	80da      	strh	r2, [r3, #6]
  _proto.isEsc = 0;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <ELClient_Init+0x44>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	721a      	strb	r2, [r3, #8]

  /* Semaphore to notify received new frame */
  xCompltSemp = xSemaphoreCreateBinaryStatic( &xCompltSempBuffer );
 8005aca:	2303      	movs	r3, #3
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <ELClient_Init+0x4c>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7fd fab1 	bl	800303c <xQueueGenericCreateStatic>
 8005ada:	4603      	mov	r3, r0
 8005adc:	4a07      	ldr	r2, [pc, #28]	; (8005afc <ELClient_Init+0x50>)
 8005ade:	6013      	str	r3, [r2, #0]
 
  /* Transport init */
  xPortEventInit();
 8005ae0:	f000 fe16 	bl	8006710 <xPortEventInit>
  ELCLient_Transport_Init();
 8005ae4:	f000 fbbe 	bl	8006264 <ELCLient_Transport_Init>
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20004614 	.word	0x20004614
 8005af4:	20004594 	.word	0x20004594
 8005af8:	20004b4c 	.word	0x20004b4c
 8005afc:	20004b48 	.word	0x20004b48

08005b00 <ELClient_Process>:


/* ELClient main process */
void ELClient_Process(void* arg)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint8_t value = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
	  /* Read one-by-one data byte from serial queue */
	  value = ELClient_Read();
 8005b0c:	f000 fbc4 	bl	8006298 <ELClient_Read>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]
	  if (value == SLIP_ESC) /* Check special byte & raise flag */
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2bdb      	cmp	r3, #219	; 0xdb
 8005b18:	d103      	bne.n	8005b22 <ELClient_Process+0x22>
	  {
		_proto.isEsc = 1;
 8005b1a:	4b21      	ldr	r3, [pc, #132]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	721a      	strb	r2, [r3, #8]
 8005b20:	e7f4      	b.n	8005b0c <ELClient_Process+0xc>
	  } else if (value == SLIP_END) /* Check End Frame */
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2bc0      	cmp	r3, #192	; 0xc0
 8005b26:	d113      	bne.n	8005b50 <ELClient_Process+0x50>
	  {
		  if ( _proto.dataLen >= 8 ) { /* 8 = minimum header len*/
 8005b28:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b2a:	88db      	ldrh	r3, [r3, #6]
 8005b2c:	2b07      	cmp	r3, #7
 8005b2e:	d908      	bls.n	8005b42 <ELClient_Process+0x42>
			__ProtoCompletedCb();
 8005b30:	f000 f880 	bl	8005c34 <__ProtoCompletedCb>
			xSemaphoreGive( xCompltSemp );
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <ELClient_Process+0xa4>)
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	f7fd fb15 	bl	800316c <xQueueGenericSend>
		  }
		  _proto.dataLen = 0;
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	80da      	strh	r2, [r3, #6]
		  _proto.isEsc = 0;
 8005b48:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	721a      	strb	r2, [r3, #8]
 8005b4e:	e7dd      	b.n	8005b0c <ELClient_Process+0xc>
	  } else
	  {
		if (_proto.isEsc)
 8005b50:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b52:	7a1b      	ldrb	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00c      	beq.n	8005b72 <ELClient_Process+0x72>
		{
		  if (value == SLIP_ESC_END) { value = SLIP_END; }
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2bdc      	cmp	r3, #220	; 0xdc
 8005b5c:	d101      	bne.n	8005b62 <ELClient_Process+0x62>
 8005b5e:	23c0      	movs	r3, #192	; 0xc0
 8005b60:	73fb      	strb	r3, [r7, #15]
		  if (value == SLIP_ESC_ESC) { value = SLIP_ESC; }
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2bdd      	cmp	r3, #221	; 0xdd
 8005b66:	d101      	bne.n	8005b6c <ELClient_Process+0x6c>
 8005b68:	23db      	movs	r3, #219	; 0xdb
 8005b6a:	73fb      	strb	r3, [r7, #15]
		  _proto.isEsc = 0;
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	721a      	strb	r2, [r3, #8]
		}
		if (_proto.dataLen < _proto.bufSize) {
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b74:	88da      	ldrh	r2, [r3, #6]
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b78:	889b      	ldrh	r3, [r3, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d20b      	bcs.n	8005b96 <ELClient_Process+0x96>
		  _proto.buf[_proto.dataLen++] = value;
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b84:	88db      	ldrh	r3, [r3, #6]
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	b288      	uxth	r0, r1
 8005b8a:	4905      	ldr	r1, [pc, #20]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b8c:	80c8      	strh	r0, [r1, #6]
 8005b8e:	4413      	add	r3, r2
 8005b90:	7bfa      	ldrb	r2, [r7, #15]
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	e7ba      	b.n	8005b0c <ELClient_Process+0xc>
		}else
		{
			_proto.dataLen = 0;
 8005b96:	4b02      	ldr	r3, [pc, #8]	; (8005ba0 <ELClient_Process+0xa0>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	80da      	strh	r2, [r3, #6]
	  value = ELClient_Read();
 8005b9c:	e7b6      	b.n	8005b0c <ELClient_Process+0xc>
 8005b9e:	bf00      	nop
 8005ba0:	20004614 	.word	0x20004614
 8005ba4:	20004b48 	.word	0x20004b48

08005ba8 <ELClientMqtt_WifiCbRegister>:
	  }
  }
}

void ELClientMqtt_WifiCbRegister(void* fn)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  _wifiCb = (elclient_callback_fn)fn;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <ELClientMqtt_WifiCbRegister+0x1c>)
 8005bb4:	6013      	str	r3, [r2, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20004620 	.word	0x20004620

08005bc8 <ELClient_WaitReturn>:

BaseType_t ELClient_WaitReturn(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
	return (xSemaphoreTake( xCompltSemp, ( TickType_t ) 3000 ) == pdTRUE);
 8005bcc:	4b07      	ldr	r3, [pc, #28]	; (8005bec <ELClient_WaitReturn+0x24>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fd fd43 	bl	8003660 <xQueueSemaphoreTake>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20004b48 	.word	0x20004b48

08005bf0 <ELClient_Sync>:

BOOL ELClient_Sync(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* send a SLIP END char to make sure we get a clean start */
  xPortSerialPutByte(SLIP_END);
 8005bf4:	20c0      	movs	r0, #192	; 0xc0
 8005bf6:	f000 fdd7 	bl	80067a8 <xPortSerialPutByte>
  
  /* send sync request */
  ELClient_RequestArgc(CMD_SYNC, (uint32_t)&_wifiCb, 0);
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <ELClient_Sync+0x3c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	4619      	mov	r1, r3
 8005c00:	2001      	movs	r0, #1
 8005c02:	f000 f9b9 	bl	8005f78 <ELClient_RequestArgc>
  ELClient_EndRequest();
 8005c06:	f000 fa59 	bl	80060bc <ELClient_EndRequest>

  if ( ELClient_WaitReturn() )
 8005c0a:	f7ff ffdd 	bl	8005bc8 <ELClient_WaitReturn>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <ELClient_Sync+0x34>
  {
	  if (compltPacketPtr->value == (uint32_t)&_wifiCb) 
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <ELClient_Sync+0x40>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <ELClient_Sync+0x3c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <ELClient_Sync+0x34>
    {
		  return TRUE;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <ELClient_Sync+0x36>
	  }
  }

  return FALSE;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20004620 	.word	0x20004620
 8005c30:	20004590 	.word	0x20004590

08005c34 <__ProtoCompletedCb>:
  ELClient_EndRequest();
}

/*================ CALLBACK HANDLER ================== */
static void __ProtoCompletedCb(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
  compltPacketPtr = (ELClientPacket*)_proto.buf;
 8005c3a:	4b32      	ldr	r3, [pc, #200]	; (8005d04 <__ProtoCompletedCb+0xd0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a32      	ldr	r2, [pc, #200]	; (8005d08 <__ProtoCompletedCb+0xd4>)
 8005c40:	6013      	str	r3, [r2, #0]

  elclient_callback_fn  fp;

  /* verify CRC */
  /* Calculated from received Frame, excludes 2 last bytes CRC */
  uint16_t crc = _crc16Data(_proto.buf, _proto.dataLen-2, 0);
 8005c42:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <__ProtoCompletedCb+0xd0>)
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <__ProtoCompletedCb+0xd0>)
 8005c48:	88db      	ldrh	r3, [r3, #6]
 8005c4a:	3b02      	subs	r3, #2
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2200      	movs	r2, #0
 8005c50:	4619      	mov	r1, r3
 8005c52:	f000 f8a5 	bl	8005da0 <_crc16Data>
 8005c56:	4603      	mov	r3, r0
 8005c58:	80fb      	strh	r3, [r7, #6]
  uint16_t resp_crc = *(uint16_t*)(_proto.buf+_proto.dataLen-2); /* Respone CRC */
 8005c5a:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <__ProtoCompletedCb+0xd0>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b29      	ldr	r3, [pc, #164]	; (8005d04 <__ProtoCompletedCb+0xd0>)
 8005c60:	88db      	ldrh	r3, [r3, #6]
 8005c62:	3b02      	subs	r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	80bb      	strh	r3, [r7, #4]
  if (crc != resp_crc) {
 8005c6a:	88fa      	ldrh	r2, [r7, #6]
 8005c6c:	88bb      	ldrh	r3, [r7, #4]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d003      	beq.n	8005c7a <__ProtoCompletedCb+0x46>
    DBG_PRINTF("ELC: Invalid CRC");
 8005c72:	4826      	ldr	r0, [pc, #152]	; (8005d0c <__ProtoCompletedCb+0xd8>)
 8005c74:	f000 fb98 	bl	80063a8 <debug_printf>
    return ;
 8005c78:	e040      	b.n	8005cfc <__ProtoCompletedCb+0xc8>
  }

	/* dispatch based on command */
	switch (compltPacketPtr->cmd)
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <__ProtoCompletedCb+0xd4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d010      	beq.n	8005ca8 <__ProtoCompletedCb+0x74>
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	dc33      	bgt.n	8005cf2 <__ProtoCompletedCb+0xbe>
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d02d      	beq.n	8005cea <__ProtoCompletedCb+0xb6>
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d12f      	bne.n	8005cf2 <__ProtoCompletedCb+0xbe>
  {
	  /*VALUE FEILD = normal value */
	  case CMD_RESP_V: // response with a value: return the packet
		  // value response
		  DBG_PRINTF("RESP_V: ");
 8005c92:	481f      	ldr	r0, [pc, #124]	; (8005d10 <__ProtoCompletedCb+0xdc>)
 8005c94:	f000 fb88 	bl	80063a8 <debug_printf>
		  DUMP_BUFFER(&(compltPacketPtr->value), 1);
 8005c98:	4b1b      	ldr	r3, [pc, #108]	; (8005d08 <__ProtoCompletedCb+0xd4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fba7 	bl	80063f4 <debug_send_buffer>
		 break;
 8005ca6:	e029      	b.n	8005cfc <__ProtoCompletedCb+0xc8>

		 /*VALUE FEILD = Pointer */
	  case CMD_RESP_CB: /* response callback: perform the callback! */
		  DBG_PRINTF("RESP_CB: ");
 8005ca8:	481a      	ldr	r0, [pc, #104]	; (8005d14 <__ProtoCompletedCb+0xe0>)
 8005caa:	f000 fb7d 	bl	80063a8 <debug_printf>
		  DBG_PRINTF(compltPacketPtr->value);
 8005cae:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <__ProtoCompletedCb+0xd4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fb77 	bl	80063a8 <debug_printf>
		  DBG_PRINTF(" ");
 8005cba:	4817      	ldr	r0, [pc, #92]	; (8005d18 <__ProtoCompletedCb+0xe4>)
 8005cbc:	f000 fb74 	bl	80063a8 <debug_printf>
		  DBG_PRINTF(compltPacketPtr->argc);
 8005cc0:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <__ProtoCompletedCb+0xd4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	885b      	ldrh	r3, [r3, #2]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fb6d 	bl	80063a8 <debug_printf>
		  /* cast to function pointer (elclient_callback_fn*)(compltPacketPtr->value) & get value*/
		  fp = *((elclient_callback_fn*)(compltPacketPtr->value));
 8005cce:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <__ProtoCompletedCb+0xd4>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	603b      	str	r3, [r7, #0]
		  /* fp = Application Function Pointer */
		  if (fp != NULL)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00d      	beq.n	8005cfa <__ProtoCompletedCb+0xc6>
		  {
		  	(fp)(compltPacketPtr); /*Call back registered USER function, USER process payload */
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <__ProtoCompletedCb+0xd4>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
		  }
		 break;
 8005ce8:	e007      	b.n	8005cfa <__ProtoCompletedCb+0xc6>

	  case CMD_SYNC: /* esp-link is not in sync, it may have reset, signal up the stack */
		  DBG_PRINTF("NEED_SYNC!");
 8005cea:	480c      	ldr	r0, [pc, #48]	; (8005d1c <__ProtoCompletedCb+0xe8>)
 8005cec:	f000 fb5c 	bl	80063a8 <debug_printf>
		  break;
 8005cf0:	e004      	b.n	8005cfc <__ProtoCompletedCb+0xc8>

	  default:
		  DBG_PRINTF("CMD??");
 8005cf2:	480b      	ldr	r0, [pc, #44]	; (8005d20 <__ProtoCompletedCb+0xec>)
 8005cf4:	f000 fb58 	bl	80063a8 <debug_printf>
		  break;
 8005cf8:	e000      	b.n	8005cfc <__ProtoCompletedCb+0xc8>
		 break;
 8005cfa:	bf00      	nop
	 }
}
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20004614 	.word	0x20004614
 8005d08:	20004590 	.word	0x20004590
 8005d0c:	080071e0 	.word	0x080071e0
 8005d10:	080071f4 	.word	0x080071f4
 8005d14:	08007200 	.word	0x08007200
 8005d18:	0800720c 	.word	0x0800720c
 8005d1c:	08007210 	.word	0x08007210
 8005d20:	0800721c 	.word	0x0800721c

08005d24 <_crc16Add>:
#include "ELClientCRC.h"

uint16_t _crc16Add(unsigned char b, uint16_t sum)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	71fb      	strb	r3, [r7, #7]
 8005d30:	4613      	mov	r3, r2
 8005d32:	80bb      	strh	r3, [r7, #4]
  uint16_t acc = sum;
 8005d34:	88bb      	ldrh	r3, [r7, #4]
 8005d36:	81fb      	strh	r3, [r7, #14]

  acc ^= b;
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	89fb      	ldrh	r3, [r7, #14]
 8005d3e:	4053      	eors	r3, r2
 8005d40:	81fb      	strh	r3, [r7, #14]
  acc = (acc >> 8) | (acc << 8);
 8005d42:	89fb      	ldrh	r3, [r7, #14]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	b21a      	sxth	r2, r3
 8005d4a:	89fb      	ldrh	r3, [r7, #14]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	b21b      	sxth	r3, r3
 8005d50:	4313      	orrs	r3, r2
 8005d52:	b21b      	sxth	r3, r3
 8005d54:	81fb      	strh	r3, [r7, #14]
  acc ^= (acc & 0xff00) << 4;
 8005d56:	89fb      	ldrh	r3, [r7, #14]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	b21b      	sxth	r3, r3
 8005d5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d60:	f023 030f 	bic.w	r3, r3, #15
 8005d64:	b21a      	sxth	r2, r3
 8005d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d6a:	4053      	eors	r3, r2
 8005d6c:	b21b      	sxth	r3, r3
 8005d6e:	81fb      	strh	r3, [r7, #14]
  acc ^= (acc >> 8) >> 4;
 8005d70:	89fb      	ldrh	r3, [r7, #14]
 8005d72:	0b1b      	lsrs	r3, r3, #12
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	89fb      	ldrh	r3, [r7, #14]
 8005d78:	4053      	eors	r3, r2
 8005d7a:	81fb      	strh	r3, [r7, #14]
  acc ^= (acc & 0xff00) >> 5;
 8005d7c:	89fb      	ldrh	r3, [r7, #14]
 8005d7e:	115b      	asrs	r3, r3, #5
 8005d80:	b21b      	sxth	r3, r3
 8005d82:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005d86:	b21a      	sxth	r2, r3
 8005d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d8c:	4053      	eors	r3, r2
 8005d8e:	b21b      	sxth	r3, r3
 8005d90:	81fb      	strh	r3, [r7, #14]

  return acc;
 8005d92:	89fb      	ldrh	r3, [r7, #14]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <_crc16Data>:

uint16_t _crc16Data(const unsigned char *data, uint16_t len, uint16_t acc)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
 8005dac:	4613      	mov	r3, r2
 8005dae:	803b      	strh	r3, [r7, #0]
  uint16_t i = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	81fb      	strh	r3, [r7, #14]
  uint16_t sum = acc;
 8005db4:	883b      	ldrh	r3, [r7, #0]
 8005db6:	81bb      	strh	r3, [r7, #12]

  for (i=0; i<len; i++)
 8005db8:	2300      	movs	r3, #0
 8005dba:	81fb      	strh	r3, [r7, #14]
 8005dbc:	e00d      	b.n	8005dda <_crc16Data+0x3a>
  {
    sum = _crc16Add(*data++, sum);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	89ba      	ldrh	r2, [r7, #12]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ffaa 	bl	8005d24 <_crc16Add>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	81bb      	strh	r3, [r7, #12]
  for (i=0; i<len; i++)
 8005dd4:	89fb      	ldrh	r3, [r7, #14]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	81fb      	strh	r3, [r7, #14]
 8005dda:	89fa      	ldrh	r2, [r7, #14]
 8005ddc:	887b      	ldrh	r3, [r7, #2]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3ed      	bcc.n	8005dbe <_crc16Data+0x1e>
  }

  return sum;
 8005de2:	89bb      	ldrh	r3, [r7, #12]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <ELClientMqtt_ConnectedCbRegister>:
#include "ELClient.h"

static ELClient_MQTT_Struct_t  EL_Mqtt_Struct;

void ELClientMqtt_ConnectedCbRegister(void* fn)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	EL_Mqtt_Struct.connectedCb = fn;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <ELClientMqtt_ConnectedCbRegister+0x1c>)
 8005df8:	6013      	str	r3, [r2, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20004624 	.word	0x20004624

08005e0c <ELClientMqtt_DisconnectedCbRegister>:

void ELClientMqtt_DisconnectedCbRegister(void* fn)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	EL_Mqtt_Struct.disconnectedCb = fn;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a04      	ldr	r2, [pc, #16]	; (8005e28 <ELClientMqtt_DisconnectedCbRegister+0x1c>)
 8005e18:	6053      	str	r3, [r2, #4]
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20004624 	.word	0x20004624

08005e2c <ELClientMqtt_PublishedCbRegister>:

void ELClientMqtt_PublishedCbRegister(void* fn)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	EL_Mqtt_Struct.publishedCb = fn;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <ELClientMqtt_PublishedCbRegister+0x1c>)
 8005e38:	6093      	str	r3, [r2, #8]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20004624 	.word	0x20004624

08005e4c <ELClientMqtt_DataCbRegister>:

void ELClientMqtt_DataCbRegister(void* fn)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	EL_Mqtt_Struct.dataCb = fn;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a04      	ldr	r2, [pc, #16]	; (8005e68 <ELClientMqtt_DataCbRegister+0x1c>)
 8005e58:	60d3      	str	r3, [r2, #12]
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20004624 	.word	0x20004624

08005e6c <ELClientMqtt_setup>:

/* Send MQTT Setup Frame */
void ELClientMqtt_setup() 
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
  uint32_t fncCbPtr = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]

  /* Send frame header */
  ELClient_RequestArgc(CMD_MQTT_SETUP, 0, 4);
 8005e76:	2204      	movs	r2, #4
 8005e78:	2100      	movs	r1, #0
 8005e7a:	200a      	movs	r0, #10
 8005e7c:	f000 f87c 	bl	8005f78 <ELClient_RequestArgc>

  /* Send address of mqtt callback function pointer  */
  fncCbPtr = (uint32_t)(&EL_Mqtt_Struct.connectedCb);
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <ELClientMqtt_setup+0x58>)
 8005e82:	607b      	str	r3, [r7, #4]
  ELClient_RequestBuffer(&fncCbPtr, 4);
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	2104      	movs	r1, #4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f8b9 	bl	8006000 <ELClient_RequestBuffer>

  fncCbPtr = (uint32_t)(&EL_Mqtt_Struct.disconnectedCb);
 8005e8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <ELClientMqtt_setup+0x5c>)
 8005e90:	607b      	str	r3, [r7, #4]
  ELClient_RequestBuffer(&fncCbPtr, 4);
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	2104      	movs	r1, #4
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f8b2 	bl	8006000 <ELClient_RequestBuffer>

  fncCbPtr = (uint32_t)(&EL_Mqtt_Struct.publishedCb);
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <ELClientMqtt_setup+0x60>)
 8005e9e:	607b      	str	r3, [r7, #4]
  ELClient_RequestBuffer(&fncCbPtr, 4);
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	2104      	movs	r1, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f8ab 	bl	8006000 <ELClient_RequestBuffer>

  fncCbPtr = (uint32_t)(&EL_Mqtt_Struct.dataCb);
 8005eaa:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <ELClientMqtt_setup+0x64>)
 8005eac:	607b      	str	r3, [r7, #4]
  ELClient_RequestBuffer(&fncCbPtr, 4);
 8005eae:	1d3b      	adds	r3, r7, #4
 8005eb0:	2104      	movs	r1, #4
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f8a4 	bl	8006000 <ELClient_RequestBuffer>

  ELClient_EndRequest();
 8005eb8:	f000 f900 	bl	80060bc <ELClient_EndRequest>
}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20004624 	.word	0x20004624
 8005ec8:	20004628 	.word	0x20004628
 8005ecc:	2000462c 	.word	0x2000462c
 8005ed0:	20004630 	.word	0x20004630

08005ed4 <ELClientMqtt_subscribe>:

/* SUBSCRIBE Request */
void ELClientMqtt_subscribe(const char* topic, uint8_t qos) 
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  /* Send frame header */
  ELClient_RequestArgc(CMD_MQTT_SUBSCRIBE, 0, 2);
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	200c      	movs	r0, #12
 8005ee6:	f000 f847 	bl	8005f78 <ELClient_RequestArgc>

  ELClient_RequestBuffer(topic, strlen(topic));
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fa f97a 	bl	80001e4 <strlen>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f882 	bl	8006000 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(&qos, 1);
 8005efc:	1cfb      	adds	r3, r7, #3
 8005efe:	2101      	movs	r1, #1
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f87d 	bl	8006000 <ELClient_RequestBuffer>

  ELClient_EndRequest();
 8005f06:	f000 f8d9 	bl	80060bc <ELClient_EndRequest>
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <ELClientMqtt_publish>:

/* PUBLISH Request */
void ELClientMqtt_publish(const uint8_t* topic, const char* data,
                          const uint16_t len, uint8_t qos, 
                          uint8_t retain)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	461a      	mov	r2, r3
 8005f20:	460b      	mov	r3, r1
 8005f22:	80fb      	strh	r3, [r7, #6]
 8005f24:	4613      	mov	r3, r2
 8005f26:	717b      	strb	r3, [r7, #5]
  // Header 
  ELClient_RequestArgc(CMD_MQTT_PUBLISH, 0, 5);
 8005f28:	2205      	movs	r2, #5
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	200b      	movs	r0, #11
 8005f2e:	f000 f823 	bl	8005f78 <ELClient_RequestArgc>

  // Data section
  ELClient_RequestBuffer(topic, strlen(topic)); /*Arg 1*/
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7fa f956 	bl	80001e4 <strlen>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 f85e 	bl	8006000 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(data, len); /*Arg 2*/
 8005f44:	88fb      	ldrh	r3, [r7, #6]
 8005f46:	4619      	mov	r1, r3
 8005f48:	68b8      	ldr	r0, [r7, #8]
 8005f4a:	f000 f859 	bl	8006000 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(&len, 2); /*Arg 3*/
 8005f4e:	1dbb      	adds	r3, r7, #6
 8005f50:	2102      	movs	r1, #2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 f854 	bl	8006000 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(&qos, 1); /*Arg 4*/
 8005f58:	1d7b      	adds	r3, r7, #5
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 f84f 	bl	8006000 <ELClient_RequestBuffer>
  ELClient_RequestBuffer(&retain, 1); /*Arg 5*/
 8005f62:	2101      	movs	r1, #1
 8005f64:	f107 0018 	add.w	r0, r7, #24
 8005f68:	f000 f84a 	bl	8006000 <ELClient_RequestBuffer>

  // Footer
  ELClient_EndRequest();
 8005f6c:	f000 f8a6 	bl	80060bc <ELClient_EndRequest>
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <ELClient_RequestArgc>:
#include "common.h"

static uint16_t crc = 0; /**< CRC checksum */

void ELClient_RequestArgc(uint16_t cmd, uint32_t value, uint16_t argc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	6039      	str	r1, [r7, #0]
 8005f82:	80fb      	strh	r3, [r7, #6]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80bb      	strh	r3, [r7, #4]
  crc = 0;
 8005f88:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <ELClient_RequestArgc+0x84>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	801a      	strh	r2, [r3, #0]

  /* send an initial END character to flush out any data that may
  * have accumulated in the receiver due to line noise
  */
  xPortSerialPutByte(SLIP_END);
 8005f8e:	20c0      	movs	r0, #192	; 0xc0
 8005f90:	f000 fc0a 	bl	80067a8 <xPortSerialPutByte>
  ELClient_WriteBuffer(&cmd, 2);
 8005f94:	1dbb      	adds	r3, r7, #6
 8005f96:	2102      	movs	r1, #2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 f9b3 	bl	8006304 <ELClient_WriteBuffer>
  crc = _crc16Data((unsigned const char*)&cmd, 2, crc);
 8005f9e:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <ELClient_RequestArgc+0x84>)
 8005fa0:	881a      	ldrh	r2, [r3, #0]
 8005fa2:	1dbb      	adds	r3, r7, #6
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff fefa 	bl	8005da0 <_crc16Data>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <ELClient_RequestArgc+0x84>)
 8005fb2:	801a      	strh	r2, [r3, #0]

  ELClient_WriteBuffer(&argc, 2);
 8005fb4:	1d3b      	adds	r3, r7, #4
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f9a3 	bl	8006304 <ELClient_WriteBuffer>
  crc = _crc16Data((unsigned const char*)&argc, 2, crc);
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <ELClient_RequestArgc+0x84>)
 8005fc0:	881a      	ldrh	r2, [r3, #0]
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff feea 	bl	8005da0 <_crc16Data>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <ELClient_RequestArgc+0x84>)
 8005fd2:	801a      	strh	r2, [r3, #0]

  ELClient_WriteBuffer(&value, 4);
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 f993 	bl	8006304 <ELClient_WriteBuffer>
  crc = _crc16Data((unsigned const char*)&value, 4, crc);
 8005fde:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <ELClient_RequestArgc+0x84>)
 8005fe0:	881a      	ldrh	r2, [r3, #0]
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	2104      	movs	r1, #4
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff feda 	bl	8005da0 <_crc16Data>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4b02      	ldr	r3, [pc, #8]	; (8005ffc <ELClient_RequestArgc+0x84>)
 8005ff2:	801a      	strh	r2, [r3, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20004634 	.word	0x20004634

08006000 <ELClient_RequestBuffer>:

void ELClient_RequestBuffer(const void* data, uint16_t len)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	807b      	strh	r3, [r7, #2]
  uint16_t l = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	82fb      	strh	r3, [r7, #22]
  uint8_t *d = (uint8_t*)data;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	613b      	str	r3, [r7, #16]
  uint16_t data_len = len;
 8006014:	887b      	ldrh	r3, [r7, #2]
 8006016:	817b      	strh	r3, [r7, #10]

  // ELClient_write the length
  ELClient_WriteBuffer(&data_len, 2);
 8006018:	f107 030a 	add.w	r3, r7, #10
 800601c:	2102      	movs	r1, #2
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f970 	bl	8006304 <ELClient_WriteBuffer>
  crc = _crc16Data((unsigned const char*)&data_len, 2, crc);
 8006024:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <ELClient_RequestBuffer+0xb8>)
 8006026:	881a      	ldrh	r2, [r3, #0]
 8006028:	f107 030a 	add.w	r3, r7, #10
 800602c:	2102      	movs	r1, #2
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff feb6 	bl	8005da0 <_crc16Data>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <ELClient_RequestBuffer+0xb8>)
 800603a:	801a      	strh	r2, [r3, #0]

  // output the data
  for (l=len; l>0; l--) 
 800603c:	887b      	ldrh	r3, [r7, #2]
 800603e:	82fb      	strh	r3, [r7, #22]
 8006040:	e015      	b.n	800606e <ELClient_RequestBuffer+0x6e>
  {
    ELClient_Write(*d);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f93a 	bl	80062c0 <ELClient_Write>
    crc = _crc16Add(*d++, crc);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	613a      	str	r2, [r7, #16]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <ELClient_RequestBuffer+0xb8>)
 8006056:	8812      	ldrh	r2, [r2, #0]
 8006058:	4611      	mov	r1, r2
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fe62 	bl	8005d24 <_crc16Add>
 8006060:	4603      	mov	r3, r0
 8006062:	461a      	mov	r2, r3
 8006064:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <ELClient_RequestBuffer+0xb8>)
 8006066:	801a      	strh	r2, [r3, #0]
  for (l=len; l>0; l--) 
 8006068:	8afb      	ldrh	r3, [r7, #22]
 800606a:	3b01      	subs	r3, #1
 800606c:	82fb      	strh	r3, [r7, #22]
 800606e:	8afb      	ldrh	r3, [r7, #22]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e6      	bne.n	8006042 <ELClient_RequestBuffer+0x42>
  }

  // output padding
  uint16_t pad = (4-(len&3))&3;
 8006074:	887b      	ldrh	r3, [r7, #2]
 8006076:	425b      	negs	r3, r3
 8006078:	b29b      	uxth	r3, r3
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	81fb      	strh	r3, [r7, #14]
  uint8_t temp = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	737b      	strb	r3, [r7, #13]
  while (pad--) 
 8006084:	e00e      	b.n	80060a4 <ELClient_RequestBuffer+0xa4>
  {
    ELClient_Write(temp);
 8006086:	7b7b      	ldrb	r3, [r7, #13]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 f919 	bl	80062c0 <ELClient_Write>
    crc = _crc16Add(temp, crc);
 800608e:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <ELClient_RequestBuffer+0xb8>)
 8006090:	881a      	ldrh	r2, [r3, #0]
 8006092:	7b7b      	ldrb	r3, [r7, #13]
 8006094:	4611      	mov	r1, r2
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fe44 	bl	8005d24 <_crc16Add>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <ELClient_RequestBuffer+0xb8>)
 80060a2:	801a      	strh	r2, [r3, #0]
  while (pad--) 
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	1e5a      	subs	r2, r3, #1
 80060a8:	81fa      	strh	r2, [r7, #14]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1eb      	bne.n	8006086 <ELClient_RequestBuffer+0x86>
  }
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20004634 	.word	0x20004634

080060bc <ELClient_EndRequest>:

void ELClient_EndRequest(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
  ELClient_WriteBuffer((uint8_t*)&crc, 2);
 80060c0:	2102      	movs	r1, #2
 80060c2:	4804      	ldr	r0, [pc, #16]	; (80060d4 <ELClient_EndRequest+0x18>)
 80060c4:	f000 f91e 	bl	8006304 <ELClient_WriteBuffer>

  /* tell the receiver that we’re done sending the packet
  */
  xPortSerialPutByte(SLIP_END);
 80060c8:	20c0      	movs	r0, #192	; 0xc0
 80060ca:	f000 fb6d 	bl	80067a8 <xPortSerialPutByte>
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20004634 	.word	0x20004634

080060d8 <ELClientResponseInit>:
static uint8_t* _arg_ptr = NULL; /**< Pointer to argument */
static ELClientPacket* _cmd = NULL; /**< Global Pointer to packet */

/* Call this init function before parsing the received packet */
void ELClientResponseInit(ELClientPacket* packet)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  _cmd = packet;
 80060e0:	4a08      	ldr	r2, [pc, #32]	; (8006104 <ELClientResponseInit+0x2c>)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6013      	str	r3, [r2, #0]
  _arg_ptr = _cmd->args;
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <ELClientResponseInit+0x2c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	4a06      	ldr	r2, [pc, #24]	; (8006108 <ELClientResponseInit+0x30>)
 80060ee:	6013      	str	r3, [r2, #0]
  _arg_num = 0;
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <ELClientResponseInit+0x34>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	801a      	strh	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	2000463c 	.word	0x2000463c
 8006108:	20004638 	.word	0x20004638
 800610c:	20004636 	.word	0x20004636

08006110 <Response_popArg>:
  return len;
}

/* Pop argument data */
int16_t Response_popArg(void* d, uint16_t maxLen)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
  if (_arg_num >= _cmd->argc) return -1;
 800611c:	4b26      	ldr	r3, [pc, #152]	; (80061b8 <Response_popArg+0xa8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	885b      	ldrh	r3, [r3, #2]
 8006122:	b29a      	uxth	r2, r3
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <Response_popArg+0xac>)
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d802      	bhi.n	8006132 <Response_popArg+0x22>
 800612c:	f04f 33ff 	mov.w	r3, #4294967295
 8006130:	e03b      	b.n	80061aa <Response_popArg+0x9a>

  /* Get  2 bytes len */
  uint16_t len = *(uint16_t*)_arg_ptr;
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <Response_popArg+0xb0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	817b      	strh	r3, [r7, #10]
  uint16_t pad = (4-((len+2)&3))&3;    /* pad to next multiple of 4, including length */
 800613a:	897b      	ldrh	r3, [r7, #10]
 800613c:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8006140:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8006144:	33fe      	adds	r3, #254	; 0xfe
 8006146:	b29b      	uxth	r3, r3
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	813b      	strh	r3, [r7, #8]
  _arg_ptr += 2;
 800614e:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <Response_popArg+0xb0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3302      	adds	r3, #2
 8006154:	4a1a      	ldr	r2, [pc, #104]	; (80061c0 <Response_popArg+0xb0>)
 8006156:	6013      	str	r3, [r2, #0]
  _arg_num++;
 8006158:	4b18      	ldr	r3, [pc, #96]	; (80061bc <Response_popArg+0xac>)
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	4b16      	ldr	r3, [pc, #88]	; (80061bc <Response_popArg+0xac>)
 8006162:	801a      	strh	r2, [r3, #0]

  uint8_t *data = (uint8_t *)d;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	617b      	str	r3, [r7, #20]
  uint16_t l = len > maxLen ? maxLen : len;
 8006168:	897a      	ldrh	r2, [r7, #10]
 800616a:	887b      	ldrh	r3, [r7, #2]
 800616c:	4293      	cmp	r3, r2
 800616e:	bf28      	it	cs
 8006170:	4613      	movcs	r3, r2
 8006172:	827b      	strh	r3, [r7, #18]
  uint8_t *p = _arg_ptr;
 8006174:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <Response_popArg+0xb0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
  while (l--) {
 800617a:	e007      	b.n	800618c <Response_popArg+0x7c>
    *data++ = *p++;
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	1c53      	adds	r3, r2, #1
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	1c59      	adds	r1, r3, #1
 8006186:	6179      	str	r1, [r7, #20]
 8006188:	7812      	ldrb	r2, [r2, #0]
 800618a:	701a      	strb	r2, [r3, #0]
  while (l--) {
 800618c:	8a7b      	ldrh	r3, [r7, #18]
 800618e:	1e5a      	subs	r2, r3, #1
 8006190:	827a      	strh	r2, [r7, #18]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1f2      	bne.n	800617c <Response_popArg+0x6c>
  }

  _arg_ptr += len + pad;
 8006196:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <Response_popArg+0xb0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	8979      	ldrh	r1, [r7, #10]
 800619c:	893a      	ldrh	r2, [r7, #8]
 800619e:	440a      	add	r2, r1
 80061a0:	4413      	add	r3, r2
 80061a2:	4a07      	ldr	r2, [pc, #28]	; (80061c0 <Response_popArg+0xb0>)
 80061a4:	6013      	str	r3, [r2, #0]

  return len;
 80061a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	2000463c 	.word	0x2000463c
 80061bc:	20004636 	.word	0x20004636
 80061c0:	20004638 	.word	0x20004638

080061c4 <Response_popString>:

void Response_popString(uint8_t* buffer, uint16_t* payload_len)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint8_t i = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  uint16_t len = *(uint16_t*)_arg_ptr;
 80061d2:	4b22      	ldr	r3, [pc, #136]	; (800625c <Response_popString+0x98>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	81bb      	strh	r3, [r7, #12]
  uint16_t pad = (4 - ( ( len + 2 ) & 3 ) ) & 3;    /* pad to next multiple of 4, including length */
 80061da:	89bb      	ldrh	r3, [r7, #12]
 80061dc:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80061e0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80061e4:	33fe      	adds	r3, #254	; 0xfe
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	817b      	strh	r3, [r7, #10]

  _arg_ptr += 2;
 80061ee:	4b1b      	ldr	r3, [pc, #108]	; (800625c <Response_popString+0x98>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3302      	adds	r3, #2
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <Response_popString+0x98>)
 80061f6:	6013      	str	r3, [r2, #0]
  _arg_num++;
 80061f8:	4b19      	ldr	r3, [pc, #100]	; (8006260 <Response_popString+0x9c>)
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <Response_popString+0x9c>)
 8006202:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < len; i++) {
 8006204:	2300      	movs	r3, #0
 8006206:	73fb      	strb	r3, [r7, #15]
 8006208:	e00c      	b.n	8006224 <Response_popString+0x60>
    buffer[i] = (char)*_arg_ptr++;
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <Response_popString+0x98>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	4912      	ldr	r1, [pc, #72]	; (800625c <Response_popString+0x98>)
 8006212:	600a      	str	r2, [r1, #0]
 8006214:	7bfa      	ldrb	r2, [r7, #15]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	440a      	add	r2, r1
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	3301      	adds	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	b29b      	uxth	r3, r3
 8006228:	89ba      	ldrh	r2, [r7, #12]
 800622a:	429a      	cmp	r2, r3
 800622c:	d8ed      	bhi.n	800620a <Response_popString+0x46>
  }
  buffer[i] = '\0'; /* String NULL terminated character */
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	4413      	add	r3, r2
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]

  *payload_len = i + 1;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	b29b      	uxth	r3, r3
 800623c:	3301      	adds	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	801a      	strh	r2, [r3, #0]

  _arg_ptr += pad;
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <Response_popString+0x98>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	897b      	ldrh	r3, [r7, #10]
 800624a:	4413      	add	r3, r2
 800624c:	4a03      	ldr	r2, [pc, #12]	; (800625c <Response_popString+0x98>)
 800624e:	6013      	str	r3, [r2, #0]
}
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	20004638 	.word	0x20004638
 8006260:	20004636 	.word	0x20004636

08006264 <ELCLient_Transport_Init>:

uint8_t ucSerialQueueStorageArea[ SERIAL_QUEUE_LENGTH * SERIAL_ITEM_SIZE ];

/* Init uart transport */
void ELCLient_Transport_Init(  )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af02      	add	r7, sp, #8
    xPortSerialInit();
 800626a:	f000 fa93 	bl	8006794 <xPortSerialInit>
    xSerialQueueHandle = xQueueCreateStatic( SERIAL_QUEUE_LENGTH,
 800626e:	2300      	movs	r3, #0
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <ELCLient_Transport_Init+0x28>)
 8006274:	4a06      	ldr	r2, [pc, #24]	; (8006290 <ELCLient_Transport_Init+0x2c>)
 8006276:	2101      	movs	r1, #1
 8006278:	f44f 7000 	mov.w	r0, #512	; 0x200
 800627c:	f7fc fede 	bl	800303c <xQueueGenericCreateStatic>
 8006280:	4603      	mov	r3, r0
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <ELCLient_Transport_Init+0x30>)
 8006284:	6013      	str	r3, [r2, #0]
                                 SERIAL_ITEM_SIZE,
                                 ucSerialQueueStorageArea,
                                 &xSerialQueueStruct );
 }
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20004640 	.word	0x20004640
 8006290:	20004b94 	.word	0x20004b94
 8006294:	20004d94 	.word	0x20004d94

08006298 <ELClient_Read>:

/* Read data from the serial queue - wait forever*/
uint8_t ELClient_Read()
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	71fb      	strb	r3, [r7, #7]
  xQueueReceive( xSerialQueueHandle, &data, ( TickType_t ) 0xFFFFFFFF );
 80062a2:	4b06      	ldr	r3, [pc, #24]	; (80062bc <ELClient_Read+0x24>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	1df9      	adds	r1, r7, #7
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7fd f8f7 	bl	80034a0 <xQueueReceive>

  return data;
 80062b2:	79fb      	ldrb	r3, [r7, #7]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20004d94 	.word	0x20004d94

080062c0 <ELClient_Write>:
/* For each byte in the packet, send the appropriate character
* sequence
*/
void ELClient_Write(uint8_t data)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  switch (data)
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	2bc0      	cmp	r3, #192	; 0xc0
 80062ce:	d002      	beq.n	80062d6 <ELClient_Write+0x16>
 80062d0:	2bdb      	cmp	r3, #219	; 0xdb
 80062d2:	d007      	beq.n	80062e4 <ELClient_Write+0x24>
 80062d4:	e00d      	b.n	80062f2 <ELClient_Write+0x32>
  /* if it’s the same code as an END character, we send a
  * special two character code so as not to make the
  * receiver think we sent an END
  */    
	  case SLIP_END:
		  xPortSerialPutByte(SLIP_ESC);
 80062d6:	20db      	movs	r0, #219	; 0xdb
 80062d8:	f000 fa66 	bl	80067a8 <xPortSerialPutByte>
		  xPortSerialPutByte(SLIP_ESC_END);
 80062dc:	20dc      	movs	r0, #220	; 0xdc
 80062de:	f000 fa63 	bl	80067a8 <xPortSerialPutByte>
		break;
 80062e2:	e00b      	b.n	80062fc <ELClient_Write+0x3c>
    /* if it’s the same code as an ESC character,
    * we send a special two character code so as not
    * to make the receiver think we sent an ESC
    */    
	  case SLIP_ESC:
		  xPortSerialPutByte(SLIP_ESC);
 80062e4:	20db      	movs	r0, #219	; 0xdb
 80062e6:	f000 fa5f 	bl	80067a8 <xPortSerialPutByte>
		  xPortSerialPutByte(SLIP_ESC_ESC);
 80062ea:	20dd      	movs	r0, #221	; 0xdd
 80062ec:	f000 fa5c 	bl	80067a8 <xPortSerialPutByte>
		break;
 80062f0:	e004      	b.n	80062fc <ELClient_Write+0x3c>
	  default:
		xPortSerialPutByte(data);
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 fa57 	bl	80067a8 <xPortSerialPutByte>
  }
  
}
 80062fa:	bf00      	nop
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <ELClient_WriteBuffer>:

void ELClient_WriteBuffer(void* data, uint16_t len)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
  uint8_t *d = (uint8_t*)data;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  while (len--)
 8006314:	e006      	b.n	8006324 <ELClient_WriteBuffer+0x20>
  {
	  ELClient_Write(*d++);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	60fa      	str	r2, [r7, #12]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff ffce 	bl	80062c0 <ELClient_Write>
  while (len--)
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	1e5a      	subs	r2, r3, #1
 8006328:	807a      	strh	r2, [r7, #2]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f3      	bne.n	8006316 <ELClient_WriteBuffer+0x12>
  }
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <LL_USART_IsActiveFlag_TC>:
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	bf0c      	ite	eq
 800634c:	2301      	moveq	r3, #1
 800634e:	2300      	movne	r3, #0
 8006350:	b2db      	uxtb	r3, r3
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	605a      	str	r2, [r3, #4]
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <debug_puts>:
void __uart_putchar(char c);
void debug_send_buffer(const uint8_t* msg, uint32_t len);


void debug_puts ( const char* msg)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
    debug_send_buffer(msg, strlen(msg) );
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7f9 ff2d 	bl	80001e4 <strlen>
 800638a:	4603      	mov	r3, r0
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f830 	bl	80063f4 <debug_send_buffer>
	__uart_putchar('\r');
 8006394:	200d      	movs	r0, #13
 8006396:	f000 f849 	bl	800642c <__uart_putchar>
	__uart_putchar('\n');
 800639a:	200a      	movs	r0, #10
 800639c:	f000 f846 	bl	800642c <__uart_putchar>
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <debug_printf>:

void  debug_printf ( const char * format, ... )
{
 80063a8:	b40f      	push	{r0, r1, r2, r3}
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b082      	sub	sp, #8
 80063ae:	af00      	add	r7, sp, #0
  va_list args;

	/* Tao chuoi tu format nhieu doi so*/
  va_start (args, format);
 80063b0:	f107 0314 	add.w	r3, r7, #20
 80063b4:	607b      	str	r3, [r7, #4]
  vsnprintf (debug_buf, MAX_DEBUG_BUF_LEN, format, args);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063be:	480c      	ldr	r0, [pc, #48]	; (80063f0 <debug_printf+0x48>)
 80063c0:	f000 faa4 	bl	800690c <vsniprintf>
	/* Gui chuoi debug ra UART */
  debug_send_buffer(debug_buf, strlen(debug_buf));
 80063c4:	480a      	ldr	r0, [pc, #40]	; (80063f0 <debug_printf+0x48>)
 80063c6:	f7f9 ff0d 	bl	80001e4 <strlen>
 80063ca:	4603      	mov	r3, r0
 80063cc:	4619      	mov	r1, r3
 80063ce:	4808      	ldr	r0, [pc, #32]	; (80063f0 <debug_printf+0x48>)
 80063d0:	f000 f810 	bl	80063f4 <debug_send_buffer>
  va_end (args);
  __uart_putchar('\r');
 80063d4:	200d      	movs	r0, #13
 80063d6:	f000 f829 	bl	800642c <__uart_putchar>
  __uart_putchar('\n');
 80063da:	200a      	movs	r0, #10
 80063dc:	f000 f826 	bl	800642c <__uart_putchar>
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ea:	b004      	add	sp, #16
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20004688 	.word	0x20004688

080063f4 <debug_send_buffer>:

void debug_send_buffer(const uint8_t* msg, uint32_t len)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
   /* Lap den khi nao ket thuc chuoi, va kiem tra pointer NOT NULL*/
	while(len--)
 80063fe:	e006      	b.n	800640e <debug_send_buffer+0x1a>
	{
		__uart_putchar(*msg++);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f80f 	bl	800642c <__uart_putchar>
	while(len--)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	1e5a      	subs	r2, r3, #1
 8006412:	603a      	str	r2, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f3      	bne.n	8006400 <debug_send_buffer+0xc>
	}
	__uart_putchar('\r');
 8006418:	200d      	movs	r0, #13
 800641a:	f000 f807 	bl	800642c <__uart_putchar>
	__uart_putchar('\n');
 800641e:	200a      	movs	r0, #10
 8006420:	f000 f804 	bl	800642c <__uart_putchar>
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <__uart_putchar>:

//=========================================
void __uart_putchar(char c)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	71fb      	strb	r3, [r7, #7]
	/*Step 2: Ghi vao DR*/
	  LL_USART_TransmitData8(CONSOLE_UART, c);
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	4619      	mov	r1, r3
 800643a:	4807      	ldr	r0, [pc, #28]	; (8006458 <__uart_putchar+0x2c>)
 800643c:	f7ff ff8f 	bl	800635e <LL_USART_TransmitData8>

	  /*Step 3: cho den khi TC = 1 - Trang 1007 Ref manual*/
	  while(!LL_USART_IsActiveFlag_TC(CONSOLE_UART)) {};
 8006440:	bf00      	nop
 8006442:	4805      	ldr	r0, [pc, #20]	; (8006458 <__uart_putchar+0x2c>)
 8006444:	f7ff ff78 	bl	8006338 <LL_USART_IsActiveFlag_TC>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f9      	beq.n	8006442 <__uart_putchar+0x16>
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40004800 	.word	0x40004800

0800645c <LL_GPIO_SetOutputPin>:
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	619a      	str	r2, [r3, #24]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <LL_GPIO_ResetOutputPin>:
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	041a      	lsls	r2, r3, #16
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	619a      	str	r2, [r3, #24]
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	4013      	ands	r3, r2
 80064ac:	041a      	lsls	r2, r3, #16
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	43d9      	mvns	r1, r3
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	400b      	ands	r3, r1
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	619a      	str	r2, [r3, #24]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <Mqtt_Init>:
void mqttDisconnected(void* response);
void mqttData(void* response);
void mqttPublished(void* response);

void Mqtt_Init()
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  ELClient_Init();
 80064cc:	f7ff faee 	bl	8005aac <ELClient_Init>
  ELClientMqtt_WifiCbRegister(wifiStatusCb);
 80064d0:	4808      	ldr	r0, [pc, #32]	; (80064f4 <Mqtt_Init+0x2c>)
 80064d2:	f7ff fb69 	bl	8005ba8 <ELClientMqtt_WifiCbRegister>

  /* Set-up callbacks for events and initialize with es-link. */
  ELClientMqtt_ConnectedCbRegister(mqttConnected);
 80064d6:	4808      	ldr	r0, [pc, #32]	; (80064f8 <Mqtt_Init+0x30>)
 80064d8:	f7ff fc88 	bl	8005dec <ELClientMqtt_ConnectedCbRegister>
  ELClientMqtt_DisconnectedCbRegister(mqttDisconnected);
 80064dc:	4807      	ldr	r0, [pc, #28]	; (80064fc <Mqtt_Init+0x34>)
 80064de:	f7ff fc95 	bl	8005e0c <ELClientMqtt_DisconnectedCbRegister>
  ELClientMqtt_PublishedCbRegister(mqttPublished);
 80064e2:	4807      	ldr	r0, [pc, #28]	; (8006500 <Mqtt_Init+0x38>)
 80064e4:	f7ff fca2 	bl	8005e2c <ELClientMqtt_PublishedCbRegister>
  ELClientMqtt_DataCbRegister(mqttData); /* mqttData =  Address of User Function located in Flash */
 80064e8:	4806      	ldr	r0, [pc, #24]	; (8006504 <Mqtt_Init+0x3c>)
 80064ea:	f7ff fcaf 	bl	8005e4c <ELClientMqtt_DataCbRegister>
}
 80064ee:	bf00      	nop
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	08006575 	.word	0x08006575
 80064f8:	080065bd 	.word	0x080065bd
 80064fc:	080065e1 	.word	0x080065e1
 8006500:	080066e9 	.word	0x080066e9
 8006504:	08006659 	.word	0x08006659

08006508 <Mqtt_Publish>:

void Mqtt_Publish(const char* topic, const uint8_t* data, const uint16_t len)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]
  ELClientMqtt_publish(topic, data, len, 0, 0);
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff fcf6 	bl	8005f12 <ELClientMqtt_publish>
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <Mqtt_IsConnected>:

uint8_t Mqtt_IsConnected() 
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return connected;
 8006534:	4b03      	ldr	r3, [pc, #12]	; (8006544 <Mqtt_IsConnected+0x14>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b2db      	uxtb	r3, r3
}
 800653a:	4618      	mov	r0, r3
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	20004888 	.word	0x20004888

08006548 <Mqtt_Sync>:

void Mqtt_Sync()
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
  BOOL ok = FALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	71fb      	strb	r3, [r7, #7]
  do{
	 ok = ELClient_Sync();      // sync up with esp-link, blocks for up to 2 seconds
 8006552:	f7ff fb4d 	bl	8005bf0 <ELClient_Sync>
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
	 osDelay(1000);
 800655a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800655e:	f7fc fc06 	bl	8002d6e <osDelay>
  } while(!ok);
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f4      	beq.n	8006552 <Mqtt_Sync+0xa>
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <wifiStatusCb>:

//============================ LOCAL FUNCTIONS ===============================
// Callback made from esp-link to notify of wifi status changes
void wifiStatusCb(void* arg)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	Response_popArg(&status, 1);
 800657c:	f107 030f 	add.w	r3, r7, #15
 8006580:	2101      	movs	r1, #1
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fdc4 	bl	8006110 <Response_popArg>
	if(status == STATION_GOT_IP) {
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b05      	cmp	r3, #5
 800658c:	d103      	bne.n	8006596 <wifiStatusCb+0x22>
		DBG_PRINTF("WIFI CONNECTED");
 800658e:	4808      	ldr	r0, [pc, #32]	; (80065b0 <wifiStatusCb+0x3c>)
 8006590:	f7ff ff0a 	bl	80063a8 <debug_printf>
	} else {
		DBG_PRINTF("WIFI NOT READY: ");
		DBG_PRINTF("%d", status);
	}
}
 8006594:	e007      	b.n	80065a6 <wifiStatusCb+0x32>
		DBG_PRINTF("WIFI NOT READY: ");
 8006596:	4807      	ldr	r0, [pc, #28]	; (80065b4 <wifiStatusCb+0x40>)
 8006598:	f7ff ff06 	bl	80063a8 <debug_printf>
		DBG_PRINTF("%d", status);
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	4619      	mov	r1, r3
 80065a0:	4805      	ldr	r0, [pc, #20]	; (80065b8 <wifiStatusCb+0x44>)
 80065a2:	f7ff ff01 	bl	80063a8 <debug_printf>
}
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	08007224 	.word	0x08007224
 80065b4:	08007234 	.word	0x08007234
 80065b8:	08007248 	.word	0x08007248

080065bc <mqttConnected>:

// Callback when MQTT is connected
void mqttConnected(void* response)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  DBG_PRINTF("MQTT connected!");
 80065c4:	4804      	ldr	r0, [pc, #16]	; (80065d8 <mqttConnected+0x1c>)
 80065c6:	f7ff feef 	bl	80063a8 <debug_printf>
  connected = TRUE;
 80065ca:	4b04      	ldr	r3, [pc, #16]	; (80065dc <mqttConnected+0x20>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	0800724c 	.word	0x0800724c
 80065dc:	20004888 	.word	0x20004888

080065e0 <mqttDisconnected>:

// Callback when MQTT is disconnected
void mqttDisconnected(void* response)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  DBG_PRINTF("MQTT disconnected");
 80065e8:	4804      	ldr	r0, [pc, #16]	; (80065fc <mqttDisconnected+0x1c>)
 80065ea:	f7ff fedd 	bl	80063a8 <debug_printf>
  connected = FALSE;
 80065ee:	4b04      	ldr	r3, [pc, #16]	; (8006600 <mqttDisconnected+0x20>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	0800725c 	.word	0x0800725c
 8006600:	20004888 	.word	0x20004888

08006604 <mqttDataCmdHandler>:

/* Callback when an MQTT message arrives for one of our subscriptions */
void mqttDataCmdHandler(char* payload, uint32_t len)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  if (memcmp(payload, "led_on", strlen("led_on")) == 0) {
 800660e:	2206      	movs	r2, #6
 8006610:	490e      	ldr	r1, [pc, #56]	; (800664c <mqttDataCmdHandler+0x48>)
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f90a 	bl	800682c <memcmp>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <mqttDataCmdHandler+0x26>
	  LL_GPIO_SetOutputPin(LD3_GPIO_Port, LD3_Pin);
 800661e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006622:	480b      	ldr	r0, [pc, #44]	; (8006650 <mqttDataCmdHandler+0x4c>)
 8006624:	f7ff ff1a 	bl	800645c <LL_GPIO_SetOutputPin>
  } else if (memcmp(payload, "led_off", strlen("led_off")) == 0) {
	  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
  }
}
 8006628:	e00c      	b.n	8006644 <mqttDataCmdHandler+0x40>
  } else if (memcmp(payload, "led_off", strlen("led_off")) == 0) {
 800662a:	2207      	movs	r2, #7
 800662c:	4909      	ldr	r1, [pc, #36]	; (8006654 <mqttDataCmdHandler+0x50>)
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8fc 	bl	800682c <memcmp>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <mqttDataCmdHandler+0x40>
	  LL_GPIO_ResetOutputPin(LD3_GPIO_Port, LD3_Pin);
 800663a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800663e:	4804      	ldr	r0, [pc, #16]	; (8006650 <mqttDataCmdHandler+0x4c>)
 8006640:	f7ff ff1a 	bl	8006478 <LL_GPIO_ResetOutputPin>
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	08007270 	.word	0x08007270
 8006650:	40020c00 	.word	0x40020c00
 8006654:	08007278 	.word	0x08007278

08006658 <mqttData>:

void mqttData(void* response)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint8_t  topicLen = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	73bb      	strb	r3, [r7, #14]
  uint8_t  payloadLen = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	73fb      	strb	r3, [r7, #15]
  ELClientResponseInit((ELClientPacket*) response); /* Prepare packet */
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f7ff fd35 	bl	80060d8 <ELClientResponseInit>

  /* POP Mqtt topic */
  DBG_PRINTF("Received: topic=");
 800666e:	4818      	ldr	r0, [pc, #96]	; (80066d0 <mqttData+0x78>)
 8006670:	f7ff fe9a 	bl	80063a8 <debug_printf>
  Response_popString(&topic[0], &topicLen);
 8006674:	f107 030e 	add.w	r3, r7, #14
 8006678:	4619      	mov	r1, r3
 800667a:	4816      	ldr	r0, [pc, #88]	; (80066d4 <mqttData+0x7c>)
 800667c:	f7ff fda2 	bl	80061c4 <Response_popString>
  DUMP_BUFFER(topic, MQTT_FRAME_LEN);
 8006680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006684:	4813      	ldr	r0, [pc, #76]	; (80066d4 <mqttData+0x7c>)
 8006686:	f7ff feb5 	bl	80063f4 <debug_send_buffer>

  /*  Data Mqtt payload */
  payloadLen = Response_popArg(&data[0], sizeof(data));
 800668a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800668e:	4812      	ldr	r0, [pc, #72]	; (80066d8 <mqttData+0x80>)
 8006690:	f7ff fd3e 	bl	8006110 <Response_popArg>
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
  DBG_PRINTF("Payload len = %d\r\n", 0);
 8006698:	2100      	movs	r1, #0
 800669a:	4810      	ldr	r0, [pc, #64]	; (80066dc <mqttData+0x84>)
 800669c:	f7ff fe84 	bl	80063a8 <debug_printf>
  DBG_PRINTF("data=");
 80066a0:	480f      	ldr	r0, [pc, #60]	; (80066e0 <mqttData+0x88>)
 80066a2:	f7ff fe81 	bl	80063a8 <debug_printf>
  DUMP_BUFFER(data, MQTT_FRAME_LEN);
 80066a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066aa:	480b      	ldr	r0, [pc, #44]	; (80066d8 <mqttData+0x80>)
 80066ac:	f7ff fea2 	bl	80063f4 <debug_send_buffer>

  /* Example command handler */
  if (strcmp((char*)topic, "/esp-link/command") == 0)
 80066b0:	490c      	ldr	r1, [pc, #48]	; (80066e4 <mqttData+0x8c>)
 80066b2:	4808      	ldr	r0, [pc, #32]	; (80066d4 <mqttData+0x7c>)
 80066b4:	f7f9 fd8c 	bl	80001d0 <strcmp>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d104      	bne.n	80066c8 <mqttData+0x70>
  {
    mqttDataCmdHandler((char*)data, payloadLen);
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	4619      	mov	r1, r3
 80066c2:	4805      	ldr	r0, [pc, #20]	; (80066d8 <mqttData+0x80>)
 80066c4:	f7ff ff9e 	bl	8006604 <mqttDataCmdHandler>
  }
}
 80066c8:	bf00      	nop
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	08007280 	.word	0x08007280
 80066d4:	2000488c 	.word	0x2000488c
 80066d8:	2000498c 	.word	0x2000498c
 80066dc:	08007294 	.word	0x08007294
 80066e0:	080072a8 	.word	0x080072a8
 80066e4:	080072b0 	.word	0x080072b0

080066e8 <mqttPublished>:

/* Topic has been published successfully */
void mqttPublished(void* response)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	DBG_MSG("MQTT published");
 80066f0:	4805      	ldr	r0, [pc, #20]	; (8006708 <mqttPublished+0x20>)
 80066f2:	f7ff fe43 	bl	800637c <debug_puts>
    LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80066f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066fa:	4804      	ldr	r0, [pc, #16]	; (800670c <mqttPublished+0x24>)
 80066fc:	f7ff fecb 	bl	8006496 <LL_GPIO_TogglePin>
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	080072c4 	.word	0x080072c4
 800670c:	40020c00 	.word	0x40020c00

08006710 <xPortEventInit>:
static EventGroupHandle_t xELCientEvent_h;
static StaticEventGroup_t xELClientEventGroup;

/* ----------------------- Start implementation -----------------------------*/
BOOL  xPortEventInit( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
    xELCientEvent_h = xEventGroupCreateStatic( &xELClientEventGroup );
 8006714:	4804      	ldr	r0, [pc, #16]	; (8006728 <xPortEventInit+0x18>)
 8006716:	f7fc fb3e 	bl	8002d96 <xEventGroupCreateStatic>
 800671a:	4603      	mov	r3, r0
 800671c:	4a03      	ldr	r2, [pc, #12]	; (800672c <xPortEventInit+0x1c>)
 800671e:	6013      	str	r3, [r2, #0]
    return TRUE;
 8006720:	2301      	movs	r3, #1
}
 8006722:	4618      	mov	r0, r3
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20004a90 	.word	0x20004a90
 800672c:	20004a8c 	.word	0x20004a8c

08006730 <LL_USART_IsActiveFlag_TC>:
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <LL_USART_EnableIT_RXNE>:
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60da      	str	r2, [r3, #12]
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <LL_USART_TransmitData8>:
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	460b      	mov	r3, r1
 8006780:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	605a      	str	r2, [r3, #4]
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <xPortSerialInit>:

#include "port.h"
#include "config.h"

BOOL  xPortSerialInit( void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  LL_USART_EnableIT_RXNE(ELCLIENT_UART); /* RXNE = RX Not Empty */
 8006798:	4802      	ldr	r0, [pc, #8]	; (80067a4 <xPortSerialInit+0x10>)
 800679a:	f7ff ffdc 	bl	8006756 <LL_USART_EnableIT_RXNE>
  return TRUE;
 800679e:	2301      	movs	r3, #1
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40004400 	.word	0x40004400

080067a8 <xPortSerialPutByte>:
 
BOOL xPortSerialPutByte( CHAR ucByte )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  LL_USART_TransmitData8(ELCLIENT_UART, ucByte);
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	4619      	mov	r1, r3
 80067b6:	4807      	ldr	r0, [pc, #28]	; (80067d4 <xPortSerialPutByte+0x2c>)
 80067b8:	f7ff ffdd 	bl	8006776 <LL_USART_TransmitData8>
  while(!LL_USART_IsActiveFlag_TC(ELCLIENT_UART)) { }; /* Waitting flag TC ( Transfer Complete) asserted */
 80067bc:	bf00      	nop
 80067be:	4805      	ldr	r0, [pc, #20]	; (80067d4 <xPortSerialPutByte+0x2c>)
 80067c0:	f7ff ffb6 	bl	8006730 <LL_USART_IsActiveFlag_TC>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0f9      	beq.n	80067be <xPortSerialPutByte+0x16>

  return TRUE;
 80067ca:	2301      	movs	r3, #1
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40004400 	.word	0x40004400

080067d8 <__errno>:
 80067d8:	4b01      	ldr	r3, [pc, #4]	; (80067e0 <__errno+0x8>)
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20000010 	.word	0x20000010

080067e4 <__libc_init_array>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4d0d      	ldr	r5, [pc, #52]	; (800681c <__libc_init_array+0x38>)
 80067e8:	4c0d      	ldr	r4, [pc, #52]	; (8006820 <__libc_init_array+0x3c>)
 80067ea:	1b64      	subs	r4, r4, r5
 80067ec:	10a4      	asrs	r4, r4, #2
 80067ee:	2600      	movs	r6, #0
 80067f0:	42a6      	cmp	r6, r4
 80067f2:	d109      	bne.n	8006808 <__libc_init_array+0x24>
 80067f4:	4d0b      	ldr	r5, [pc, #44]	; (8006824 <__libc_init_array+0x40>)
 80067f6:	4c0c      	ldr	r4, [pc, #48]	; (8006828 <__libc_init_array+0x44>)
 80067f8:	f000 fc96 	bl	8007128 <_init>
 80067fc:	1b64      	subs	r4, r4, r5
 80067fe:	10a4      	asrs	r4, r4, #2
 8006800:	2600      	movs	r6, #0
 8006802:	42a6      	cmp	r6, r4
 8006804:	d105      	bne.n	8006812 <__libc_init_array+0x2e>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	f855 3b04 	ldr.w	r3, [r5], #4
 800680c:	4798      	blx	r3
 800680e:	3601      	adds	r6, #1
 8006810:	e7ee      	b.n	80067f0 <__libc_init_array+0xc>
 8006812:	f855 3b04 	ldr.w	r3, [r5], #4
 8006816:	4798      	blx	r3
 8006818:	3601      	adds	r6, #1
 800681a:	e7f2      	b.n	8006802 <__libc_init_array+0x1e>
 800681c:	08007328 	.word	0x08007328
 8006820:	08007328 	.word	0x08007328
 8006824:	08007328 	.word	0x08007328
 8006828:	0800732c 	.word	0x0800732c

0800682c <memcmp>:
 800682c:	b530      	push	{r4, r5, lr}
 800682e:	3901      	subs	r1, #1
 8006830:	2400      	movs	r4, #0
 8006832:	42a2      	cmp	r2, r4
 8006834:	d101      	bne.n	800683a <memcmp+0xe>
 8006836:	2000      	movs	r0, #0
 8006838:	e005      	b.n	8006846 <memcmp+0x1a>
 800683a:	5d03      	ldrb	r3, [r0, r4]
 800683c:	3401      	adds	r4, #1
 800683e:	5d0d      	ldrb	r5, [r1, r4]
 8006840:	42ab      	cmp	r3, r5
 8006842:	d0f6      	beq.n	8006832 <memcmp+0x6>
 8006844:	1b58      	subs	r0, r3, r5
 8006846:	bd30      	pop	{r4, r5, pc}

08006848 <memcpy>:
 8006848:	440a      	add	r2, r1
 800684a:	4291      	cmp	r1, r2
 800684c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006850:	d100      	bne.n	8006854 <memcpy+0xc>
 8006852:	4770      	bx	lr
 8006854:	b510      	push	{r4, lr}
 8006856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685e:	4291      	cmp	r1, r2
 8006860:	d1f9      	bne.n	8006856 <memcpy+0xe>
 8006862:	bd10      	pop	{r4, pc}

08006864 <memset>:
 8006864:	4402      	add	r2, r0
 8006866:	4603      	mov	r3, r0
 8006868:	4293      	cmp	r3, r2
 800686a:	d100      	bne.n	800686e <memset+0xa>
 800686c:	4770      	bx	lr
 800686e:	f803 1b01 	strb.w	r1, [r3], #1
 8006872:	e7f9      	b.n	8006868 <memset+0x4>

08006874 <siprintf>:
 8006874:	b40e      	push	{r1, r2, r3}
 8006876:	b500      	push	{lr}
 8006878:	b09c      	sub	sp, #112	; 0x70
 800687a:	ab1d      	add	r3, sp, #116	; 0x74
 800687c:	9002      	str	r0, [sp, #8]
 800687e:	9006      	str	r0, [sp, #24]
 8006880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006884:	4809      	ldr	r0, [pc, #36]	; (80068ac <siprintf+0x38>)
 8006886:	9107      	str	r1, [sp, #28]
 8006888:	9104      	str	r1, [sp, #16]
 800688a:	4909      	ldr	r1, [pc, #36]	; (80068b0 <siprintf+0x3c>)
 800688c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006890:	9105      	str	r1, [sp, #20]
 8006892:	6800      	ldr	r0, [r0, #0]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	a902      	add	r1, sp, #8
 8006898:	f000 f8a2 	bl	80069e0 <_svfiprintf_r>
 800689c:	9b02      	ldr	r3, [sp, #8]
 800689e:	2200      	movs	r2, #0
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	b01c      	add	sp, #112	; 0x70
 80068a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a8:	b003      	add	sp, #12
 80068aa:	4770      	bx	lr
 80068ac:	20000010 	.word	0x20000010
 80068b0:	ffff0208 	.word	0xffff0208

080068b4 <_vsniprintf_r>:
 80068b4:	b530      	push	{r4, r5, lr}
 80068b6:	1e14      	subs	r4, r2, #0
 80068b8:	4605      	mov	r5, r0
 80068ba:	b09b      	sub	sp, #108	; 0x6c
 80068bc:	4618      	mov	r0, r3
 80068be:	da05      	bge.n	80068cc <_vsniprintf_r+0x18>
 80068c0:	238b      	movs	r3, #139	; 0x8b
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
 80068c8:	b01b      	add	sp, #108	; 0x6c
 80068ca:	bd30      	pop	{r4, r5, pc}
 80068cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80068d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80068d4:	bf14      	ite	ne
 80068d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068da:	4623      	moveq	r3, r4
 80068dc:	9302      	str	r3, [sp, #8]
 80068de:	9305      	str	r3, [sp, #20]
 80068e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068e4:	9100      	str	r1, [sp, #0]
 80068e6:	9104      	str	r1, [sp, #16]
 80068e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80068ec:	4602      	mov	r2, r0
 80068ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068f0:	4669      	mov	r1, sp
 80068f2:	4628      	mov	r0, r5
 80068f4:	f000 f874 	bl	80069e0 <_svfiprintf_r>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	bfbc      	itt	lt
 80068fc:	238b      	movlt	r3, #139	; 0x8b
 80068fe:	602b      	strlt	r3, [r5, #0]
 8006900:	2c00      	cmp	r4, #0
 8006902:	d0e1      	beq.n	80068c8 <_vsniprintf_r+0x14>
 8006904:	9b00      	ldr	r3, [sp, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	e7dd      	b.n	80068c8 <_vsniprintf_r+0x14>

0800690c <vsniprintf>:
 800690c:	b507      	push	{r0, r1, r2, lr}
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	460a      	mov	r2, r1
 8006914:	4601      	mov	r1, r0
 8006916:	4803      	ldr	r0, [pc, #12]	; (8006924 <vsniprintf+0x18>)
 8006918:	6800      	ldr	r0, [r0, #0]
 800691a:	f7ff ffcb 	bl	80068b4 <_vsniprintf_r>
 800691e:	b003      	add	sp, #12
 8006920:	f85d fb04 	ldr.w	pc, [sp], #4
 8006924:	20000010 	.word	0x20000010

08006928 <__ssputs_r>:
 8006928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800692c:	688e      	ldr	r6, [r1, #8]
 800692e:	429e      	cmp	r6, r3
 8006930:	4682      	mov	sl, r0
 8006932:	460c      	mov	r4, r1
 8006934:	4690      	mov	r8, r2
 8006936:	461f      	mov	r7, r3
 8006938:	d838      	bhi.n	80069ac <__ssputs_r+0x84>
 800693a:	898a      	ldrh	r2, [r1, #12]
 800693c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006940:	d032      	beq.n	80069a8 <__ssputs_r+0x80>
 8006942:	6825      	ldr	r5, [r4, #0]
 8006944:	6909      	ldr	r1, [r1, #16]
 8006946:	eba5 0901 	sub.w	r9, r5, r1
 800694a:	6965      	ldr	r5, [r4, #20]
 800694c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006950:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006954:	3301      	adds	r3, #1
 8006956:	444b      	add	r3, r9
 8006958:	106d      	asrs	r5, r5, #1
 800695a:	429d      	cmp	r5, r3
 800695c:	bf38      	it	cc
 800695e:	461d      	movcc	r5, r3
 8006960:	0553      	lsls	r3, r2, #21
 8006962:	d531      	bpl.n	80069c8 <__ssputs_r+0xa0>
 8006964:	4629      	mov	r1, r5
 8006966:	f000 fb39 	bl	8006fdc <_malloc_r>
 800696a:	4606      	mov	r6, r0
 800696c:	b950      	cbnz	r0, 8006984 <__ssputs_r+0x5c>
 800696e:	230c      	movs	r3, #12
 8006970:	f8ca 3000 	str.w	r3, [sl]
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	f04f 30ff 	mov.w	r0, #4294967295
 8006980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006984:	6921      	ldr	r1, [r4, #16]
 8006986:	464a      	mov	r2, r9
 8006988:	f7ff ff5e 	bl	8006848 <memcpy>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006996:	81a3      	strh	r3, [r4, #12]
 8006998:	6126      	str	r6, [r4, #16]
 800699a:	6165      	str	r5, [r4, #20]
 800699c:	444e      	add	r6, r9
 800699e:	eba5 0509 	sub.w	r5, r5, r9
 80069a2:	6026      	str	r6, [r4, #0]
 80069a4:	60a5      	str	r5, [r4, #8]
 80069a6:	463e      	mov	r6, r7
 80069a8:	42be      	cmp	r6, r7
 80069aa:	d900      	bls.n	80069ae <__ssputs_r+0x86>
 80069ac:	463e      	mov	r6, r7
 80069ae:	4632      	mov	r2, r6
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	4641      	mov	r1, r8
 80069b4:	f000 faa8 	bl	8006f08 <memmove>
 80069b8:	68a3      	ldr	r3, [r4, #8]
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	1b9b      	subs	r3, r3, r6
 80069be:	4432      	add	r2, r6
 80069c0:	60a3      	str	r3, [r4, #8]
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	2000      	movs	r0, #0
 80069c6:	e7db      	b.n	8006980 <__ssputs_r+0x58>
 80069c8:	462a      	mov	r2, r5
 80069ca:	f000 fb61 	bl	8007090 <_realloc_r>
 80069ce:	4606      	mov	r6, r0
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d1e1      	bne.n	8006998 <__ssputs_r+0x70>
 80069d4:	6921      	ldr	r1, [r4, #16]
 80069d6:	4650      	mov	r0, sl
 80069d8:	f000 fab0 	bl	8006f3c <_free_r>
 80069dc:	e7c7      	b.n	800696e <__ssputs_r+0x46>
	...

080069e0 <_svfiprintf_r>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	4698      	mov	r8, r3
 80069e6:	898b      	ldrh	r3, [r1, #12]
 80069e8:	061b      	lsls	r3, r3, #24
 80069ea:	b09d      	sub	sp, #116	; 0x74
 80069ec:	4607      	mov	r7, r0
 80069ee:	460d      	mov	r5, r1
 80069f0:	4614      	mov	r4, r2
 80069f2:	d50e      	bpl.n	8006a12 <_svfiprintf_r+0x32>
 80069f4:	690b      	ldr	r3, [r1, #16]
 80069f6:	b963      	cbnz	r3, 8006a12 <_svfiprintf_r+0x32>
 80069f8:	2140      	movs	r1, #64	; 0x40
 80069fa:	f000 faef 	bl	8006fdc <_malloc_r>
 80069fe:	6028      	str	r0, [r5, #0]
 8006a00:	6128      	str	r0, [r5, #16]
 8006a02:	b920      	cbnz	r0, 8006a0e <_svfiprintf_r+0x2e>
 8006a04:	230c      	movs	r3, #12
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295
 8006a0c:	e0d1      	b.n	8006bb2 <_svfiprintf_r+0x1d2>
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	616b      	str	r3, [r5, #20]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9309      	str	r3, [sp, #36]	; 0x24
 8006a16:	2320      	movs	r3, #32
 8006a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a20:	2330      	movs	r3, #48	; 0x30
 8006a22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006bcc <_svfiprintf_r+0x1ec>
 8006a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a2a:	f04f 0901 	mov.w	r9, #1
 8006a2e:	4623      	mov	r3, r4
 8006a30:	469a      	mov	sl, r3
 8006a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a36:	b10a      	cbz	r2, 8006a3c <_svfiprintf_r+0x5c>
 8006a38:	2a25      	cmp	r2, #37	; 0x25
 8006a3a:	d1f9      	bne.n	8006a30 <_svfiprintf_r+0x50>
 8006a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a40:	d00b      	beq.n	8006a5a <_svfiprintf_r+0x7a>
 8006a42:	465b      	mov	r3, fp
 8006a44:	4622      	mov	r2, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f7ff ff6d 	bl	8006928 <__ssputs_r>
 8006a4e:	3001      	adds	r0, #1
 8006a50:	f000 80aa 	beq.w	8006ba8 <_svfiprintf_r+0x1c8>
 8006a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a56:	445a      	add	r2, fp
 8006a58:	9209      	str	r2, [sp, #36]	; 0x24
 8006a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80a2 	beq.w	8006ba8 <_svfiprintf_r+0x1c8>
 8006a64:	2300      	movs	r3, #0
 8006a66:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a6e:	f10a 0a01 	add.w	sl, sl, #1
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	9307      	str	r3, [sp, #28]
 8006a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8006a7c:	4654      	mov	r4, sl
 8006a7e:	2205      	movs	r2, #5
 8006a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a84:	4851      	ldr	r0, [pc, #324]	; (8006bcc <_svfiprintf_r+0x1ec>)
 8006a86:	f7f9 fbbb 	bl	8000200 <memchr>
 8006a8a:	9a04      	ldr	r2, [sp, #16]
 8006a8c:	b9d8      	cbnz	r0, 8006ac6 <_svfiprintf_r+0xe6>
 8006a8e:	06d0      	lsls	r0, r2, #27
 8006a90:	bf44      	itt	mi
 8006a92:	2320      	movmi	r3, #32
 8006a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a98:	0711      	lsls	r1, r2, #28
 8006a9a:	bf44      	itt	mi
 8006a9c:	232b      	movmi	r3, #43	; 0x2b
 8006a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa8:	d015      	beq.n	8006ad6 <_svfiprintf_r+0xf6>
 8006aaa:	9a07      	ldr	r2, [sp, #28]
 8006aac:	4654      	mov	r4, sl
 8006aae:	2000      	movs	r0, #0
 8006ab0:	f04f 0c0a 	mov.w	ip, #10
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aba:	3b30      	subs	r3, #48	; 0x30
 8006abc:	2b09      	cmp	r3, #9
 8006abe:	d94e      	bls.n	8006b5e <_svfiprintf_r+0x17e>
 8006ac0:	b1b0      	cbz	r0, 8006af0 <_svfiprintf_r+0x110>
 8006ac2:	9207      	str	r2, [sp, #28]
 8006ac4:	e014      	b.n	8006af0 <_svfiprintf_r+0x110>
 8006ac6:	eba0 0308 	sub.w	r3, r0, r8
 8006aca:	fa09 f303 	lsl.w	r3, r9, r3
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	9304      	str	r3, [sp, #16]
 8006ad2:	46a2      	mov	sl, r4
 8006ad4:	e7d2      	b.n	8006a7c <_svfiprintf_r+0x9c>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	9103      	str	r1, [sp, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfbb      	ittet	lt
 8006ae2:	425b      	neglt	r3, r3
 8006ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ae8:	9307      	strge	r3, [sp, #28]
 8006aea:	9307      	strlt	r3, [sp, #28]
 8006aec:	bfb8      	it	lt
 8006aee:	9204      	strlt	r2, [sp, #16]
 8006af0:	7823      	ldrb	r3, [r4, #0]
 8006af2:	2b2e      	cmp	r3, #46	; 0x2e
 8006af4:	d10c      	bne.n	8006b10 <_svfiprintf_r+0x130>
 8006af6:	7863      	ldrb	r3, [r4, #1]
 8006af8:	2b2a      	cmp	r3, #42	; 0x2a
 8006afa:	d135      	bne.n	8006b68 <_svfiprintf_r+0x188>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	1d1a      	adds	r2, r3, #4
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	9203      	str	r2, [sp, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfb8      	it	lt
 8006b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b0c:	3402      	adds	r4, #2
 8006b0e:	9305      	str	r3, [sp, #20]
 8006b10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006bdc <_svfiprintf_r+0x1fc>
 8006b14:	7821      	ldrb	r1, [r4, #0]
 8006b16:	2203      	movs	r2, #3
 8006b18:	4650      	mov	r0, sl
 8006b1a:	f7f9 fb71 	bl	8000200 <memchr>
 8006b1e:	b140      	cbz	r0, 8006b32 <_svfiprintf_r+0x152>
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	eba0 000a 	sub.w	r0, r0, sl
 8006b26:	fa03 f000 	lsl.w	r0, r3, r0
 8006b2a:	9b04      	ldr	r3, [sp, #16]
 8006b2c:	4303      	orrs	r3, r0
 8006b2e:	3401      	adds	r4, #1
 8006b30:	9304      	str	r3, [sp, #16]
 8006b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b36:	4826      	ldr	r0, [pc, #152]	; (8006bd0 <_svfiprintf_r+0x1f0>)
 8006b38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b3c:	2206      	movs	r2, #6
 8006b3e:	f7f9 fb5f 	bl	8000200 <memchr>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d038      	beq.n	8006bb8 <_svfiprintf_r+0x1d8>
 8006b46:	4b23      	ldr	r3, [pc, #140]	; (8006bd4 <_svfiprintf_r+0x1f4>)
 8006b48:	bb1b      	cbnz	r3, 8006b92 <_svfiprintf_r+0x1b2>
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	3307      	adds	r3, #7
 8006b4e:	f023 0307 	bic.w	r3, r3, #7
 8006b52:	3308      	adds	r3, #8
 8006b54:	9303      	str	r3, [sp, #12]
 8006b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b58:	4433      	add	r3, r6
 8006b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b5c:	e767      	b.n	8006a2e <_svfiprintf_r+0x4e>
 8006b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b62:	460c      	mov	r4, r1
 8006b64:	2001      	movs	r0, #1
 8006b66:	e7a5      	b.n	8006ab4 <_svfiprintf_r+0xd4>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	3401      	adds	r4, #1
 8006b6c:	9305      	str	r3, [sp, #20]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	f04f 0c0a 	mov.w	ip, #10
 8006b74:	4620      	mov	r0, r4
 8006b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b7a:	3a30      	subs	r2, #48	; 0x30
 8006b7c:	2a09      	cmp	r2, #9
 8006b7e:	d903      	bls.n	8006b88 <_svfiprintf_r+0x1a8>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0c5      	beq.n	8006b10 <_svfiprintf_r+0x130>
 8006b84:	9105      	str	r1, [sp, #20]
 8006b86:	e7c3      	b.n	8006b10 <_svfiprintf_r+0x130>
 8006b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e7f0      	b.n	8006b74 <_svfiprintf_r+0x194>
 8006b92:	ab03      	add	r3, sp, #12
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	462a      	mov	r2, r5
 8006b98:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <_svfiprintf_r+0x1f8>)
 8006b9a:	a904      	add	r1, sp, #16
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	f3af 8000 	nop.w
 8006ba2:	1c42      	adds	r2, r0, #1
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	d1d6      	bne.n	8006b56 <_svfiprintf_r+0x176>
 8006ba8:	89ab      	ldrh	r3, [r5, #12]
 8006baa:	065b      	lsls	r3, r3, #25
 8006bac:	f53f af2c 	bmi.w	8006a08 <_svfiprintf_r+0x28>
 8006bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bb2:	b01d      	add	sp, #116	; 0x74
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb8:	ab03      	add	r3, sp, #12
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <_svfiprintf_r+0x1f8>)
 8006bc0:	a904      	add	r1, sp, #16
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	f000 f87a 	bl	8006cbc <_printf_i>
 8006bc8:	e7eb      	b.n	8006ba2 <_svfiprintf_r+0x1c2>
 8006bca:	bf00      	nop
 8006bcc:	080072ec 	.word	0x080072ec
 8006bd0:	080072f6 	.word	0x080072f6
 8006bd4:	00000000 	.word	0x00000000
 8006bd8:	08006929 	.word	0x08006929
 8006bdc:	080072f2 	.word	0x080072f2

08006be0 <_printf_common>:
 8006be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be4:	4616      	mov	r6, r2
 8006be6:	4699      	mov	r9, r3
 8006be8:	688a      	ldr	r2, [r1, #8]
 8006bea:	690b      	ldr	r3, [r1, #16]
 8006bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	bfb8      	it	lt
 8006bf4:	4613      	movlt	r3, r2
 8006bf6:	6033      	str	r3, [r6, #0]
 8006bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	b10a      	cbz	r2, 8006c06 <_printf_common+0x26>
 8006c02:	3301      	adds	r3, #1
 8006c04:	6033      	str	r3, [r6, #0]
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	0699      	lsls	r1, r3, #26
 8006c0a:	bf42      	ittt	mi
 8006c0c:	6833      	ldrmi	r3, [r6, #0]
 8006c0e:	3302      	addmi	r3, #2
 8006c10:	6033      	strmi	r3, [r6, #0]
 8006c12:	6825      	ldr	r5, [r4, #0]
 8006c14:	f015 0506 	ands.w	r5, r5, #6
 8006c18:	d106      	bne.n	8006c28 <_printf_common+0x48>
 8006c1a:	f104 0a19 	add.w	sl, r4, #25
 8006c1e:	68e3      	ldr	r3, [r4, #12]
 8006c20:	6832      	ldr	r2, [r6, #0]
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	42ab      	cmp	r3, r5
 8006c26:	dc26      	bgt.n	8006c76 <_printf_common+0x96>
 8006c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c2c:	1e13      	subs	r3, r2, #0
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	bf18      	it	ne
 8006c32:	2301      	movne	r3, #1
 8006c34:	0692      	lsls	r2, r2, #26
 8006c36:	d42b      	bmi.n	8006c90 <_printf_common+0xb0>
 8006c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	4638      	mov	r0, r7
 8006c40:	47c0      	blx	r8
 8006c42:	3001      	adds	r0, #1
 8006c44:	d01e      	beq.n	8006c84 <_printf_common+0xa4>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	68e5      	ldr	r5, [r4, #12]
 8006c4a:	6832      	ldr	r2, [r6, #0]
 8006c4c:	f003 0306 	and.w	r3, r3, #6
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	bf08      	it	eq
 8006c54:	1aad      	subeq	r5, r5, r2
 8006c56:	68a3      	ldr	r3, [r4, #8]
 8006c58:	6922      	ldr	r2, [r4, #16]
 8006c5a:	bf0c      	ite	eq
 8006c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c60:	2500      	movne	r5, #0
 8006c62:	4293      	cmp	r3, r2
 8006c64:	bfc4      	itt	gt
 8006c66:	1a9b      	subgt	r3, r3, r2
 8006c68:	18ed      	addgt	r5, r5, r3
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	341a      	adds	r4, #26
 8006c6e:	42b5      	cmp	r5, r6
 8006c70:	d11a      	bne.n	8006ca8 <_printf_common+0xc8>
 8006c72:	2000      	movs	r0, #0
 8006c74:	e008      	b.n	8006c88 <_printf_common+0xa8>
 8006c76:	2301      	movs	r3, #1
 8006c78:	4652      	mov	r2, sl
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	47c0      	blx	r8
 8006c80:	3001      	adds	r0, #1
 8006c82:	d103      	bne.n	8006c8c <_printf_common+0xac>
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8c:	3501      	adds	r5, #1
 8006c8e:	e7c6      	b.n	8006c1e <_printf_common+0x3e>
 8006c90:	18e1      	adds	r1, r4, r3
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	2030      	movs	r0, #48	; 0x30
 8006c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c9a:	4422      	add	r2, r4
 8006c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	e7c7      	b.n	8006c38 <_printf_common+0x58>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4622      	mov	r2, r4
 8006cac:	4649      	mov	r1, r9
 8006cae:	4638      	mov	r0, r7
 8006cb0:	47c0      	blx	r8
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	d0e6      	beq.n	8006c84 <_printf_common+0xa4>
 8006cb6:	3601      	adds	r6, #1
 8006cb8:	e7d9      	b.n	8006c6e <_printf_common+0x8e>
	...

08006cbc <_printf_i>:
 8006cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	4691      	mov	r9, r2
 8006cc4:	7e27      	ldrb	r7, [r4, #24]
 8006cc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cc8:	2f78      	cmp	r7, #120	; 0x78
 8006cca:	4680      	mov	r8, r0
 8006ccc:	469a      	mov	sl, r3
 8006cce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cd2:	d807      	bhi.n	8006ce4 <_printf_i+0x28>
 8006cd4:	2f62      	cmp	r7, #98	; 0x62
 8006cd6:	d80a      	bhi.n	8006cee <_printf_i+0x32>
 8006cd8:	2f00      	cmp	r7, #0
 8006cda:	f000 80d8 	beq.w	8006e8e <_printf_i+0x1d2>
 8006cde:	2f58      	cmp	r7, #88	; 0x58
 8006ce0:	f000 80a3 	beq.w	8006e2a <_printf_i+0x16e>
 8006ce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cec:	e03a      	b.n	8006d64 <_printf_i+0xa8>
 8006cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cf2:	2b15      	cmp	r3, #21
 8006cf4:	d8f6      	bhi.n	8006ce4 <_printf_i+0x28>
 8006cf6:	a001      	add	r0, pc, #4	; (adr r0, 8006cfc <_printf_i+0x40>)
 8006cf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006cfc:	08006d55 	.word	0x08006d55
 8006d00:	08006d69 	.word	0x08006d69
 8006d04:	08006ce5 	.word	0x08006ce5
 8006d08:	08006ce5 	.word	0x08006ce5
 8006d0c:	08006ce5 	.word	0x08006ce5
 8006d10:	08006ce5 	.word	0x08006ce5
 8006d14:	08006d69 	.word	0x08006d69
 8006d18:	08006ce5 	.word	0x08006ce5
 8006d1c:	08006ce5 	.word	0x08006ce5
 8006d20:	08006ce5 	.word	0x08006ce5
 8006d24:	08006ce5 	.word	0x08006ce5
 8006d28:	08006e75 	.word	0x08006e75
 8006d2c:	08006d99 	.word	0x08006d99
 8006d30:	08006e57 	.word	0x08006e57
 8006d34:	08006ce5 	.word	0x08006ce5
 8006d38:	08006ce5 	.word	0x08006ce5
 8006d3c:	08006e97 	.word	0x08006e97
 8006d40:	08006ce5 	.word	0x08006ce5
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006ce5 	.word	0x08006ce5
 8006d4c:	08006ce5 	.word	0x08006ce5
 8006d50:	08006e5f 	.word	0x08006e5f
 8006d54:	680b      	ldr	r3, [r1, #0]
 8006d56:	1d1a      	adds	r2, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	600a      	str	r2, [r1, #0]
 8006d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0a3      	b.n	8006eb0 <_printf_i+0x1f4>
 8006d68:	6825      	ldr	r5, [r4, #0]
 8006d6a:	6808      	ldr	r0, [r1, #0]
 8006d6c:	062e      	lsls	r6, r5, #24
 8006d6e:	f100 0304 	add.w	r3, r0, #4
 8006d72:	d50a      	bpl.n	8006d8a <_printf_i+0xce>
 8006d74:	6805      	ldr	r5, [r0, #0]
 8006d76:	600b      	str	r3, [r1, #0]
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	da03      	bge.n	8006d84 <_printf_i+0xc8>
 8006d7c:	232d      	movs	r3, #45	; 0x2d
 8006d7e:	426d      	negs	r5, r5
 8006d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d84:	485e      	ldr	r0, [pc, #376]	; (8006f00 <_printf_i+0x244>)
 8006d86:	230a      	movs	r3, #10
 8006d88:	e019      	b.n	8006dbe <_printf_i+0x102>
 8006d8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d8e:	6805      	ldr	r5, [r0, #0]
 8006d90:	600b      	str	r3, [r1, #0]
 8006d92:	bf18      	it	ne
 8006d94:	b22d      	sxthne	r5, r5
 8006d96:	e7ef      	b.n	8006d78 <_printf_i+0xbc>
 8006d98:	680b      	ldr	r3, [r1, #0]
 8006d9a:	6825      	ldr	r5, [r4, #0]
 8006d9c:	1d18      	adds	r0, r3, #4
 8006d9e:	6008      	str	r0, [r1, #0]
 8006da0:	0628      	lsls	r0, r5, #24
 8006da2:	d501      	bpl.n	8006da8 <_printf_i+0xec>
 8006da4:	681d      	ldr	r5, [r3, #0]
 8006da6:	e002      	b.n	8006dae <_printf_i+0xf2>
 8006da8:	0669      	lsls	r1, r5, #25
 8006daa:	d5fb      	bpl.n	8006da4 <_printf_i+0xe8>
 8006dac:	881d      	ldrh	r5, [r3, #0]
 8006dae:	4854      	ldr	r0, [pc, #336]	; (8006f00 <_printf_i+0x244>)
 8006db0:	2f6f      	cmp	r7, #111	; 0x6f
 8006db2:	bf0c      	ite	eq
 8006db4:	2308      	moveq	r3, #8
 8006db6:	230a      	movne	r3, #10
 8006db8:	2100      	movs	r1, #0
 8006dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dbe:	6866      	ldr	r6, [r4, #4]
 8006dc0:	60a6      	str	r6, [r4, #8]
 8006dc2:	2e00      	cmp	r6, #0
 8006dc4:	bfa2      	ittt	ge
 8006dc6:	6821      	ldrge	r1, [r4, #0]
 8006dc8:	f021 0104 	bicge.w	r1, r1, #4
 8006dcc:	6021      	strge	r1, [r4, #0]
 8006dce:	b90d      	cbnz	r5, 8006dd4 <_printf_i+0x118>
 8006dd0:	2e00      	cmp	r6, #0
 8006dd2:	d04d      	beq.n	8006e70 <_printf_i+0x1b4>
 8006dd4:	4616      	mov	r6, r2
 8006dd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006dda:	fb03 5711 	mls	r7, r3, r1, r5
 8006dde:	5dc7      	ldrb	r7, [r0, r7]
 8006de0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006de4:	462f      	mov	r7, r5
 8006de6:	42bb      	cmp	r3, r7
 8006de8:	460d      	mov	r5, r1
 8006dea:	d9f4      	bls.n	8006dd6 <_printf_i+0x11a>
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d10b      	bne.n	8006e08 <_printf_i+0x14c>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	07df      	lsls	r7, r3, #31
 8006df4:	d508      	bpl.n	8006e08 <_printf_i+0x14c>
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	6861      	ldr	r1, [r4, #4]
 8006dfa:	4299      	cmp	r1, r3
 8006dfc:	bfde      	ittt	le
 8006dfe:	2330      	movle	r3, #48	; 0x30
 8006e00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e08:	1b92      	subs	r2, r2, r6
 8006e0a:	6122      	str	r2, [r4, #16]
 8006e0c:	f8cd a000 	str.w	sl, [sp]
 8006e10:	464b      	mov	r3, r9
 8006e12:	aa03      	add	r2, sp, #12
 8006e14:	4621      	mov	r1, r4
 8006e16:	4640      	mov	r0, r8
 8006e18:	f7ff fee2 	bl	8006be0 <_printf_common>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d14c      	bne.n	8006eba <_printf_i+0x1fe>
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295
 8006e24:	b004      	add	sp, #16
 8006e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2a:	4835      	ldr	r0, [pc, #212]	; (8006f00 <_printf_i+0x244>)
 8006e2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	680e      	ldr	r6, [r1, #0]
 8006e34:	061f      	lsls	r7, r3, #24
 8006e36:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e3a:	600e      	str	r6, [r1, #0]
 8006e3c:	d514      	bpl.n	8006e68 <_printf_i+0x1ac>
 8006e3e:	07d9      	lsls	r1, r3, #31
 8006e40:	bf44      	itt	mi
 8006e42:	f043 0320 	orrmi.w	r3, r3, #32
 8006e46:	6023      	strmi	r3, [r4, #0]
 8006e48:	b91d      	cbnz	r5, 8006e52 <_printf_i+0x196>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	f023 0320 	bic.w	r3, r3, #32
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	2310      	movs	r3, #16
 8006e54:	e7b0      	b.n	8006db8 <_printf_i+0xfc>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	f043 0320 	orr.w	r3, r3, #32
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	2378      	movs	r3, #120	; 0x78
 8006e60:	4828      	ldr	r0, [pc, #160]	; (8006f04 <_printf_i+0x248>)
 8006e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e66:	e7e3      	b.n	8006e30 <_printf_i+0x174>
 8006e68:	065e      	lsls	r6, r3, #25
 8006e6a:	bf48      	it	mi
 8006e6c:	b2ad      	uxthmi	r5, r5
 8006e6e:	e7e6      	b.n	8006e3e <_printf_i+0x182>
 8006e70:	4616      	mov	r6, r2
 8006e72:	e7bb      	b.n	8006dec <_printf_i+0x130>
 8006e74:	680b      	ldr	r3, [r1, #0]
 8006e76:	6826      	ldr	r6, [r4, #0]
 8006e78:	6960      	ldr	r0, [r4, #20]
 8006e7a:	1d1d      	adds	r5, r3, #4
 8006e7c:	600d      	str	r5, [r1, #0]
 8006e7e:	0635      	lsls	r5, r6, #24
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	d501      	bpl.n	8006e88 <_printf_i+0x1cc>
 8006e84:	6018      	str	r0, [r3, #0]
 8006e86:	e002      	b.n	8006e8e <_printf_i+0x1d2>
 8006e88:	0671      	lsls	r1, r6, #25
 8006e8a:	d5fb      	bpl.n	8006e84 <_printf_i+0x1c8>
 8006e8c:	8018      	strh	r0, [r3, #0]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6123      	str	r3, [r4, #16]
 8006e92:	4616      	mov	r6, r2
 8006e94:	e7ba      	b.n	8006e0c <_printf_i+0x150>
 8006e96:	680b      	ldr	r3, [r1, #0]
 8006e98:	1d1a      	adds	r2, r3, #4
 8006e9a:	600a      	str	r2, [r1, #0]
 8006e9c:	681e      	ldr	r6, [r3, #0]
 8006e9e:	6862      	ldr	r2, [r4, #4]
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7f9 f9ac 	bl	8000200 <memchr>
 8006ea8:	b108      	cbz	r0, 8006eae <_printf_i+0x1f2>
 8006eaa:	1b80      	subs	r0, r0, r6
 8006eac:	6060      	str	r0, [r4, #4]
 8006eae:	6863      	ldr	r3, [r4, #4]
 8006eb0:	6123      	str	r3, [r4, #16]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb8:	e7a8      	b.n	8006e0c <_printf_i+0x150>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	47d0      	blx	sl
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d0ab      	beq.n	8006e20 <_printf_i+0x164>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	079b      	lsls	r3, r3, #30
 8006ecc:	d413      	bmi.n	8006ef6 <_printf_i+0x23a>
 8006ece:	68e0      	ldr	r0, [r4, #12]
 8006ed0:	9b03      	ldr	r3, [sp, #12]
 8006ed2:	4298      	cmp	r0, r3
 8006ed4:	bfb8      	it	lt
 8006ed6:	4618      	movlt	r0, r3
 8006ed8:	e7a4      	b.n	8006e24 <_printf_i+0x168>
 8006eda:	2301      	movs	r3, #1
 8006edc:	4632      	mov	r2, r6
 8006ede:	4649      	mov	r1, r9
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	47d0      	blx	sl
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d09b      	beq.n	8006e20 <_printf_i+0x164>
 8006ee8:	3501      	adds	r5, #1
 8006eea:	68e3      	ldr	r3, [r4, #12]
 8006eec:	9903      	ldr	r1, [sp, #12]
 8006eee:	1a5b      	subs	r3, r3, r1
 8006ef0:	42ab      	cmp	r3, r5
 8006ef2:	dcf2      	bgt.n	8006eda <_printf_i+0x21e>
 8006ef4:	e7eb      	b.n	8006ece <_printf_i+0x212>
 8006ef6:	2500      	movs	r5, #0
 8006ef8:	f104 0619 	add.w	r6, r4, #25
 8006efc:	e7f5      	b.n	8006eea <_printf_i+0x22e>
 8006efe:	bf00      	nop
 8006f00:	080072fd 	.word	0x080072fd
 8006f04:	0800730e 	.word	0x0800730e

08006f08 <memmove>:
 8006f08:	4288      	cmp	r0, r1
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	eb01 0402 	add.w	r4, r1, r2
 8006f10:	d902      	bls.n	8006f18 <memmove+0x10>
 8006f12:	4284      	cmp	r4, r0
 8006f14:	4623      	mov	r3, r4
 8006f16:	d807      	bhi.n	8006f28 <memmove+0x20>
 8006f18:	1e43      	subs	r3, r0, #1
 8006f1a:	42a1      	cmp	r1, r4
 8006f1c:	d008      	beq.n	8006f30 <memmove+0x28>
 8006f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f26:	e7f8      	b.n	8006f1a <memmove+0x12>
 8006f28:	4402      	add	r2, r0
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	428a      	cmp	r2, r1
 8006f2e:	d100      	bne.n	8006f32 <memmove+0x2a>
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f3a:	e7f7      	b.n	8006f2c <memmove+0x24>

08006f3c <_free_r>:
 8006f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f3e:	2900      	cmp	r1, #0
 8006f40:	d048      	beq.n	8006fd4 <_free_r+0x98>
 8006f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f46:	9001      	str	r0, [sp, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f4e:	bfb8      	it	lt
 8006f50:	18e4      	addlt	r4, r4, r3
 8006f52:	f000 f8d3 	bl	80070fc <__malloc_lock>
 8006f56:	4a20      	ldr	r2, [pc, #128]	; (8006fd8 <_free_r+0x9c>)
 8006f58:	9801      	ldr	r0, [sp, #4]
 8006f5a:	6813      	ldr	r3, [r2, #0]
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	b933      	cbnz	r3, 8006f6e <_free_r+0x32>
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	6014      	str	r4, [r2, #0]
 8006f64:	b003      	add	sp, #12
 8006f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f6a:	f000 b8cd 	b.w	8007108 <__malloc_unlock>
 8006f6e:	42a3      	cmp	r3, r4
 8006f70:	d90b      	bls.n	8006f8a <_free_r+0x4e>
 8006f72:	6821      	ldr	r1, [r4, #0]
 8006f74:	1862      	adds	r2, r4, r1
 8006f76:	4293      	cmp	r3, r2
 8006f78:	bf04      	itt	eq
 8006f7a:	681a      	ldreq	r2, [r3, #0]
 8006f7c:	685b      	ldreq	r3, [r3, #4]
 8006f7e:	6063      	str	r3, [r4, #4]
 8006f80:	bf04      	itt	eq
 8006f82:	1852      	addeq	r2, r2, r1
 8006f84:	6022      	streq	r2, [r4, #0]
 8006f86:	602c      	str	r4, [r5, #0]
 8006f88:	e7ec      	b.n	8006f64 <_free_r+0x28>
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	b10b      	cbz	r3, 8006f94 <_free_r+0x58>
 8006f90:	42a3      	cmp	r3, r4
 8006f92:	d9fa      	bls.n	8006f8a <_free_r+0x4e>
 8006f94:	6811      	ldr	r1, [r2, #0]
 8006f96:	1855      	adds	r5, r2, r1
 8006f98:	42a5      	cmp	r5, r4
 8006f9a:	d10b      	bne.n	8006fb4 <_free_r+0x78>
 8006f9c:	6824      	ldr	r4, [r4, #0]
 8006f9e:	4421      	add	r1, r4
 8006fa0:	1854      	adds	r4, r2, r1
 8006fa2:	42a3      	cmp	r3, r4
 8006fa4:	6011      	str	r1, [r2, #0]
 8006fa6:	d1dd      	bne.n	8006f64 <_free_r+0x28>
 8006fa8:	681c      	ldr	r4, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	6053      	str	r3, [r2, #4]
 8006fae:	4421      	add	r1, r4
 8006fb0:	6011      	str	r1, [r2, #0]
 8006fb2:	e7d7      	b.n	8006f64 <_free_r+0x28>
 8006fb4:	d902      	bls.n	8006fbc <_free_r+0x80>
 8006fb6:	230c      	movs	r3, #12
 8006fb8:	6003      	str	r3, [r0, #0]
 8006fba:	e7d3      	b.n	8006f64 <_free_r+0x28>
 8006fbc:	6825      	ldr	r5, [r4, #0]
 8006fbe:	1961      	adds	r1, r4, r5
 8006fc0:	428b      	cmp	r3, r1
 8006fc2:	bf04      	itt	eq
 8006fc4:	6819      	ldreq	r1, [r3, #0]
 8006fc6:	685b      	ldreq	r3, [r3, #4]
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	bf04      	itt	eq
 8006fcc:	1949      	addeq	r1, r1, r5
 8006fce:	6021      	streq	r1, [r4, #0]
 8006fd0:	6054      	str	r4, [r2, #4]
 8006fd2:	e7c7      	b.n	8006f64 <_free_r+0x28>
 8006fd4:	b003      	add	sp, #12
 8006fd6:	bd30      	pop	{r4, r5, pc}
 8006fd8:	20004aac 	.word	0x20004aac

08006fdc <_malloc_r>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	1ccd      	adds	r5, r1, #3
 8006fe0:	f025 0503 	bic.w	r5, r5, #3
 8006fe4:	3508      	adds	r5, #8
 8006fe6:	2d0c      	cmp	r5, #12
 8006fe8:	bf38      	it	cc
 8006fea:	250c      	movcc	r5, #12
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	4606      	mov	r6, r0
 8006ff0:	db01      	blt.n	8006ff6 <_malloc_r+0x1a>
 8006ff2:	42a9      	cmp	r1, r5
 8006ff4:	d903      	bls.n	8006ffe <_malloc_r+0x22>
 8006ff6:	230c      	movs	r3, #12
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	f000 f87d 	bl	80070fc <__malloc_lock>
 8007002:	4921      	ldr	r1, [pc, #132]	; (8007088 <_malloc_r+0xac>)
 8007004:	680a      	ldr	r2, [r1, #0]
 8007006:	4614      	mov	r4, r2
 8007008:	b99c      	cbnz	r4, 8007032 <_malloc_r+0x56>
 800700a:	4f20      	ldr	r7, [pc, #128]	; (800708c <_malloc_r+0xb0>)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	b923      	cbnz	r3, 800701a <_malloc_r+0x3e>
 8007010:	4621      	mov	r1, r4
 8007012:	4630      	mov	r0, r6
 8007014:	f000 f862 	bl	80070dc <_sbrk_r>
 8007018:	6038      	str	r0, [r7, #0]
 800701a:	4629      	mov	r1, r5
 800701c:	4630      	mov	r0, r6
 800701e:	f000 f85d 	bl	80070dc <_sbrk_r>
 8007022:	1c43      	adds	r3, r0, #1
 8007024:	d123      	bne.n	800706e <_malloc_r+0x92>
 8007026:	230c      	movs	r3, #12
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	4630      	mov	r0, r6
 800702c:	f000 f86c 	bl	8007108 <__malloc_unlock>
 8007030:	e7e3      	b.n	8006ffa <_malloc_r+0x1e>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	1b5b      	subs	r3, r3, r5
 8007036:	d417      	bmi.n	8007068 <_malloc_r+0x8c>
 8007038:	2b0b      	cmp	r3, #11
 800703a:	d903      	bls.n	8007044 <_malloc_r+0x68>
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	441c      	add	r4, r3
 8007040:	6025      	str	r5, [r4, #0]
 8007042:	e004      	b.n	800704e <_malloc_r+0x72>
 8007044:	6863      	ldr	r3, [r4, #4]
 8007046:	42a2      	cmp	r2, r4
 8007048:	bf0c      	ite	eq
 800704a:	600b      	streq	r3, [r1, #0]
 800704c:	6053      	strne	r3, [r2, #4]
 800704e:	4630      	mov	r0, r6
 8007050:	f000 f85a 	bl	8007108 <__malloc_unlock>
 8007054:	f104 000b 	add.w	r0, r4, #11
 8007058:	1d23      	adds	r3, r4, #4
 800705a:	f020 0007 	bic.w	r0, r0, #7
 800705e:	1ac2      	subs	r2, r0, r3
 8007060:	d0cc      	beq.n	8006ffc <_malloc_r+0x20>
 8007062:	1a1b      	subs	r3, r3, r0
 8007064:	50a3      	str	r3, [r4, r2]
 8007066:	e7c9      	b.n	8006ffc <_malloc_r+0x20>
 8007068:	4622      	mov	r2, r4
 800706a:	6864      	ldr	r4, [r4, #4]
 800706c:	e7cc      	b.n	8007008 <_malloc_r+0x2c>
 800706e:	1cc4      	adds	r4, r0, #3
 8007070:	f024 0403 	bic.w	r4, r4, #3
 8007074:	42a0      	cmp	r0, r4
 8007076:	d0e3      	beq.n	8007040 <_malloc_r+0x64>
 8007078:	1a21      	subs	r1, r4, r0
 800707a:	4630      	mov	r0, r6
 800707c:	f000 f82e 	bl	80070dc <_sbrk_r>
 8007080:	3001      	adds	r0, #1
 8007082:	d1dd      	bne.n	8007040 <_malloc_r+0x64>
 8007084:	e7cf      	b.n	8007026 <_malloc_r+0x4a>
 8007086:	bf00      	nop
 8007088:	20004aac 	.word	0x20004aac
 800708c:	20004ab0 	.word	0x20004ab0

08007090 <_realloc_r>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	4607      	mov	r7, r0
 8007094:	4614      	mov	r4, r2
 8007096:	460e      	mov	r6, r1
 8007098:	b921      	cbnz	r1, 80070a4 <_realloc_r+0x14>
 800709a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800709e:	4611      	mov	r1, r2
 80070a0:	f7ff bf9c 	b.w	8006fdc <_malloc_r>
 80070a4:	b922      	cbnz	r2, 80070b0 <_realloc_r+0x20>
 80070a6:	f7ff ff49 	bl	8006f3c <_free_r>
 80070aa:	4625      	mov	r5, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b0:	f000 f830 	bl	8007114 <_malloc_usable_size_r>
 80070b4:	42a0      	cmp	r0, r4
 80070b6:	d20f      	bcs.n	80070d8 <_realloc_r+0x48>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4638      	mov	r0, r7
 80070bc:	f7ff ff8e 	bl	8006fdc <_malloc_r>
 80070c0:	4605      	mov	r5, r0
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d0f2      	beq.n	80070ac <_realloc_r+0x1c>
 80070c6:	4631      	mov	r1, r6
 80070c8:	4622      	mov	r2, r4
 80070ca:	f7ff fbbd 	bl	8006848 <memcpy>
 80070ce:	4631      	mov	r1, r6
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff33 	bl	8006f3c <_free_r>
 80070d6:	e7e9      	b.n	80070ac <_realloc_r+0x1c>
 80070d8:	4635      	mov	r5, r6
 80070da:	e7e7      	b.n	80070ac <_realloc_r+0x1c>

080070dc <_sbrk_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d06      	ldr	r5, [pc, #24]	; (80070f8 <_sbrk_r+0x1c>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	602b      	str	r3, [r5, #0]
 80070e8:	f7f9 fcfe 	bl	8000ae8 <_sbrk>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_sbrk_r+0x1a>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_sbrk_r+0x1a>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20004d98 	.word	0x20004d98

080070fc <__malloc_lock>:
 80070fc:	4801      	ldr	r0, [pc, #4]	; (8007104 <__malloc_lock+0x8>)
 80070fe:	f000 b811 	b.w	8007124 <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	20004da0 	.word	0x20004da0

08007108 <__malloc_unlock>:
 8007108:	4801      	ldr	r0, [pc, #4]	; (8007110 <__malloc_unlock+0x8>)
 800710a:	f000 b80c 	b.w	8007126 <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	20004da0 	.word	0x20004da0

08007114 <_malloc_usable_size_r>:
 8007114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007118:	1f18      	subs	r0, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	bfbc      	itt	lt
 800711e:	580b      	ldrlt	r3, [r1, r0]
 8007120:	18c0      	addlt	r0, r0, r3
 8007122:	4770      	bx	lr

08007124 <__retarget_lock_acquire_recursive>:
 8007124:	4770      	bx	lr

08007126 <__retarget_lock_release_recursive>:
 8007126:	4770      	bx	lr

08007128 <_init>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr

08007134 <_fini>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr
